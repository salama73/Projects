
Atmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000008ac  00000940  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  0080007c  0080007c  0000095c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000098c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000228e  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d7b  00000000  00000000  00002dde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000124c  00000000  00000000  00003b59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c0  00000000  00000000  00004da8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a0  00000000  00000000  00005268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001031  00000000  00000000  00005a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00006a39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_2>
   c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_13>
  38:	0c 94 25 01 	jmp	0x24a	; 0x24a <__vector_14>
  3c:	0c 94 4c 01 	jmp	0x298	; 0x298 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 39       	cpi	r26, 0x9A	; 154
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 85 03 	call	0x70a	; 0x70a <main>
  8a:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
 */


void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	//Call function
	GP_IRQ_CALL[0]();
  b4:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <GP_IRQ_CALL>
  b8:	f0 91 7e 00 	lds	r31, 0x007E	; 0x80007e <GP_IRQ_CALL+0x1>
  bc:	09 95       	icall
}
  be:	ff 91       	pop	r31
  c0:	ef 91       	pop	r30
  c2:	bf 91       	pop	r27
  c4:	af 91       	pop	r26
  c6:	9f 91       	pop	r25
  c8:	8f 91       	pop	r24
  ca:	7f 91       	pop	r23
  cc:	6f 91       	pop	r22
  ce:	5f 91       	pop	r21
  d0:	4f 91       	pop	r20
  d2:	3f 91       	pop	r19
  d4:	2f 91       	pop	r18
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <__vector_2>:


void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	3f 93       	push	r19
  ee:	4f 93       	push	r20
  f0:	5f 93       	push	r21
  f2:	6f 93       	push	r22
  f4:	7f 93       	push	r23
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	af 93       	push	r26
  fc:	bf 93       	push	r27
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
	//Call function
	GP_IRQ_CALL[1]();
 102:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <GP_IRQ_CALL+0x2>
 106:	f0 91 80 00 	lds	r31, 0x0080	; 0x800080 <GP_IRQ_CALL+0x3>
 10a:	09 95       	icall
}
 10c:	ff 91       	pop	r31
 10e:	ef 91       	pop	r30
 110:	bf 91       	pop	r27
 112:	af 91       	pop	r26
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	7f 91       	pop	r23
 11a:	6f 91       	pop	r22
 11c:	5f 91       	pop	r21
 11e:	4f 91       	pop	r20
 120:	3f 91       	pop	r19
 122:	2f 91       	pop	r18
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <__vector_3>:


void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31
	//Call function
	GP_IRQ_CALL[2]();
 150:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <GP_IRQ_CALL+0x4>
 154:	f0 91 82 00 	lds	r31, 0x0082	; 0x800082 <GP_IRQ_CALL+0x5>
 158:	09 95       	icall
}
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	bf 91       	pop	r27
 160:	af 91       	pop	r26
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	7f 91       	pop	r23
 168:	6f 91       	pop	r22
 16a:	5f 91       	pop	r21
 16c:	4f 91       	pop	r20
 16e:	3f 91       	pop	r19
 170:	2f 91       	pop	r18
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <MCAL_GPIO_Init>:
uint16_t MCAL_GPIO_ReadPort(GPIO_TypeDef *GPIOx )
{
	uint8_t port_value;
	port_value= (uint8_t) (GPIOx->PIN);
	return port_value;
}
 17c:	fc 01       	movw	r30, r24
 17e:	db 01       	movw	r26, r22
 180:	11 96       	adiw	r26, 0x01	; 1
 182:	8c 91       	ld	r24, X
 184:	11 97       	sbiw	r26, 0x01	; 1
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	59 f4       	brne	.+22     	; 0x1a0 <MCAL_GPIO_Init+0x24>
 18a:	8c 91       	ld	r24, X
 18c:	80 95       	com	r24
 18e:	91 81       	ldd	r25, Z+1	; 0x01
 190:	89 23       	and	r24, r25
 192:	81 83       	std	Z+1, r24	; 0x01
 194:	8c 91       	ld	r24, X
 196:	80 95       	com	r24
 198:	92 81       	ldd	r25, Z+2	; 0x02
 19a:	89 23       	and	r24, r25
 19c:	82 83       	std	Z+2, r24	; 0x02
 19e:	08 95       	ret
 1a0:	82 30       	cpi	r24, 0x02	; 2
 1a2:	51 f4       	brne	.+20     	; 0x1b8 <MCAL_GPIO_Init+0x3c>
 1a4:	8c 91       	ld	r24, X
 1a6:	80 95       	com	r24
 1a8:	91 81       	ldd	r25, Z+1	; 0x01
 1aa:	89 23       	and	r24, r25
 1ac:	81 83       	std	Z+1, r24	; 0x01
 1ae:	8c 91       	ld	r24, X
 1b0:	92 81       	ldd	r25, Z+2	; 0x02
 1b2:	89 2b       	or	r24, r25
 1b4:	82 83       	std	Z+2, r24	; 0x02
 1b6:	08 95       	ret
 1b8:	8c 91       	ld	r24, X
 1ba:	91 81       	ldd	r25, Z+1	; 0x01
 1bc:	89 2b       	or	r24, r25
 1be:	81 83       	std	Z+1, r24	; 0x01
 1c0:	8c 91       	ld	r24, X
 1c2:	80 95       	com	r24
 1c4:	92 81       	ldd	r25, Z+2	; 0x02
 1c6:	89 23       	and	r24, r25
 1c8:	82 83       	std	Z+2, r24	; 0x02
 1ca:	08 95       	ret

000001cc <MCAL_GPIO_ReadPin>:
 1cc:	fc 01       	movw	r30, r24
 1ce:	80 81       	ld	r24, Z
 1d0:	86 23       	and	r24, r22
 1d2:	09 f0       	breq	.+2      	; 0x1d6 <MCAL_GPIO_ReadPin+0xa>
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	08 95       	ret

000001d8 <MCAL_GPIO_WritePin>:
* @retval 			-none
* Note				-none
*/
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx ,uint8_t pinNumber ,uint8_t value)
{
	if ( value == GPIO_PIN_SET )
 1d8:	41 30       	cpi	r20, 0x01	; 1
 1da:	29 f4       	brne	.+10     	; 0x1e6 <MCAL_GPIO_WritePin+0xe>
	{
		GPIOx->PORT |= pinNumber ;
 1dc:	fc 01       	movw	r30, r24
 1de:	22 81       	ldd	r18, Z+2	; 0x02
 1e0:	62 2b       	or	r22, r18
 1e2:	62 83       	std	Z+2, r22	; 0x02
 1e4:	08 95       	ret
	}
	else if(  value == GPIO_PIN_RESET)
 1e6:	41 11       	cpse	r20, r1
 1e8:	05 c0       	rjmp	.+10     	; 0x1f4 <MCAL_GPIO_WritePin+0x1c>
	{
		GPIOx->PORT &= ~( pinNumber ) ;
 1ea:	60 95       	com	r22
 1ec:	fc 01       	movw	r30, r24
 1ee:	22 81       	ldd	r18, Z+2	; 0x02
 1f0:	62 23       	and	r22, r18
 1f2:	62 83       	std	Z+2, r22	; 0x02
 1f4:	08 95       	ret

000001f6 <MCAL_GPIO_WritePort>:
* @retval 			-none
* Note				-none
*/
void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx ,uint8_t value)
{
	GPIOx->PORT=  value;
 1f6:	fc 01       	movw	r30, r24
 1f8:	62 83       	std	Z+2, r22	; 0x02
 1fa:	08 95       	ret

000001fc <__vector_13>:
 *
 * ===============================================================
 */
void __vector_13 (void) __attribute__((signal));
void __vector_13 (void)
{
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	2f 93       	push	r18
 208:	3f 93       	push	r19
 20a:	4f 93       	push	r20
 20c:	5f 93       	push	r21
 20e:	6f 93       	push	r22
 210:	7f 93       	push	r23
 212:	8f 93       	push	r24
 214:	9f 93       	push	r25
 216:	af 93       	push	r26
 218:	bf 93       	push	r27
 21a:	ef 93       	push	r30
 21c:	ff 93       	push	r31
	//Call function
	GPU_IRQ_CALL[2]();
 21e:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <GPU_IRQ_CALL+0x4>
 222:	f0 91 88 00 	lds	r31, 0x0088	; 0x800088 <GPU_IRQ_CALL+0x5>
 226:	09 95       	icall
}
 228:	ff 91       	pop	r31
 22a:	ef 91       	pop	r30
 22c:	bf 91       	pop	r27
 22e:	af 91       	pop	r26
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	7f 91       	pop	r23
 236:	6f 91       	pop	r22
 238:	5f 91       	pop	r21
 23a:	4f 91       	pop	r20
 23c:	3f 91       	pop	r19
 23e:	2f 91       	pop	r18
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <__vector_14>:

void __vector_14 (void) __attribute__((signal));
void __vector_14 (void)
{
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	2f 93       	push	r18
 256:	3f 93       	push	r19
 258:	4f 93       	push	r20
 25a:	5f 93       	push	r21
 25c:	6f 93       	push	r22
 25e:	7f 93       	push	r23
 260:	8f 93       	push	r24
 262:	9f 93       	push	r25
 264:	af 93       	push	r26
 266:	bf 93       	push	r27
 268:	ef 93       	push	r30
 26a:	ff 93       	push	r31
	//Call function
	GPU_IRQ_CALL[1]();
 26c:	e0 91 85 00 	lds	r30, 0x0085	; 0x800085 <GPU_IRQ_CALL+0x2>
 270:	f0 91 86 00 	lds	r31, 0x0086	; 0x800086 <GPU_IRQ_CALL+0x3>
 274:	09 95       	icall
}
 276:	ff 91       	pop	r31
 278:	ef 91       	pop	r30
 27a:	bf 91       	pop	r27
 27c:	af 91       	pop	r26
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	7f 91       	pop	r23
 284:	6f 91       	pop	r22
 286:	5f 91       	pop	r21
 288:	4f 91       	pop	r20
 28a:	3f 91       	pop	r19
 28c:	2f 91       	pop	r18
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <__vector_15>:

void __vector_15 (void) __attribute__((signal));
void __vector_15 (void)
{
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	2f 93       	push	r18
 2a4:	3f 93       	push	r19
 2a6:	4f 93       	push	r20
 2a8:	5f 93       	push	r21
 2aa:	6f 93       	push	r22
 2ac:	7f 93       	push	r23
 2ae:	8f 93       	push	r24
 2b0:	9f 93       	push	r25
 2b2:	af 93       	push	r26
 2b4:	bf 93       	push	r27
 2b6:	ef 93       	push	r30
 2b8:	ff 93       	push	r31
	//Call function
	GPU_IRQ_CALL[0]();
 2ba:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <GPU_IRQ_CALL>
 2be:	f0 91 84 00 	lds	r31, 0x0084	; 0x800084 <GPU_IRQ_CALL+0x1>
 2c2:	09 95       	icall
}
 2c4:	ff 91       	pop	r31
 2c6:	ef 91       	pop	r30
 2c8:	bf 91       	pop	r27
 2ca:	af 91       	pop	r26
 2cc:	9f 91       	pop	r25
 2ce:	8f 91       	pop	r24
 2d0:	7f 91       	pop	r23
 2d2:	6f 91       	pop	r22
 2d4:	5f 91       	pop	r21
 2d6:	4f 91       	pop	r20
 2d8:	3f 91       	pop	r19
 2da:	2f 91       	pop	r18
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <Request>:
GPIO_Pinconfig_t pinconfig ;

void Request()				//  send start pulse to request
{
	//Set pit output
	pinconfig.pinNumber = DHT11_Pin ;
 2e6:	e9 e8       	ldi	r30, 0x89	; 137
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 e4       	ldi	r24, 0x40	; 64
 2ec:	80 83       	st	Z, r24
	pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT ;
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	81 83       	std	Z+1, r24	; 0x01
	MCAL_GPIO_Init( GPIOD , &pinconfig ) ;
 2f2:	bf 01       	movw	r22, r30
 2f4:	80 e3       	ldi	r24, 0x30	; 48
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
	// set pit how level
	MCAL_GPIO_WritePin(GPIOD,DHT11_Pin,GPIO_PIN_RESET);
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	60 e4       	ldi	r22, 0x40	; 64
 300:	80 e3       	ldi	r24, 0x30	; 48
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <MCAL_GPIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 308:	2f ef       	ldi	r18, 0xFF	; 255
 30a:	89 ef       	ldi	r24, 0xF9	; 249
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	21 50       	subi	r18, 0x01	; 1
 310:	80 40       	sbci	r24, 0x00	; 0
 312:	90 40       	sbci	r25, 0x00	; 0
 314:	e1 f7       	brne	.-8      	; 0x30e <Request+0x28>
 316:	00 c0       	rjmp	.+0      	; 0x318 <Request+0x32>
 318:	00 00       	nop
	_delay_ms(20);
	// set pit high level 
	MCAL_GPIO_WritePin(GPIOD,DHT11_Pin,GPIO_PIN_SET);
 31a:	41 e0       	ldi	r20, 0x01	; 1
 31c:	60 e4       	ldi	r22, 0x40	; 64
 31e:	80 e3       	ldi	r24, 0x30	; 48
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <MCAL_GPIO_WritePin>
 326:	08 95       	ret

00000328 <Response>:
}
void Response()				// receive response from DHT11 to MCU
{
	//Set pit input
	pinconfig.pinNumber = DHT11_Pin ;
 328:	e9 e8       	ldi	r30, 0x89	; 137
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 e4       	ldi	r24, 0x40	; 64
 32e:	80 83       	st	Z, r24
	pinconfig.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	81 83       	std	Z+1, r24	; 0x01
	MCAL_GPIO_Init( GPIOD , &pinconfig ) ;
 334:	bf 01       	movw	r22, r30
 336:	80 e3       	ldi	r24, 0x30	; 48
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
	
	while( MCAL_GPIO_ReadPin(GPIOD,DHT11_Pin)); // wait to pin input zero ( this is start low level Response )
 33e:	60 e4       	ldi	r22, 0x40	; 64
 340:	80 e3       	ldi	r24, 0x30	; 48
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 e6 00 	call	0x1cc	; 0x1cc <MCAL_GPIO_ReadPin>
 348:	81 11       	cpse	r24, r1
 34a:	f9 cf       	rjmp	.-14     	; 0x33e <Response+0x16>
	while( MCAL_GPIO_ReadPin(GPIOD,DHT11_Pin)==GPIO_PIN_RESET); // wait to pin input One ( this is start high level Response )
 34c:	60 e4       	ldi	r22, 0x40	; 64
 34e:	80 e3       	ldi	r24, 0x30	; 48
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 e6 00 	call	0x1cc	; 0x1cc <MCAL_GPIO_ReadPin>
 356:	88 23       	and	r24, r24
 358:	c9 f3       	breq	.-14     	; 0x34c <Response+0x24>
	while( MCAL_GPIO_ReadPin(GPIOD,DHT11_Pin)); // wait to end response signal
 35a:	60 e4       	ldi	r22, 0x40	; 64
 35c:	80 e3       	ldi	r24, 0x30	; 48
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 e6 00 	call	0x1cc	; 0x1cc <MCAL_GPIO_ReadPin>
 364:	81 11       	cpse	r24, r1
 366:	f9 cf       	rjmp	.-14     	; 0x35a <Response+0x32>
}
 368:	08 95       	ret

0000036a <Receive_data>:
uint8_t Receive_data() 	// receive data
{
 36a:	cf 93       	push	r28
	uint8_t i ;
	for ( i=0 ;i<8 ; i++)
 36c:	c0 e0       	ldi	r28, 0x00	; 0
 36e:	27 c0       	rjmp	.+78     	; 0x3be <Receive_data+0x54>
	{
		// check bit 0 or 1 (if pulse is <30 us input is low (0) )
		while( MCAL_GPIO_ReadPin(GPIOD,DHT11_Pin)==GPIO_PIN_RESET); //wait to input is high 
 370:	60 e4       	ldi	r22, 0x40	; 64
 372:	80 e3       	ldi	r24, 0x30	; 48
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 e6 00 	call	0x1cc	; 0x1cc <MCAL_GPIO_ReadPin>
 37a:	88 23       	and	r24, r24
 37c:	c9 f3       	breq	.-14     	; 0x370 <Receive_data+0x6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37e:	80 ea       	ldi	r24, 0xA0	; 160
 380:	8a 95       	dec	r24
 382:	f1 f7       	brne	.-4      	; 0x380 <Receive_data+0x16>
		_delay_us(30);
		// read pi if high this input is 1 
		if( MCAL_GPIO_ReadPin(GPIOD,DHT11_Pin))
 384:	60 e4       	ldi	r22, 0x40	; 64
 386:	80 e3       	ldi	r24, 0x30	; 48
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <MCAL_GPIO_ReadPin>
 38e:	88 23       	and	r24, r24
 390:	49 f0       	breq	.+18     	; 0x3a4 <Receive_data+0x3a>
		{
			buffer = (buffer<<1)|(0x01) ; // 1
 392:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	81 60       	ori	r24, 0x01	; 1
 39e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
 3a2:	05 c0       	rjmp	.+10     	; 0x3ae <Receive_data+0x44>
		}
		else
		{
			buffer = (buffer<<1) ;
 3a4:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 3a8:	88 0f       	add	r24, r24
 3aa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
		}
		while( MCAL_GPIO_ReadPin(GPIOD,DHT11_Pin));// wait until end signal
 3ae:	60 e4       	ldi	r22, 0x40	; 64
 3b0:	80 e3       	ldi	r24, 0x30	; 48
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <MCAL_GPIO_ReadPin>
 3b8:	81 11       	cpse	r24, r1
 3ba:	f9 cf       	rjmp	.-14     	; 0x3ae <Receive_data+0x44>
	while( MCAL_GPIO_ReadPin(GPIOD,DHT11_Pin)); // wait to end response signal
}
uint8_t Receive_data() 	// receive data
{
	uint8_t i ;
	for ( i=0 ;i<8 ; i++)
 3bc:	cf 5f       	subi	r28, 0xFF	; 255
 3be:	c8 30       	cpi	r28, 0x08	; 8
 3c0:	b8 f2       	brcs	.-82     	; 0x370 <Receive_data+0x6>
			buffer = (buffer<<1) ;
		}
		while( MCAL_GPIO_ReadPin(GPIOD,DHT11_Pin));// wait until end signal
	}
	return buffer ;
 3c2:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <LCD_cmd>:
	_delay_ms(2);
#endif
}

void LCD_cmd( unsigned char cmd )
{
 3ca:	cf 93       	push	r28
 3cc:	c8 2f       	mov	r28, r24
	_delay_us(1);       
	MCAL_GPIO_WritePin( lcd_control_Port , en , GPIO_PIN_RESET ) ;               
	_delay_us(200);
#endif
#ifdef _4_bit_mode
	MCAL_GPIO_WritePort(lcd_Data_Port, (cmd & 0XF0));
 3ce:	68 2f       	mov	r22, r24
 3d0:	60 7f       	andi	r22, 0xF0	; 240
 3d2:	89 e3       	ldi	r24, 0x39	; 57
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(lcd_control_Port,rs,GPIO_PIN_RESET);            // rs=0 i.e select command reg
 3da:	40 e0       	ldi	r20, 0x00	; 0
 3dc:	62 e0       	ldi	r22, 0x02	; 2
 3de:	86 e3       	ldi	r24, 0x36	; 54
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,RW,GPIO_PIN_RESET);					 // R/W=0 i.e MODE Write
 3e6:	40 e0       	ldi	r20, 0x00	; 0
 3e8:	68 e0       	ldi	r22, 0x08	; 8
 3ea:	86 e3       	ldi	r24, 0x36	; 54
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_SET);					// give high pulse to enable pin
 3f2:	41 e0       	ldi	r20, 0x01	; 1
 3f4:	64 e0       	ldi	r22, 0x04	; 4
 3f6:	86 e3       	ldi	r24, 0x36	; 54
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <MCAL_GPIO_WritePin>
 3fe:	85 e0       	ldi	r24, 0x05	; 5
 400:	8a 95       	dec	r24
 402:	f1 f7       	brne	.-4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 404:	00 00       	nop
	_delay_us(1);
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_RESET);				 // give low pulse to enable pin
 406:	40 e0       	ldi	r20, 0x00	; 0
 408:	64 e0       	ldi	r22, 0x04	; 4
 40a:	86 e3       	ldi	r24, 0x36	; 54
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <MCAL_GPIO_WritePin>
 412:	8f e1       	ldi	r24, 0x1F	; 31
 414:	93 e0       	ldi	r25, 0x03	; 3
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
	_delay_us(200);
	MCAL_GPIO_WritePort(lcd_Data_Port, ( cmd & 0X0F) << 4);               //sending lower nibble of 8 bit 
 41e:	90 e1       	ldi	r25, 0x10	; 16
 420:	c9 9f       	mul	r28, r25
 422:	b0 01       	movw	r22, r0
 424:	11 24       	eor	r1, r1
 426:	89 e3       	ldi	r24, 0x39	; 57
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(lcd_control_Port,rs,GPIO_PIN_RESET);            // rs=0 i.e select command reg
 42e:	40 e0       	ldi	r20, 0x00	; 0
 430:	62 e0       	ldi	r22, 0x02	; 2
 432:	86 e3       	ldi	r24, 0x36	; 54
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,RW,GPIO_PIN_RESET);					 // R/W=0 i.e MODE Write
 43a:	40 e0       	ldi	r20, 0x00	; 0
 43c:	68 e0       	ldi	r22, 0x08	; 8
 43e:	86 e3       	ldi	r24, 0x36	; 54
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_SET);					// give high pulse to enable pin
 446:	41 e0       	ldi	r20, 0x01	; 1
 448:	64 e0       	ldi	r22, 0x04	; 4
 44a:	86 e3       	ldi	r24, 0x36	; 54
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <MCAL_GPIO_WritePin>
 452:	85 e0       	ldi	r24, 0x05	; 5
 454:	8a 95       	dec	r24
 456:	f1 f7       	brne	.-4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 458:	00 00       	nop
	_delay_us(1);
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_RESET);				 // give low pulse to enable pin
 45a:	40 e0       	ldi	r20, 0x00	; 0
 45c:	64 e0       	ldi	r22, 0x04	; 4
 45e:	86 e3       	ldi	r24, 0x36	; 54
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <MCAL_GPIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 466:	8f e3       	ldi	r24, 0x3F	; 63
 468:	9f e1       	ldi	r25, 0x1F	; 31
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 470:	00 00       	nop
	_delay_ms(2);
#endif
}
 472:	cf 91       	pop	r28
 474:	08 95       	ret

00000476 <LCD_init>:
#include "LCD.h"

#define _4_bit_mode

void LCD_init(void)
{
 476:	ef 92       	push	r14
 478:	ff 92       	push	r15
 47a:	0f 93       	push	r16
 47c:	1f 93       	push	r17
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	00 d0       	rcall	.+0      	; 0x484 <LCD_init+0xe>
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
	GPIO_Pinconfig_t config ;
		
	// set port lcd_data as output
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 488:	13 e0       	ldi	r17, 0x03	; 3
 48a:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_0 ;
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
 490:	be 01       	movw	r22, r28
 492:	6f 5f       	subi	r22, 0xFF	; 255
 494:	7f 4f       	sbci	r23, 0xFF	; 255
 496:	89 e3       	ldi	r24, 0x39	; 57
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
		
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 49e:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_1 ;
 4a0:	68 94       	set
 4a2:	ff 24       	eor	r15, r15
 4a4:	f1 f8       	bld	r15, 1
 4a6:	f9 82       	std	Y+1, r15	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
 4a8:	be 01       	movw	r22, r28
 4aa:	6f 5f       	subi	r22, 0xFF	; 255
 4ac:	7f 4f       	sbci	r23, 0xFF	; 255
 4ae:	89 e3       	ldi	r24, 0x39	; 57
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
				
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 4b6:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_2 ;
 4b8:	68 94       	set
 4ba:	ee 24       	eor	r14, r14
 4bc:	e2 f8       	bld	r14, 2
 4be:	e9 82       	std	Y+1, r14	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
 4c0:	be 01       	movw	r22, r28
 4c2:	6f 5f       	subi	r22, 0xFF	; 255
 4c4:	7f 4f       	sbci	r23, 0xFF	; 255
 4c6:	89 e3       	ldi	r24, 0x39	; 57
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
						
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 4ce:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_3 ;
 4d0:	08 e0       	ldi	r16, 0x08	; 8
 4d2:	09 83       	std	Y+1, r16	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
 4d4:	be 01       	movw	r22, r28
 4d6:	6f 5f       	subi	r22, 0xFF	; 255
 4d8:	7f 4f       	sbci	r23, 0xFF	; 255
 4da:	89 e3       	ldi	r24, 0x39	; 57
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
								
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 4e2:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_4 ;
 4e4:	80 e1       	ldi	r24, 0x10	; 16
 4e6:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
 4e8:	be 01       	movw	r22, r28
 4ea:	6f 5f       	subi	r22, 0xFF	; 255
 4ec:	7f 4f       	sbci	r23, 0xFF	; 255
 4ee:	89 e3       	ldi	r24, 0x39	; 57
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
										
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 4f6:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_5 ;
 4f8:	80 e2       	ldi	r24, 0x20	; 32
 4fa:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
 4fc:	be 01       	movw	r22, r28
 4fe:	6f 5f       	subi	r22, 0xFF	; 255
 500:	7f 4f       	sbci	r23, 0xFF	; 255
 502:	89 e3       	ldi	r24, 0x39	; 57
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
												
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 50a:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_6 ;
 50c:	80 e4       	ldi	r24, 0x40	; 64
 50e:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
 510:	be 01       	movw	r22, r28
 512:	6f 5f       	subi	r22, 0xFF	; 255
 514:	7f 4f       	sbci	r23, 0xFF	; 255
 516:	89 e3       	ldi	r24, 0x39	; 57
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
														
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 51e:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_7 ;
 520:	80 e8       	ldi	r24, 0x80	; 128
 522:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
 524:	be 01       	movw	r22, r28
 526:	6f 5f       	subi	r22, 0xFF	; 255
 528:	7f 4f       	sbci	r23, 0xFF	; 255
 52a:	89 e3       	ldi	r24, 0x39	; 57
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
	
	// set en rs rw as outpit
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 532:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = en ;
 534:	e9 82       	std	Y+1, r14	; 0x01
	MCAL_GPIO_Init( lcd_control_Direction , & config ) ;
 536:	be 01       	movw	r22, r28
 538:	6f 5f       	subi	r22, 0xFF	; 255
 53a:	7f 4f       	sbci	r23, 0xFF	; 255
 53c:	86 e3       	ldi	r24, 0x36	; 54
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
	
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 544:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = rs ;
 546:	f9 82       	std	Y+1, r15	; 0x01
	MCAL_GPIO_Init( lcd_control_Direction , & config ) ;
 548:	be 01       	movw	r22, r28
 54a:	6f 5f       	subi	r22, 0xFF	; 255
 54c:	7f 4f       	sbci	r23, 0xFF	; 255
 54e:	86 e3       	ldi	r24, 0x36	; 54
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
	
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 556:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = RW ;
 558:	09 83       	std	Y+1, r16	; 0x01
	MCAL_GPIO_Init( lcd_control_Direction , & config ) ;
 55a:	be 01       	movw	r22, r28
 55c:	6f 5f       	subi	r22, 0xFF	; 255
 55e:	7f 4f       	sbci	r23, 0xFF	; 255
 560:	86 e3       	ldi	r24, 0x36	; 54
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	0e 94 be 00 	call	0x17c	; 0x17c <MCAL_GPIO_Init>
 568:	2f ef       	ldi	r18, 0xFF	; 255
 56a:	89 ef       	ldi	r24, 0xF9	; 249
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	21 50       	subi	r18, 0x01	; 1
 570:	80 40       	sbci	r24, 0x00	; 0
 572:	90 40       	sbci	r25, 0x00	; 0
 574:	e1 f7       	brne	.-8      	; 0x56e <LCD_init+0xf8>
 576:	00 c0       	rjmp	.+0      	; 0x578 <LCD_init+0x102>
 578:	00 00       	nop
	LCD_cmd(Entry_Mode);                        // take cursor to next position "shift cursor to right"
	LCD_cmd(Clear_Display);                    // Clear display screen
	_delay_ms(2);
#endif
#ifdef _4_bit_mode
	LCD_cmd(0x02);                // send for 4 bit initialization of LCD "shift cursor to left"
 57a:	82 e0       	ldi	r24, 0x02	; 2
 57c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_cmd>
	LCD_cmd(_2L_4b);                              // 2 line 5*7 matrix in 4-bit mode
 580:	88 e2       	ldi	r24, 0x28	; 40
 582:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_cmd>
	LCD_cmd(Entry_Mode);                        // take cursor to next position "shift cursor to right"
 586:	86 e0       	ldi	r24, 0x06	; 6
 588:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_cmd>
	LCD_cmd(beginning_of_the_first_line);
 58c:	80 e8       	ldi	r24, 0x80	; 128
 58e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_cmd>
	LCD_cmd(Display_on_Cursor_off);              // Display on cursor off
 592:	8c e0       	ldi	r24, 0x0C	; 12
 594:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_cmd>
	LCD_cmd(Clear_Display);                    // Clear display screen
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_cmd>
 59e:	8f e3       	ldi	r24, 0x3F	; 63
 5a0:	9f e1       	ldi	r25, 0x1F	; 31
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <LCD_init+0x12c>
 5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <LCD_init+0x132>
 5a8:	00 00       	nop
	_delay_ms(2);
#endif
}
 5aa:	0f 90       	pop	r0
 5ac:	0f 90       	pop	r0
 5ae:	df 91       	pop	r29
 5b0:	cf 91       	pop	r28
 5b2:	1f 91       	pop	r17
 5b4:	0f 91       	pop	r16
 5b6:	ff 90       	pop	r15
 5b8:	ef 90       	pop	r14
 5ba:	08 95       	ret

000005bc <lcd_Clear>:
#endif
}

void lcd_Clear()
{
	LCD_cmd (0x01);                   // send hex 01 to Clear display
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_cmd>
 5c2:	8f e3       	ldi	r24, 0x3F	; 63
 5c4:	9f e1       	ldi	r25, 0x1F	; 31
 5c6:	01 97       	sbiw	r24, 0x01	; 1
 5c8:	f1 f7       	brne	.-4      	; 0x5c6 <lcd_Clear+0xa>
 5ca:	00 c0       	rjmp	.+0      	; 0x5cc <lcd_Clear+0x10>
 5cc:	00 00       	nop
	_delay_ms(2);
	LCD_cmd(0x80);                   // send hex 80 to Force Cursor to beginning of 1st line
 5ce:	80 e8       	ldi	r24, 0x80	; 128
 5d0:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_cmd>
 5d4:	08 95       	ret

000005d6 <GOTO_XY>:
}

void GOTO_XY(unsigned char line , unsigned char posision)
{
	if (line==0)
 5d6:	81 11       	cpse	r24, r1
 5d8:	07 c0       	rjmp	.+14     	; 0x5e8 <GOTO_XY+0x12>
	{
		if(posision>=0 && posision<16)
 5da:	60 31       	cpi	r22, 0x10	; 16
 5dc:	68 f4       	brcc	.+26     	; 0x5f8 <GOTO_XY+0x22>
			LCD_cmd(0X80+posision);
 5de:	80 e8       	ldi	r24, 0x80	; 128
 5e0:	86 0f       	add	r24, r22
 5e2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_cmd>
 5e6:	08 95       	ret
	}
	else if (line==1)
 5e8:	81 30       	cpi	r24, 0x01	; 1
 5ea:	31 f4       	brne	.+12     	; 0x5f8 <GOTO_XY+0x22>
	{
		if(posision>=0 && posision<16)
 5ec:	60 31       	cpi	r22, 0x10	; 16
 5ee:	20 f4       	brcc	.+8      	; 0x5f8 <GOTO_XY+0x22>
			LCD_cmd(0XC0+posision);
 5f0:	80 ec       	ldi	r24, 0xC0	; 192
 5f2:	86 0f       	add	r24, r22
 5f4:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_cmd>
 5f8:	08 95       	ret

000005fa <LCD_Character>:
	}
}

void LCD_Character( unsigned char character )
{
 5fa:	cf 93       	push	r28
 5fc:	c8 2f       	mov	r28, r24
	_delay_us(1);
	MCAL_GPIO_WritePin( lcd_control_Port , en , GPIO_PIN_RESET ) ;
	_delay_ms(2);
#endif
#ifdef _4_bit_mode
	MCAL_GPIO_WritePort(lcd_Data_Port, (character & 0XF0));
 5fe:	68 2f       	mov	r22, r24
 600:	60 7f       	andi	r22, 0xF0	; 240
 602:	89 e3       	ldi	r24, 0x39	; 57
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(lcd_control_Port,rs,GPIO_PIN_SET);            // rs=0 i.e select DATA reg
 60a:	41 e0       	ldi	r20, 0x01	; 1
 60c:	62 e0       	ldi	r22, 0x02	; 2
 60e:	86 e3       	ldi	r24, 0x36	; 54
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,RW,GPIO_PIN_RESET);					 // R/W=0 i.e MODE Write
 616:	40 e0       	ldi	r20, 0x00	; 0
 618:	68 e0       	ldi	r22, 0x08	; 8
 61a:	86 e3       	ldi	r24, 0x36	; 54
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_SET);					// give high pulse to enable pin
 622:	41 e0       	ldi	r20, 0x01	; 1
 624:	64 e0       	ldi	r22, 0x04	; 4
 626:	86 e3       	ldi	r24, 0x36	; 54
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <MCAL_GPIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 62e:	85 e0       	ldi	r24, 0x05	; 5
 630:	8a 95       	dec	r24
 632:	f1 f7       	brne	.-4      	; 0x630 <LCD_Character+0x36>
 634:	00 00       	nop
	_delay_us(1);
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_RESET);				 // give low pulse to enable pin
 636:	40 e0       	ldi	r20, 0x00	; 0
 638:	64 e0       	ldi	r22, 0x04	; 4
 63a:	86 e3       	ldi	r24, 0x36	; 54
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <MCAL_GPIO_WritePin>
 642:	8f e1       	ldi	r24, 0x1F	; 31
 644:	93 e0       	ldi	r25, 0x03	; 3
 646:	01 97       	sbiw	r24, 0x01	; 1
 648:	f1 f7       	brne	.-4      	; 0x646 <LCD_Character+0x4c>
 64a:	00 c0       	rjmp	.+0      	; 0x64c <LCD_Character+0x52>
 64c:	00 00       	nop
	_delay_us(200);
	MCAL_GPIO_WritePort(lcd_Data_Port, ( character & 0X0F) << 4);               //sending lower nibble of 8 bit i.e 1byte
 64e:	90 e1       	ldi	r25, 0x10	; 16
 650:	c9 9f       	mul	r28, r25
 652:	b0 01       	movw	r22, r0
 654:	11 24       	eor	r1, r1
 656:	89 e3       	ldi	r24, 0x39	; 57
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(lcd_control_Port,rs,GPIO_PIN_SET);            // rs=0 i.e select DATA reg
 65e:	41 e0       	ldi	r20, 0x01	; 1
 660:	62 e0       	ldi	r22, 0x02	; 2
 662:	86 e3       	ldi	r24, 0x36	; 54
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,RW,GPIO_PIN_RESET);					 // R/W=0 i.e MODE Write
 66a:	40 e0       	ldi	r20, 0x00	; 0
 66c:	68 e0       	ldi	r22, 0x08	; 8
 66e:	86 e3       	ldi	r24, 0x36	; 54
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_SET);					// give high pulse to enable pin
 676:	41 e0       	ldi	r20, 0x01	; 1
 678:	64 e0       	ldi	r22, 0x04	; 4
 67a:	86 e3       	ldi	r24, 0x36	; 54
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <MCAL_GPIO_WritePin>
 682:	85 e0       	ldi	r24, 0x05	; 5
 684:	8a 95       	dec	r24
 686:	f1 f7       	brne	.-4      	; 0x684 <LCD_Character+0x8a>
 688:	00 00       	nop
	_delay_us(1);
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_RESET);				 // give low pulse to enable pin
 68a:	40 e0       	ldi	r20, 0x00	; 0
 68c:	64 e0       	ldi	r22, 0x04	; 4
 68e:	86 e3       	ldi	r24, 0x36	; 54
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <MCAL_GPIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 696:	8f e3       	ldi	r24, 0x3F	; 63
 698:	9f e1       	ldi	r25, 0x1F	; 31
 69a:	01 97       	sbiw	r24, 0x01	; 1
 69c:	f1 f7       	brne	.-4      	; 0x69a <LCD_Character+0xa0>
 69e:	00 c0       	rjmp	.+0      	; 0x6a0 <LCD_Character+0xa6>
 6a0:	00 00       	nop
	_delay_ms(2);
#endif
}
 6a2:	cf 91       	pop	r28
 6a4:	08 95       	ret

000006a6 <LCD_String>:

void LCD_String (char *string)
{
 6a6:	0f 93       	push	r16
 6a8:	1f 93       	push	r17
 6aa:	cf 93       	push	r28
 6ac:	df 93       	push	r29
 6ae:	8c 01       	movw	r16, r24
	int count=0;
 6b0:	c0 e0       	ldi	r28, 0x00	; 0
 6b2:	d0 e0       	ldi	r29, 0x00	; 0
	while(*string)
 6b4:	21 c0       	rjmp	.+66     	; 0x6f8 <LCD_String+0x52>
	{
		count++;
 6b6:	21 96       	adiw	r28, 0x01	; 1
		LCD_Character(*string++);
 6b8:	0f 5f       	subi	r16, 0xFF	; 255
 6ba:	1f 4f       	sbci	r17, 0xFF	; 255
 6bc:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LCD_Character>
		if (count==16)
 6c0:	c0 31       	cpi	r28, 0x10	; 16
 6c2:	d1 05       	cpc	r29, r1
 6c4:	29 f4       	brne	.+10     	; 0x6d0 <LCD_String+0x2a>
		{
			GOTO_XY(1,0);
 6c6:	60 e0       	ldi	r22, 0x00	; 0
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <GOTO_XY>
 6ce:	14 c0       	rjmp	.+40     	; 0x6f8 <LCD_String+0x52>
		}
		else if(count==32)
 6d0:	c0 32       	cpi	r28, 0x20	; 32
 6d2:	d1 05       	cpc	r29, r1
 6d4:	89 f4       	brne	.+34     	; 0x6f8 <LCD_String+0x52>
 6d6:	2f ef       	ldi	r18, 0xFF	; 255
 6d8:	89 e6       	ldi	r24, 0x69	; 105
 6da:	98 e1       	ldi	r25, 0x18	; 24
 6dc:	21 50       	subi	r18, 0x01	; 1
 6de:	80 40       	sbci	r24, 0x00	; 0
 6e0:	90 40       	sbci	r25, 0x00	; 0
 6e2:	e1 f7       	brne	.-8      	; 0x6dc <LCD_String+0x36>
 6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <LCD_String+0x40>
 6e6:	00 00       	nop
		{
			_delay_ms(500);
			lcd_Clear();
 6e8:	0e 94 de 02 	call	0x5bc	; 0x5bc <lcd_Clear>
			GOTO_XY(0,0);
 6ec:	60 e0       	ldi	r22, 0x00	; 0
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <GOTO_XY>
			count=0;
 6f4:	c0 e0       	ldi	r28, 0x00	; 0
 6f6:	d0 e0       	ldi	r29, 0x00	; 0
}

void LCD_String (char *string)
{
	int count=0;
	while(*string)
 6f8:	f8 01       	movw	r30, r16
 6fa:	80 81       	ld	r24, Z
 6fc:	81 11       	cpse	r24, r1
 6fe:	db cf       	rjmp	.-74     	; 0x6b6 <LCD_String+0x10>
			lcd_Clear();
			GOTO_XY(0,0);
			count=0;
		}
	}
 700:	df 91       	pop	r29
 702:	cf 91       	pop	r28
 704:	1f 91       	pop	r17
 706:	0f 91       	pop	r16
 708:	08 95       	ret

0000070a <main>:

uint8_t int_RH,frac_RH,int_Temp,frac_Temp,Check_sum;
char data[10];
int main(void)
{
	LCD_init() ;
 70a:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 70e:	87 ec       	ldi	r24, 0xC7	; 199
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	01 97       	sbiw	r24, 0x01	; 1
 714:	f1 f7       	brne	.-4      	; 0x712 <main+0x8>
 716:	00 c0       	rjmp	.+0      	; 0x718 <main+0xe>
 718:	00 00       	nop
	_delay_us(50);
	lcd_Clear();
 71a:	0e 94 de 02 	call	0x5bc	; 0x5bc <lcd_Clear>
	LCD_String("Hum  =");
 71e:	80 e6       	ldi	r24, 0x60	; 96
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_String>
	GOTO_XY(1,0);
 726:	60 e0       	ldi	r22, 0x00	; 0
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <GOTO_XY>
	LCD_String("Temp =");
 72e:	87 e6       	ldi	r24, 0x67	; 103
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_String>
    while (1) 
    {
		Request();					// send Request pulse 
 736:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Request>
		Response();					// receive response 
 73a:	0e 94 94 01 	call	0x328	; 0x328 <Response>
		int_RH=Receive_data();		// receive int part from RH 
 73e:	0e 94 b5 01 	call	0x36a	; 0x36a <Receive_data>
 742:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <int_RH>
		frac_RH=Receive_data();		// receive fraction part from RH 
 746:	0e 94 b5 01 	call	0x36a	; 0x36a <Receive_data>
 74a:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <frac_RH>
		int_Temp=Receive_data();	// receive int part from RH 
 74e:	0e 94 b5 01 	call	0x36a	; 0x36a <Receive_data>
 752:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <int_Temp>
		frac_Temp=Receive_data();	// receive fraction part from RH 
 756:	0e 94 b5 01 	call	0x36a	; 0x36a <Receive_data>
 75a:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <frac_Temp>
		Check_sum=Receive_data();   // receive  check_sum 
 75e:	0e 94 b5 01 	call	0x36a	; 0x36a <Receive_data>
 762:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <Check_sum>
		if ((int_RH + frac_RH + int_Temp + frac_Temp) != Check_sum)
 766:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <int_RH>
 76a:	20 91 8c 00 	lds	r18, 0x008C	; 0x80008c <frac_RH>
 76e:	30 e0       	ldi	r19, 0x00	; 0
 770:	29 0f       	add	r18, r25
 772:	31 1d       	adc	r19, r1
 774:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <int_Temp>
 778:	29 0f       	add	r18, r25
 77a:	31 1d       	adc	r19, r1
 77c:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <frac_Temp>
 780:	29 0f       	add	r18, r25
 782:	31 1d       	adc	r19, r1
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	28 17       	cp	r18, r24
 788:	39 07       	cpc	r19, r25
 78a:	81 f0       	breq	.+32     	; 0x7ac <main+0xa2>
		{
			LCD_String("Error");
 78c:	8e e6       	ldi	r24, 0x6E	; 110
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 794:	9f ef       	ldi	r25, 0xFF	; 255
 796:	23 ed       	ldi	r18, 0xD3	; 211
 798:	80 e3       	ldi	r24, 0x30	; 48
 79a:	91 50       	subi	r25, 0x01	; 1
 79c:	20 40       	sbci	r18, 0x00	; 0
 79e:	80 40       	sbci	r24, 0x00	; 0
 7a0:	e1 f7       	brne	.-8      	; 0x79a <main+0x90>
 7a2:	00 c0       	rjmp	.+0      	; 0x7a4 <main+0x9a>
 7a4:	00 00       	nop
			_delay_ms(1000);
			lcd_Clear();
 7a6:	0e 94 de 02 	call	0x5bc	; 0x5bc <lcd_Clear>
 7aa:	c5 cf       	rjmp	.-118    	; 0x736 <main+0x2c>
		}
		else
		{
			GOTO_XY(0,8);
 7ac:	68 e0       	ldi	r22, 0x08	; 8
 7ae:	80 e0       	ldi	r24, 0x00	; 0
 7b0:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <GOTO_XY>
			itoa(int_RH,data,10);
 7b4:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <int_RH>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 7b8:	4a e0       	ldi	r20, 0x0A	; 10
 7ba:	6f e8       	ldi	r22, 0x8F	; 143
 7bc:	70 e0       	ldi	r23, 0x00	; 0
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	0e 94 1f 04 	call	0x83e	; 0x83e <__itoa_ncheck>
			LCD_String(data);
 7c4:	8f e8       	ldi	r24, 0x8F	; 143
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_String>
			LCD_String(".");
 7cc:	84 e7       	ldi	r24, 0x74	; 116
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_String>
			itoa(frac_RH,data,11);
 7d4:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <frac_RH>
 7d8:	4b e0       	ldi	r20, 0x0B	; 11
 7da:	6f e8       	ldi	r22, 0x8F	; 143
 7dc:	70 e0       	ldi	r23, 0x00	; 0
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	0e 94 1f 04 	call	0x83e	; 0x83e <__itoa_ncheck>
			LCD_String(data);
 7e4:	8f e8       	ldi	r24, 0x8F	; 143
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_String>
			LCD_String(" %");
 7ec:	86 e7       	ldi	r24, 0x76	; 118
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_String>
			
			GOTO_XY(1,8);
 7f4:	68 e0       	ldi	r22, 0x08	; 8
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <GOTO_XY>
			itoa(int_Temp,data,10);
 7fc:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <int_Temp>
 800:	4a e0       	ldi	r20, 0x0A	; 10
 802:	6f e8       	ldi	r22, 0x8F	; 143
 804:	70 e0       	ldi	r23, 0x00	; 0
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	0e 94 1f 04 	call	0x83e	; 0x83e <__itoa_ncheck>
			LCD_String(data);
 80c:	8f e8       	ldi	r24, 0x8F	; 143
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_String>
			LCD_String(".");
 814:	84 e7       	ldi	r24, 0x74	; 116
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_String>
			itoa(frac_Temp,data,10);
 81c:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <frac_Temp>
 820:	4a e0       	ldi	r20, 0x0A	; 10
 822:	6f e8       	ldi	r22, 0x8F	; 143
 824:	70 e0       	ldi	r23, 0x00	; 0
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	0e 94 1f 04 	call	0x83e	; 0x83e <__itoa_ncheck>
			LCD_String(data);
 82c:	8f e8       	ldi	r24, 0x8F	; 143
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_String>
			LCD_String(" C");
 834:	89 e7       	ldi	r24, 0x79	; 121
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_String>
 83c:	7c cf       	rjmp	.-264    	; 0x736 <main+0x2c>

0000083e <__itoa_ncheck>:
 83e:	bb 27       	eor	r27, r27
 840:	4a 30       	cpi	r20, 0x0A	; 10
 842:	31 f4       	brne	.+12     	; 0x850 <__itoa_ncheck+0x12>
 844:	99 23       	and	r25, r25
 846:	22 f4       	brpl	.+8      	; 0x850 <__itoa_ncheck+0x12>
 848:	bd e2       	ldi	r27, 0x2D	; 45
 84a:	90 95       	com	r25
 84c:	81 95       	neg	r24
 84e:	9f 4f       	sbci	r25, 0xFF	; 255
 850:	0c 94 2b 04 	jmp	0x856	; 0x856 <__utoa_common>

00000854 <__utoa_ncheck>:
 854:	bb 27       	eor	r27, r27

00000856 <__utoa_common>:
 856:	fb 01       	movw	r30, r22
 858:	55 27       	eor	r21, r21
 85a:	aa 27       	eor	r26, r26
 85c:	88 0f       	add	r24, r24
 85e:	99 1f       	adc	r25, r25
 860:	aa 1f       	adc	r26, r26
 862:	a4 17       	cp	r26, r20
 864:	10 f0       	brcs	.+4      	; 0x86a <__stack+0xb>
 866:	a4 1b       	sub	r26, r20
 868:	83 95       	inc	r24
 86a:	50 51       	subi	r21, 0x10	; 16
 86c:	b9 f7       	brne	.-18     	; 0x85c <__utoa_common+0x6>
 86e:	a0 5d       	subi	r26, 0xD0	; 208
 870:	aa 33       	cpi	r26, 0x3A	; 58
 872:	08 f0       	brcs	.+2      	; 0x876 <__stack+0x17>
 874:	a9 5d       	subi	r26, 0xD9	; 217
 876:	a1 93       	st	Z+, r26
 878:	00 97       	sbiw	r24, 0x00	; 0
 87a:	79 f7       	brne	.-34     	; 0x85a <__utoa_common+0x4>
 87c:	b1 11       	cpse	r27, r1
 87e:	b1 93       	st	Z+, r27
 880:	11 92       	st	Z+, r1
 882:	cb 01       	movw	r24, r22
 884:	0c 94 44 04 	jmp	0x888	; 0x888 <strrev>

00000888 <strrev>:
 888:	dc 01       	movw	r26, r24
 88a:	fc 01       	movw	r30, r24
 88c:	67 2f       	mov	r22, r23
 88e:	71 91       	ld	r23, Z+
 890:	77 23       	and	r23, r23
 892:	e1 f7       	brne	.-8      	; 0x88c <strrev+0x4>
 894:	32 97       	sbiw	r30, 0x02	; 2
 896:	04 c0       	rjmp	.+8      	; 0x8a0 <strrev+0x18>
 898:	7c 91       	ld	r23, X
 89a:	6d 93       	st	X+, r22
 89c:	70 83       	st	Z, r23
 89e:	62 91       	ld	r22, -Z
 8a0:	ae 17       	cp	r26, r30
 8a2:	bf 07       	cpc	r27, r31
 8a4:	c8 f3       	brcs	.-14     	; 0x898 <strrev+0x10>
 8a6:	08 95       	ret

000008a8 <_exit>:
 8a8:	f8 94       	cli

000008aa <__stop_program>:
 8aa:	ff cf       	rjmp	.-2      	; 0x8aa <__stop_program>
