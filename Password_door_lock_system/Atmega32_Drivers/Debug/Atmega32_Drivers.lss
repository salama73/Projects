
Atmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001672  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  00800060  00001672  00001706  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800114  00800114  000017ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c65  00000000  00000000  00001b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015c6  00000000  00000000  000057fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000023d7  00000000  00000000  00006dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b14  00000000  00000000  0000919c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ec8  00000000  00000000  00009cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002211  00000000  00000000  0000ab78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  0000cd89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
       8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_2>
       c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 ef 02 	jmp	0x5de	; 0x5de <__vector_7>
      20:	0c 94 19 03 	jmp	0x632	; 0x632 <__vector_8>
      24:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__vector_9>
      28:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__vector_10>
      2c:	0c 94 97 03 	jmp	0x72e	; 0x72e <__vector_11>
      30:	0c 94 43 03 	jmp	0x686	; 0x686 <__vector_12>
      34:	0c 94 c1 03 	jmp	0x782	; 0x782 <__vector_13>
      38:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__vector_14>
      3c:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__vector_15>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 14 02 	jmp	0x428	; 0x428 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	41 01       	movw	r8, r2
      56:	46 01       	movw	r8, r12
      58:	4c 01       	movw	r8, r24
      5a:	64 01       	movw	r12, r8
      5c:	52 01       	movw	r10, r4
      5e:	58 01       	movw	r10, r16
      60:	70 01       	movw	r14, r0
      62:	5e 01       	movw	r10, r28
      64:	76 01       	movw	r14, r12
      66:	6a 01       	movw	r12, r20

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf e5       	ldi	r28, 0x5F	; 95
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e6       	ldi	r26, 0x60	; 96
      78:	b0 e0       	ldi	r27, 0x00	; 0
      7a:	e2 e7       	ldi	r30, 0x72	; 114
      7c:	f6 e1       	ldi	r31, 0x16	; 22
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 31       	cpi	r26, 0x14	; 20
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a4 e1       	ldi	r26, 0x14	; 20
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 32       	cpi	r26, 0x2D	; 45
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <main>
      9e:	0c 94 37 0b 	jmp	0x166e	; 0x166e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:
 */


void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	2f 93       	push	r18
      b2:	3f 93       	push	r19
      b4:	4f 93       	push	r20
      b6:	5f 93       	push	r21
      b8:	6f 93       	push	r22
      ba:	7f 93       	push	r23
      bc:	8f 93       	push	r24
      be:	9f 93       	push	r25
      c0:	af 93       	push	r26
      c2:	bf 93       	push	r27
      c4:	ef 93       	push	r30
      c6:	ff 93       	push	r31
	//Call function
	GP_IRQ_CALL[0]();
      c8:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <GP_IRQ_CALL>
      cc:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <GP_IRQ_CALL+0x1>
      d0:	09 95       	icall
}
      d2:	ff 91       	pop	r31
      d4:	ef 91       	pop	r30
      d6:	bf 91       	pop	r27
      d8:	af 91       	pop	r26
      da:	9f 91       	pop	r25
      dc:	8f 91       	pop	r24
      de:	7f 91       	pop	r23
      e0:	6f 91       	pop	r22
      e2:	5f 91       	pop	r21
      e4:	4f 91       	pop	r20
      e6:	3f 91       	pop	r19
      e8:	2f 91       	pop	r18
      ea:	0f 90       	pop	r0
      ec:	0f be       	out	0x3f, r0	; 63
      ee:	0f 90       	pop	r0
      f0:	1f 90       	pop	r1
      f2:	18 95       	reti

000000f4 <__vector_2>:


void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
      f4:	1f 92       	push	r1
      f6:	0f 92       	push	r0
      f8:	0f b6       	in	r0, 0x3f	; 63
      fa:	0f 92       	push	r0
      fc:	11 24       	eor	r1, r1
      fe:	2f 93       	push	r18
     100:	3f 93       	push	r19
     102:	4f 93       	push	r20
     104:	5f 93       	push	r21
     106:	6f 93       	push	r22
     108:	7f 93       	push	r23
     10a:	8f 93       	push	r24
     10c:	9f 93       	push	r25
     10e:	af 93       	push	r26
     110:	bf 93       	push	r27
     112:	ef 93       	push	r30
     114:	ff 93       	push	r31
	//Call function
	GP_IRQ_CALL[1]();
     116:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <GP_IRQ_CALL+0x2>
     11a:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <GP_IRQ_CALL+0x3>
     11e:	09 95       	icall
}
     120:	ff 91       	pop	r31
     122:	ef 91       	pop	r30
     124:	bf 91       	pop	r27
     126:	af 91       	pop	r26
     128:	9f 91       	pop	r25
     12a:	8f 91       	pop	r24
     12c:	7f 91       	pop	r23
     12e:	6f 91       	pop	r22
     130:	5f 91       	pop	r21
     132:	4f 91       	pop	r20
     134:	3f 91       	pop	r19
     136:	2f 91       	pop	r18
     138:	0f 90       	pop	r0
     13a:	0f be       	out	0x3f, r0	; 63
     13c:	0f 90       	pop	r0
     13e:	1f 90       	pop	r1
     140:	18 95       	reti

00000142 <__vector_3>:


void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
     142:	1f 92       	push	r1
     144:	0f 92       	push	r0
     146:	0f b6       	in	r0, 0x3f	; 63
     148:	0f 92       	push	r0
     14a:	11 24       	eor	r1, r1
     14c:	2f 93       	push	r18
     14e:	3f 93       	push	r19
     150:	4f 93       	push	r20
     152:	5f 93       	push	r21
     154:	6f 93       	push	r22
     156:	7f 93       	push	r23
     158:	8f 93       	push	r24
     15a:	9f 93       	push	r25
     15c:	af 93       	push	r26
     15e:	bf 93       	push	r27
     160:	ef 93       	push	r30
     162:	ff 93       	push	r31
	//Call function
	GP_IRQ_CALL[2]();
     164:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <GP_IRQ_CALL+0x4>
     168:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <GP_IRQ_CALL+0x5>
     16c:	09 95       	icall
}
     16e:	ff 91       	pop	r31
     170:	ef 91       	pop	r30
     172:	bf 91       	pop	r27
     174:	af 91       	pop	r26
     176:	9f 91       	pop	r25
     178:	8f 91       	pop	r24
     17a:	7f 91       	pop	r23
     17c:	6f 91       	pop	r22
     17e:	5f 91       	pop	r21
     180:	4f 91       	pop	r20
     182:	3f 91       	pop	r19
     184:	2f 91       	pop	r18
     186:	0f 90       	pop	r0
     188:	0f be       	out	0x3f, r0	; 63
     18a:	0f 90       	pop	r0
     18c:	1f 90       	pop	r1
     18e:	18 95       	reti

00000190 <MCAL_GPIO_Init>:
	{
		return GPIO_PIN_SET;
	}
	
	return GPIO_PIN_RESET;
}
     190:	fc 01       	movw	r30, r24
     192:	db 01       	movw	r26, r22
     194:	11 96       	adiw	r26, 0x01	; 1
     196:	8c 91       	ld	r24, X
     198:	11 97       	sbiw	r26, 0x01	; 1
     19a:	81 30       	cpi	r24, 0x01	; 1
     19c:	59 f4       	brne	.+22     	; 0x1b4 <MCAL_GPIO_Init+0x24>
     19e:	8c 91       	ld	r24, X
     1a0:	80 95       	com	r24
     1a2:	91 81       	ldd	r25, Z+1	; 0x01
     1a4:	89 23       	and	r24, r25
     1a6:	81 83       	std	Z+1, r24	; 0x01
     1a8:	8c 91       	ld	r24, X
     1aa:	80 95       	com	r24
     1ac:	92 81       	ldd	r25, Z+2	; 0x02
     1ae:	89 23       	and	r24, r25
     1b0:	82 83       	std	Z+2, r24	; 0x02
     1b2:	08 95       	ret
     1b4:	82 30       	cpi	r24, 0x02	; 2
     1b6:	51 f4       	brne	.+20     	; 0x1cc <MCAL_GPIO_Init+0x3c>
     1b8:	8c 91       	ld	r24, X
     1ba:	80 95       	com	r24
     1bc:	91 81       	ldd	r25, Z+1	; 0x01
     1be:	89 23       	and	r24, r25
     1c0:	81 83       	std	Z+1, r24	; 0x01
     1c2:	8c 91       	ld	r24, X
     1c4:	92 81       	ldd	r25, Z+2	; 0x02
     1c6:	89 2b       	or	r24, r25
     1c8:	82 83       	std	Z+2, r24	; 0x02
     1ca:	08 95       	ret
     1cc:	8c 91       	ld	r24, X
     1ce:	91 81       	ldd	r25, Z+1	; 0x01
     1d0:	89 2b       	or	r24, r25
     1d2:	81 83       	std	Z+1, r24	; 0x01
     1d4:	8c 91       	ld	r24, X
     1d6:	80 95       	com	r24
     1d8:	92 81       	ldd	r25, Z+2	; 0x02
     1da:	89 23       	and	r24, r25
     1dc:	82 83       	std	Z+2, r24	; 0x02
     1de:	08 95       	ret

000001e0 <MCAL_GPIO_ReadPort>:
* Note				-none
*/
uint16_t MCAL_GPIO_ReadPort(GPIO_TypeDef *GPIOx )
{
	uint8_t port_value;
	port_value= (uint8_t) (GPIOx->PIN);
     1e0:	fc 01       	movw	r30, r24
     1e2:	80 81       	ld	r24, Z
	return port_value;
}
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	08 95       	ret

000001e8 <MCAL_GPIO_WritePin>:
* @retval 			-none
* Note				-none
*/
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx ,uint8_t pinNumber ,uint8_t value)
{
	if ( value == GPIO_PIN_SET )
     1e8:	41 30       	cpi	r20, 0x01	; 1
     1ea:	29 f4       	brne	.+10     	; 0x1f6 <MCAL_GPIO_WritePin+0xe>
	{
		GPIOx->PORT |= pinNumber ;
     1ec:	fc 01       	movw	r30, r24
     1ee:	22 81       	ldd	r18, Z+2	; 0x02
     1f0:	62 2b       	or	r22, r18
     1f2:	62 83       	std	Z+2, r22	; 0x02
     1f4:	08 95       	ret
	}
	else if(  value == GPIO_PIN_RESET)
     1f6:	41 11       	cpse	r20, r1
     1f8:	05 c0       	rjmp	.+10     	; 0x204 <MCAL_GPIO_WritePin+0x1c>
	{
		GPIOx->PORT &= ~( pinNumber ) ;
     1fa:	60 95       	com	r22
     1fc:	fc 01       	movw	r30, r24
     1fe:	22 81       	ldd	r18, Z+2	; 0x02
     200:	62 23       	and	r22, r18
     202:	62 83       	std	Z+2, r22	; 0x02
     204:	08 95       	ret

00000206 <MCAL_GPIO_WritePort>:
* @retval 			-none
* Note				-none
*/
void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx ,uint8_t value)
{
	GPIOx->PORT=  value;
     206:	fc 01       	movw	r30, r24
     208:	62 83       	std	Z+2, r22	; 0x02
     20a:	08 95       	ret

0000020c <MCAL_I2C_Init>:
	{
		//ERROR
	}
	// return data
	return I2C->TWDR;
}
     20c:	fc 01       	movw	r30, r24
     20e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
     212:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
     216:	80 81       	ld	r24, Z
     218:	82 b9       	out	0x02, r24	; 2
     21a:	83 81       	ldd	r24, Z+3	; 0x03
     21c:	81 b9       	out	0x01, r24	; 1
     21e:	82 81       	ldd	r24, Z+2	; 0x02
     220:	81 30       	cpi	r24, 0x01	; 1
     222:	39 f4       	brne	.+14     	; 0x232 <MCAL_I2C_Init+0x26>
     224:	96 b7       	in	r25, 0x36	; 54
     226:	89 2b       	or	r24, r25
     228:	86 bf       	out	0x36, r24	; 54
     22a:	8f b7       	in	r24, 0x3f	; 63
     22c:	80 68       	ori	r24, 0x80	; 128
     22e:	8f bf       	out	0x3f, r24	; 63
     230:	06 c0       	rjmp	.+12     	; 0x23e <MCAL_I2C_Init+0x32>
     232:	96 b7       	in	r25, 0x36	; 54
     234:	89 23       	and	r24, r25
     236:	86 bf       	out	0x36, r24	; 54
     238:	8f b7       	in	r24, 0x3f	; 63
     23a:	8f 77       	andi	r24, 0x7F	; 127
     23c:	8f bf       	out	0x3f, r24	; 63
     23e:	21 81       	ldd	r18, Z+1	; 0x01
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	40 e0       	ldi	r20, 0x00	; 0
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	60 e4       	ldi	r22, 0x40	; 64
     248:	72 e4       	ldi	r23, 0x42	; 66
     24a:	8f e0       	ldi	r24, 0x0F	; 15
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 0f 0b 	call	0x161e	; 0x161e <__udivmodsi4>
     252:	da 01       	movw	r26, r20
     254:	c9 01       	movw	r24, r18
     256:	40 97       	sbiw	r24, 0x10	; 16
     258:	a1 09       	sbc	r26, r1
     25a:	b1 09       	sbc	r27, r1
     25c:	b6 95       	lsr	r27
     25e:	a7 95       	ror	r26
     260:	97 95       	ror	r25
     262:	87 95       	ror	r24
     264:	80 b9       	out	0x00, r24	; 0
     266:	86 b7       	in	r24, 0x36	; 54
     268:	84 64       	ori	r24, 0x44	; 68
     26a:	86 bf       	out	0x36, r24	; 54
     26c:	08 95       	ret

0000026e <Get_flag_stutus>:
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	8a 30       	cpi	r24, 0x0A	; 10
     272:	91 05       	cpc	r25, r1
     274:	08 f0       	brcs	.+2      	; 0x278 <Get_flag_stutus+0xa>
     276:	53 c0       	rjmp	.+166    	; 0x31e <Get_flag_stutus+0xb0>
     278:	fc 01       	movw	r30, r24
     27a:	e6 5d       	subi	r30, 0xD6	; 214
     27c:	ff 4f       	sbci	r31, 0xFF	; 255
     27e:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <__tablejump2__>
     282:	06 b6       	in	r0, 0x36	; 54
     284:	07 fe       	sbrs	r0, 7
     286:	38 c0       	rjmp	.+112    	; 0x2f8 <Get_flag_stutus+0x8a>
     288:	21 e0       	ldi	r18, 0x01	; 1
     28a:	49 c0       	rjmp	.+146    	; 0x31e <Get_flag_stutus+0xb0>
     28c:	81 b1       	in	r24, 0x01	; 1
     28e:	88 7f       	andi	r24, 0xF8	; 248
     290:	88 30       	cpi	r24, 0x08	; 8
     292:	a1 f1       	breq	.+104    	; 0x2fc <Get_flag_stutus+0x8e>
     294:	21 e0       	ldi	r18, 0x01	; 1
     296:	43 c0       	rjmp	.+134    	; 0x31e <Get_flag_stutus+0xb0>
     298:	81 b1       	in	r24, 0x01	; 1
     29a:	88 7f       	andi	r24, 0xF8	; 248
     29c:	88 31       	cpi	r24, 0x18	; 24
     29e:	81 f1       	breq	.+96     	; 0x300 <Get_flag_stutus+0x92>
     2a0:	21 e0       	ldi	r18, 0x01	; 1
     2a2:	3d c0       	rjmp	.+122    	; 0x31e <Get_flag_stutus+0xb0>
     2a4:	81 b1       	in	r24, 0x01	; 1
     2a6:	88 7f       	andi	r24, 0xF8	; 248
     2a8:	88 32       	cpi	r24, 0x28	; 40
     2aa:	61 f1       	breq	.+88     	; 0x304 <Get_flag_stutus+0x96>
     2ac:	21 e0       	ldi	r18, 0x01	; 1
     2ae:	37 c0       	rjmp	.+110    	; 0x31e <Get_flag_stutus+0xb0>
     2b0:	81 b1       	in	r24, 0x01	; 1
     2b2:	88 7f       	andi	r24, 0xF8	; 248
     2b4:	80 36       	cpi	r24, 0x60	; 96
     2b6:	41 f1       	breq	.+80     	; 0x308 <Get_flag_stutus+0x9a>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	31 c0       	rjmp	.+98     	; 0x31e <Get_flag_stutus+0xb0>
     2bc:	81 b1       	in	r24, 0x01	; 1
     2be:	88 7f       	andi	r24, 0xF8	; 248
     2c0:	80 38       	cpi	r24, 0x80	; 128
     2c2:	21 f1       	breq	.+72     	; 0x30c <Get_flag_stutus+0x9e>
     2c4:	21 e0       	ldi	r18, 0x01	; 1
     2c6:	2b c0       	rjmp	.+86     	; 0x31e <Get_flag_stutus+0xb0>
     2c8:	81 b1       	in	r24, 0x01	; 1
     2ca:	88 7f       	andi	r24, 0xF8	; 248
     2cc:	80 34       	cpi	r24, 0x40	; 64
     2ce:	01 f1       	breq	.+64     	; 0x310 <Get_flag_stutus+0xa2>
     2d0:	21 e0       	ldi	r18, 0x01	; 1
     2d2:	25 c0       	rjmp	.+74     	; 0x31e <Get_flag_stutus+0xb0>
     2d4:	81 b1       	in	r24, 0x01	; 1
     2d6:	88 7f       	andi	r24, 0xF8	; 248
     2d8:	80 35       	cpi	r24, 0x50	; 80
     2da:	e1 f0       	breq	.+56     	; 0x314 <Get_flag_stutus+0xa6>
     2dc:	21 e0       	ldi	r18, 0x01	; 1
     2de:	1f c0       	rjmp	.+62     	; 0x31e <Get_flag_stutus+0xb0>
     2e0:	81 b1       	in	r24, 0x01	; 1
     2e2:	88 7f       	andi	r24, 0xF8	; 248
     2e4:	88 3a       	cpi	r24, 0xA8	; 168
     2e6:	c1 f0       	breq	.+48     	; 0x318 <Get_flag_stutus+0xaa>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	19 c0       	rjmp	.+50     	; 0x31e <Get_flag_stutus+0xb0>
     2ec:	81 b1       	in	r24, 0x01	; 1
     2ee:	88 7f       	andi	r24, 0xF8	; 248
     2f0:	88 3b       	cpi	r24, 0xB8	; 184
     2f2:	a1 f0       	breq	.+40     	; 0x31c <Get_flag_stutus+0xae>
     2f4:	21 e0       	ldi	r18, 0x01	; 1
     2f6:	13 c0       	rjmp	.+38     	; 0x31e <Get_flag_stutus+0xb0>
     2f8:	20 e0       	ldi	r18, 0x00	; 0
     2fa:	11 c0       	rjmp	.+34     	; 0x31e <Get_flag_stutus+0xb0>
     2fc:	20 e0       	ldi	r18, 0x00	; 0
     2fe:	0f c0       	rjmp	.+30     	; 0x31e <Get_flag_stutus+0xb0>
     300:	20 e0       	ldi	r18, 0x00	; 0
     302:	0d c0       	rjmp	.+26     	; 0x31e <Get_flag_stutus+0xb0>
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	0b c0       	rjmp	.+22     	; 0x31e <Get_flag_stutus+0xb0>
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	09 c0       	rjmp	.+18     	; 0x31e <Get_flag_stutus+0xb0>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	07 c0       	rjmp	.+14     	; 0x31e <Get_flag_stutus+0xb0>
     310:	20 e0       	ldi	r18, 0x00	; 0
     312:	05 c0       	rjmp	.+10     	; 0x31e <Get_flag_stutus+0xb0>
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	03 c0       	rjmp	.+6      	; 0x31e <Get_flag_stutus+0xb0>
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	01 c0       	rjmp	.+2      	; 0x31e <Get_flag_stutus+0xb0>
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	82 2f       	mov	r24, r18
     320:	08 95       	ret

00000322 <I2C_Generate_Start>:
     322:	84 ea       	ldi	r24, 0xA4	; 164
     324:	86 bf       	out	0x36, r24	; 54
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	0e 94 37 01 	call	0x26e	; 0x26e <Get_flag_stutus>
     32c:	88 23       	and	r24, r24
     32e:	d9 f3       	breq	.-10     	; 0x326 <I2C_Generate_Start+0x4>
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	0e 94 37 01 	call	0x26e	; 0x26e <Get_flag_stutus>
     336:	86 b7       	in	r24, 0x36	; 54
     338:	8f 75       	andi	r24, 0x5F	; 95
     33a:	86 bf       	out	0x36, r24	; 54
     33c:	08 95       	ret

0000033e <I2C_Generate_Stop>:
     33e:	84 e9       	ldi	r24, 0x94	; 148
     340:	86 bf       	out	0x36, r24	; 54
     342:	08 95       	ret

00000344 <MCAL_I2C_Master_TX>:
     344:	ff 92       	push	r15
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	c8 2f       	mov	r28, r24
     350:	8b 01       	movw	r16, r22
     352:	d4 2f       	mov	r29, r20
     354:	f2 2e       	mov	r15, r18
     356:	0e 94 91 01 	call	0x322	; 0x322 <I2C_Generate_Start>
     35a:	c3 b9       	out	0x03, r28	; 3
     35c:	86 b7       	in	r24, 0x36	; 54
     35e:	80 68       	ori	r24, 0x80	; 128
     360:	86 bf       	out	0x36, r24	; 54
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	0e 94 37 01 	call	0x26e	; 0x26e <Get_flag_stutus>
     368:	88 23       	and	r24, r24
     36a:	d9 f3       	breq	.-10     	; 0x362 <MCAL_I2C_Master_TX+0x1e>
     36c:	82 e0       	ldi	r24, 0x02	; 2
     36e:	0e 94 37 01 	call	0x26e	; 0x26e <Get_flag_stutus>
     372:	c0 e0       	ldi	r28, 0x00	; 0
     374:	11 c0       	rjmp	.+34     	; 0x398 <MCAL_I2C_Master_TX+0x54>
     376:	f8 01       	movw	r30, r16
     378:	ec 0f       	add	r30, r28
     37a:	f1 1d       	adc	r31, r1
     37c:	80 81       	ld	r24, Z
     37e:	83 b9       	out	0x03, r24	; 3
     380:	86 b7       	in	r24, 0x36	; 54
     382:	80 68       	ori	r24, 0x80	; 128
     384:	86 bf       	out	0x36, r24	; 54
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	0e 94 37 01 	call	0x26e	; 0x26e <Get_flag_stutus>
     38c:	88 23       	and	r24, r24
     38e:	d9 f3       	breq	.-10     	; 0x386 <MCAL_I2C_Master_TX+0x42>
     390:	84 e0       	ldi	r24, 0x04	; 4
     392:	0e 94 37 01 	call	0x26e	; 0x26e <Get_flag_stutus>
     396:	cf 5f       	subi	r28, 0xFF	; 255
     398:	cd 17       	cp	r28, r29
     39a:	68 f3       	brcs	.-38     	; 0x376 <MCAL_I2C_Master_TX+0x32>
     39c:	f1 10       	cpse	r15, r1
     39e:	02 c0       	rjmp	.+4      	; 0x3a4 <MCAL_I2C_Master_TX+0x60>
     3a0:	0e 94 9f 01 	call	0x33e	; 0x33e <I2C_Generate_Stop>
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	1f 91       	pop	r17
     3aa:	0f 91       	pop	r16
     3ac:	ff 90       	pop	r15
     3ae:	08 95       	ret

000003b0 <MCAL_I2C_Master_RX>:
     3b0:	0f 93       	push	r16
     3b2:	1f 93       	push	r17
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	c8 2f       	mov	r28, r24
     3ba:	8b 01       	movw	r16, r22
     3bc:	d4 2f       	mov	r29, r20
     3be:	0e 94 91 01 	call	0x322	; 0x322 <I2C_Generate_Start>
     3c2:	c3 b9       	out	0x03, r28	; 3
     3c4:	86 b7       	in	r24, 0x36	; 54
     3c6:	80 6c       	ori	r24, 0xC0	; 192
     3c8:	86 bf       	out	0x36, r24	; 54
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	0e 94 37 01 	call	0x26e	; 0x26e <Get_flag_stutus>
     3d0:	88 23       	and	r24, r24
     3d2:	d9 f3       	breq	.-10     	; 0x3ca <MCAL_I2C_Master_RX+0x1a>
     3d4:	83 e0       	ldi	r24, 0x03	; 3
     3d6:	0e 94 37 01 	call	0x26e	; 0x26e <Get_flag_stutus>
     3da:	c0 e0       	ldi	r28, 0x00	; 0
     3dc:	1c c0       	rjmp	.+56     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     3de:	2c 2f       	mov	r18, r28
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	8d 2f       	mov	r24, r29
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	01 97       	sbiw	r24, 0x01	; 1
     3e8:	28 17       	cp	r18, r24
     3ea:	39 07       	cpc	r19, r25
     3ec:	19 f4       	brne	.+6      	; 0x3f4 <MCAL_I2C_Master_RX+0x44>
     3ee:	86 b7       	in	r24, 0x36	; 54
     3f0:	8f 7b       	andi	r24, 0xBF	; 191
     3f2:	86 bf       	out	0x36, r24	; 54
     3f4:	86 b7       	in	r24, 0x36	; 54
     3f6:	80 68       	ori	r24, 0x80	; 128
     3f8:	86 bf       	out	0x36, r24	; 54
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	0e 94 37 01 	call	0x26e	; 0x26e <Get_flag_stutus>
     400:	88 23       	and	r24, r24
     402:	d9 f3       	breq	.-10     	; 0x3fa <MCAL_I2C_Master_RX+0x4a>
     404:	89 e0       	ldi	r24, 0x09	; 9
     406:	0e 94 37 01 	call	0x26e	; 0x26e <Get_flag_stutus>
     40a:	f8 01       	movw	r30, r16
     40c:	ec 0f       	add	r30, r28
     40e:	f1 1d       	adc	r31, r1
     410:	83 b1       	in	r24, 0x03	; 3
     412:	80 83       	st	Z, r24
     414:	cf 5f       	subi	r28, 0xFF	; 255
     416:	cd 17       	cp	r28, r29
     418:	10 f3       	brcs	.-60     	; 0x3de <MCAL_I2C_Master_RX+0x2e>
     41a:	0e 94 9f 01 	call	0x33e	; 0x33e <I2C_Generate_Stop>
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	1f 91       	pop	r17
     424:	0f 91       	pop	r16
     426:	08 95       	ret

00000428 <__vector_19>:
 */


void __vector_19 (void) __attribute__((signal));
void __vector_19 (void)
{
     428:	1f 92       	push	r1
     42a:	0f 92       	push	r0
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	0f 92       	push	r0
     430:	11 24       	eor	r1, r1
     432:	2f 93       	push	r18
     434:	3f 93       	push	r19
     436:	4f 93       	push	r20
     438:	5f 93       	push	r21
     43a:	6f 93       	push	r22
     43c:	7f 93       	push	r23
     43e:	8f 93       	push	r24
     440:	9f 93       	push	r25
     442:	af 93       	push	r26
     444:	bf 93       	push	r27
     446:	ef 93       	push	r30
     448:	ff 93       	push	r31
	g_I2C_Config->P_IRQ_CALL() ;
     44a:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__data_end>
     44e:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <__data_end+0x1>
     452:	04 80       	ldd	r0, Z+4	; 0x04
     454:	f5 81       	ldd	r31, Z+5	; 0x05
     456:	e0 2d       	mov	r30, r0
     458:	09 95       	icall
}
     45a:	ff 91       	pop	r31
     45c:	ef 91       	pop	r30
     45e:	bf 91       	pop	r27
     460:	af 91       	pop	r26
     462:	9f 91       	pop	r25
     464:	8f 91       	pop	r24
     466:	7f 91       	pop	r23
     468:	6f 91       	pop	r22
     46a:	5f 91       	pop	r21
     46c:	4f 91       	pop	r20
     46e:	3f 91       	pop	r19
     470:	2f 91       	pop	r18
     472:	0f 90       	pop	r0
     474:	0f be       	out	0x3f, r0	; 63
     476:	0f 90       	pop	r0
     478:	1f 90       	pop	r1
     47a:	18 95       	reti

0000047c <MCAL_PWM_Init>:
*/
void MCAL_PWM_Set_TOP_Value(uint16_t TOP_Value ) 
{
	//Set TOP Value
	TIMER1->ICR1H = (uint8_t)(TOP_Value>>8);
	TIMER1->ICR1L = (uint8_t)(TOP_Value);
     47c:	ef 92       	push	r14
     47e:	ff 92       	push	r15
     480:	0f 93       	push	r16
     482:	1f 93       	push	r17
     484:	cf 93       	push	r28
     486:	df 93       	push	r29
     488:	00 d0       	rcall	.+0      	; 0x48a <MCAL_PWM_Init+0xe>
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
     48e:	8c 01       	movw	r16, r24
     490:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <g_PWM_Config+0x1>
     494:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_PWM_Config>
     498:	fc 01       	movw	r30, r24
     49a:	80 81       	ld	r24, Z
     49c:	f8 2f       	mov	r31, r24
     49e:	f2 60       	ori	r31, 0x02	; 2
     4a0:	ff 2e       	mov	r15, r31
     4a2:	88 23       	and	r24, r24
     4a4:	59 f0       	breq	.+22     	; 0x4bc <MCAL_PWM_Init+0x40>
     4a6:	80 e2       	ldi	r24, 0x20	; 32
     4a8:	89 83       	std	Y+1, r24	; 0x01
     4aa:	83 e0       	ldi	r24, 0x03	; 3
     4ac:	8a 83       	std	Y+2, r24	; 0x02
     4ae:	be 01       	movw	r22, r28
     4b0:	6f 5f       	subi	r22, 0xFF	; 255
     4b2:	7f 4f       	sbci	r23, 0xFF	; 255
     4b4:	80 e3       	ldi	r24, 0x30	; 48
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 c8 00 	call	0x190	; 0x190 <MCAL_GPIO_Init>
     4bc:	f8 01       	movw	r30, r16
     4be:	81 81       	ldd	r24, Z+1	; 0x01
     4c0:	f8 2f       	mov	r31, r24
     4c2:	f8 61       	ori	r31, 0x18	; 24
     4c4:	ef 2e       	mov	r14, r31
     4c6:	88 23       	and	r24, r24
     4c8:	59 f0       	breq	.+22     	; 0x4e0 <MCAL_PWM_Init+0x64>
     4ca:	80 e1       	ldi	r24, 0x10	; 16
     4cc:	89 83       	std	Y+1, r24	; 0x01
     4ce:	83 e0       	ldi	r24, 0x03	; 3
     4d0:	8a 83       	std	Y+2, r24	; 0x02
     4d2:	be 01       	movw	r22, r28
     4d4:	6f 5f       	subi	r22, 0xFF	; 255
     4d6:	7f 4f       	sbci	r23, 0xFF	; 255
     4d8:	80 e3       	ldi	r24, 0x30	; 48
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 c8 00 	call	0x190	; 0x190 <MCAL_GPIO_Init>
     4e0:	f8 01       	movw	r30, r16
     4e2:	82 81       	ldd	r24, Z+2	; 0x02
     4e4:	8e 29       	or	r24, r14
     4e6:	93 81       	ldd	r25, Z+3	; 0x03
     4e8:	91 30       	cpi	r25, 0x01	; 1
     4ea:	39 f4       	brne	.+14     	; 0x4fa <MCAL_PWM_Init+0x7e>
     4ec:	99 b7       	in	r25, 0x39	; 57
     4ee:	94 60       	ori	r25, 0x04	; 4
     4f0:	99 bf       	out	0x39, r25	; 57
     4f2:	9f b7       	in	r25, 0x3f	; 63
     4f4:	90 68       	ori	r25, 0x80	; 128
     4f6:	9f bf       	out	0x3f, r25	; 63
     4f8:	06 c0       	rjmp	.+12     	; 0x506 <MCAL_PWM_Init+0x8a>
     4fa:	99 b7       	in	r25, 0x39	; 57
     4fc:	9b 7f       	andi	r25, 0xFB	; 251
     4fe:	99 bf       	out	0x39, r25	; 57
     500:	9f b7       	in	r25, 0x3f	; 63
     502:	9f 77       	andi	r25, 0x7F	; 127
     504:	9f bf       	out	0x3f, r25	; 63
     506:	f8 01       	movw	r30, r16
     508:	94 81       	ldd	r25, Z+4	; 0x04
     50a:	91 30       	cpi	r25, 0x01	; 1
     50c:	39 f4       	brne	.+14     	; 0x51c <MCAL_PWM_Init+0xa0>
     50e:	99 b7       	in	r25, 0x39	; 57
     510:	90 61       	ori	r25, 0x10	; 16
     512:	99 bf       	out	0x39, r25	; 57
     514:	9f b7       	in	r25, 0x3f	; 63
     516:	90 68       	ori	r25, 0x80	; 128
     518:	9f bf       	out	0x3f, r25	; 63
     51a:	06 c0       	rjmp	.+12     	; 0x528 <MCAL_PWM_Init+0xac>
     51c:	99 b7       	in	r25, 0x39	; 57
     51e:	9f 7e       	andi	r25, 0xEF	; 239
     520:	99 bf       	out	0x39, r25	; 57
     522:	9f b7       	in	r25, 0x3f	; 63
     524:	9f 77       	andi	r25, 0x7F	; 127
     526:	9f bf       	out	0x3f, r25	; 63
     528:	f8 01       	movw	r30, r16
     52a:	94 81       	ldd	r25, Z+4	; 0x04
     52c:	91 30       	cpi	r25, 0x01	; 1
     52e:	39 f4       	brne	.+14     	; 0x53e <MCAL_PWM_Init+0xc2>
     530:	99 b7       	in	r25, 0x39	; 57
     532:	90 61       	ori	r25, 0x10	; 16
     534:	99 bf       	out	0x39, r25	; 57
     536:	9f b7       	in	r25, 0x3f	; 63
     538:	90 68       	ori	r25, 0x80	; 128
     53a:	9f bf       	out	0x3f, r25	; 63
     53c:	06 c0       	rjmp	.+12     	; 0x54a <MCAL_PWM_Init+0xce>
     53e:	99 b7       	in	r25, 0x39	; 57
     540:	97 7f       	andi	r25, 0xF7	; 247
     542:	99 bf       	out	0x39, r25	; 57
     544:	9f b7       	in	r25, 0x3f	; 63
     546:	9f 77       	andi	r25, 0x7F	; 127
     548:	9f bf       	out	0x3f, r25	; 63
     54a:	f8 01       	movw	r30, r16
     54c:	93 85       	ldd	r25, Z+11	; 0x0b
     54e:	97 bd       	out	0x27, r25	; 39
     550:	92 85       	ldd	r25, Z+10	; 0x0a
     552:	96 bd       	out	0x26, r25	; 38
     554:	97 81       	ldd	r25, Z+7	; 0x07
     556:	9b bd       	out	0x2b, r25	; 43
     558:	96 81       	ldd	r25, Z+6	; 0x06
     55a:	9a bd       	out	0x2a, r25	; 42
     55c:	91 85       	ldd	r25, Z+9	; 0x09
     55e:	99 bd       	out	0x29, r25	; 41
     560:	90 85       	ldd	r25, Z+8	; 0x08
     562:	98 bd       	out	0x28, r25	; 40
     564:	ff bc       	out	0x2f, r15	; 47
     566:	8e bd       	out	0x2e, r24	; 46
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	1f 91       	pop	r17
     572:	0f 91       	pop	r16
     574:	ff 90       	pop	r15
     576:	ef 90       	pop	r14
     578:	08 95       	ret

0000057a <MCAL_PWM_Set_Compare_Value>:
     57a:	61 11       	cpse	r22, r1
     57c:	03 c0       	rjmp	.+6      	; 0x584 <MCAL_PWM_Set_Compare_Value+0xa>
     57e:	9b bd       	out	0x2b, r25	; 43
     580:	8a bd       	out	0x2a, r24	; 42
     582:	08 95       	ret
     584:	99 bd       	out	0x29, r25	; 41
     586:	88 bd       	out	0x28, r24	; 40
     588:	08 95       	ret

0000058a <__vector_9>:
 * ===============================================================
 */

void __vector_9 (void) __attribute__((signal));
void __vector_9 (void)
{
     58a:	1f 92       	push	r1
     58c:	0f 92       	push	r0
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	0f 92       	push	r0
     592:	11 24       	eor	r1, r1
     594:	2f 93       	push	r18
     596:	3f 93       	push	r19
     598:	4f 93       	push	r20
     59a:	5f 93       	push	r21
     59c:	6f 93       	push	r22
     59e:	7f 93       	push	r23
     5a0:	8f 93       	push	r24
     5a2:	9f 93       	push	r25
     5a4:	af 93       	push	r26
     5a6:	bf 93       	push	r27
     5a8:	ef 93       	push	r30
     5aa:	ff 93       	push	r31
	g_PWM_Config->P_TOIE1_CALL();
     5ac:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <g_PWM_Config>
     5b0:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <g_PWM_Config+0x1>
     5b4:	04 84       	ldd	r0, Z+12	; 0x0c
     5b6:	f5 85       	ldd	r31, Z+13	; 0x0d
     5b8:	e0 2d       	mov	r30, r0
     5ba:	09 95       	icall
}
     5bc:	ff 91       	pop	r31
     5be:	ef 91       	pop	r30
     5c0:	bf 91       	pop	r27
     5c2:	af 91       	pop	r26
     5c4:	9f 91       	pop	r25
     5c6:	8f 91       	pop	r24
     5c8:	7f 91       	pop	r23
     5ca:	6f 91       	pop	r22
     5cc:	5f 91       	pop	r21
     5ce:	4f 91       	pop	r20
     5d0:	3f 91       	pop	r19
     5d2:	2f 91       	pop	r18
     5d4:	0f 90       	pop	r0
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	0f 90       	pop	r0
     5da:	1f 90       	pop	r1
     5dc:	18 95       	reti

000005de <__vector_7>:

void __vector_7 (void) __attribute__((signal));
void __vector_7 (void)
{
     5de:	1f 92       	push	r1
     5e0:	0f 92       	push	r0
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	0f 92       	push	r0
     5e6:	11 24       	eor	r1, r1
     5e8:	2f 93       	push	r18
     5ea:	3f 93       	push	r19
     5ec:	4f 93       	push	r20
     5ee:	5f 93       	push	r21
     5f0:	6f 93       	push	r22
     5f2:	7f 93       	push	r23
     5f4:	8f 93       	push	r24
     5f6:	9f 93       	push	r25
     5f8:	af 93       	push	r26
     5fa:	bf 93       	push	r27
     5fc:	ef 93       	push	r30
     5fe:	ff 93       	push	r31
	g_PWM_Config->P_OCIE1A_CALL();
     600:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <g_PWM_Config>
     604:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <g_PWM_Config+0x1>
     608:	06 84       	ldd	r0, Z+14	; 0x0e
     60a:	f7 85       	ldd	r31, Z+15	; 0x0f
     60c:	e0 2d       	mov	r30, r0
     60e:	09 95       	icall
}
     610:	ff 91       	pop	r31
     612:	ef 91       	pop	r30
     614:	bf 91       	pop	r27
     616:	af 91       	pop	r26
     618:	9f 91       	pop	r25
     61a:	8f 91       	pop	r24
     61c:	7f 91       	pop	r23
     61e:	6f 91       	pop	r22
     620:	5f 91       	pop	r21
     622:	4f 91       	pop	r20
     624:	3f 91       	pop	r19
     626:	2f 91       	pop	r18
     628:	0f 90       	pop	r0
     62a:	0f be       	out	0x3f, r0	; 63
     62c:	0f 90       	pop	r0
     62e:	1f 90       	pop	r1
     630:	18 95       	reti

00000632 <__vector_8>:

void __vector_8 (void) __attribute__((signal));
void __vector_8 (void)
{
     632:	1f 92       	push	r1
     634:	0f 92       	push	r0
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	0f 92       	push	r0
     63a:	11 24       	eor	r1, r1
     63c:	2f 93       	push	r18
     63e:	3f 93       	push	r19
     640:	4f 93       	push	r20
     642:	5f 93       	push	r21
     644:	6f 93       	push	r22
     646:	7f 93       	push	r23
     648:	8f 93       	push	r24
     64a:	9f 93       	push	r25
     64c:	af 93       	push	r26
     64e:	bf 93       	push	r27
     650:	ef 93       	push	r30
     652:	ff 93       	push	r31
	g_PWM_Config->P_OCIE1B_CALL();
     654:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <g_PWM_Config>
     658:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <g_PWM_Config+0x1>
     65c:	00 88       	ldd	r0, Z+16	; 0x10
     65e:	f1 89       	ldd	r31, Z+17	; 0x11
     660:	e0 2d       	mov	r30, r0
     662:	09 95       	icall
}
     664:	ff 91       	pop	r31
     666:	ef 91       	pop	r30
     668:	bf 91       	pop	r27
     66a:	af 91       	pop	r26
     66c:	9f 91       	pop	r25
     66e:	8f 91       	pop	r24
     670:	7f 91       	pop	r23
     672:	6f 91       	pop	r22
     674:	5f 91       	pop	r21
     676:	4f 91       	pop	r20
     678:	3f 91       	pop	r19
     67a:	2f 91       	pop	r18
     67c:	0f 90       	pop	r0
     67e:	0f be       	out	0x3f, r0	; 63
     680:	0f 90       	pop	r0
     682:	1f 90       	pop	r1
     684:	18 95       	reti

00000686 <__vector_12>:
 */


void __vector_12 (void) __attribute__((signal));
void __vector_12 (void)
{
     686:	1f 92       	push	r1
     688:	0f 92       	push	r0
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	0f 92       	push	r0
     68e:	11 24       	eor	r1, r1
     690:	2f 93       	push	r18
     692:	3f 93       	push	r19
     694:	4f 93       	push	r20
     696:	5f 93       	push	r21
     698:	6f 93       	push	r22
     69a:	7f 93       	push	r23
     69c:	8f 93       	push	r24
     69e:	9f 93       	push	r25
     6a0:	af 93       	push	r26
     6a2:	bf 93       	push	r27
     6a4:	ef 93       	push	r30
     6a6:	ff 93       	push	r31
	g_SPI_Config->P_IRQ_CALL() ;
     6a8:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <g_SPI_Config>
     6ac:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <g_SPI_Config+0x1>
     6b0:	07 80       	ldd	r0, Z+7	; 0x07
     6b2:	f0 85       	ldd	r31, Z+8	; 0x08
     6b4:	e0 2d       	mov	r30, r0
     6b6:	09 95       	icall
}
     6b8:	ff 91       	pop	r31
     6ba:	ef 91       	pop	r30
     6bc:	bf 91       	pop	r27
     6be:	af 91       	pop	r26
     6c0:	9f 91       	pop	r25
     6c2:	8f 91       	pop	r24
     6c4:	7f 91       	pop	r23
     6c6:	6f 91       	pop	r22
     6c8:	5f 91       	pop	r21
     6ca:	4f 91       	pop	r20
     6cc:	3f 91       	pop	r19
     6ce:	2f 91       	pop	r18
     6d0:	0f 90       	pop	r0
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	0f 90       	pop	r0
     6d6:	1f 90       	pop	r1
     6d8:	18 95       	reti

000006da <__vector_10>:
 * ===============================================================
 */

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
     6da:	1f 92       	push	r1
     6dc:	0f 92       	push	r0
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	0f 92       	push	r0
     6e2:	11 24       	eor	r1, r1
     6e4:	2f 93       	push	r18
     6e6:	3f 93       	push	r19
     6e8:	4f 93       	push	r20
     6ea:	5f 93       	push	r21
     6ec:	6f 93       	push	r22
     6ee:	7f 93       	push	r23
     6f0:	8f 93       	push	r24
     6f2:	9f 93       	push	r25
     6f4:	af 93       	push	r26
     6f6:	bf 93       	push	r27
     6f8:	ef 93       	push	r30
     6fa:	ff 93       	push	r31
	g_TIM0_Config->P_OCIE0_CALL();
     6fc:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <g_TIM0_Config>
     700:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <g_TIM0_Config+0x1>
     704:	00 84       	ldd	r0, Z+8	; 0x08
     706:	f1 85       	ldd	r31, Z+9	; 0x09
     708:	e0 2d       	mov	r30, r0
     70a:	09 95       	icall
}
     70c:	ff 91       	pop	r31
     70e:	ef 91       	pop	r30
     710:	bf 91       	pop	r27
     712:	af 91       	pop	r26
     714:	9f 91       	pop	r25
     716:	8f 91       	pop	r24
     718:	7f 91       	pop	r23
     71a:	6f 91       	pop	r22
     71c:	5f 91       	pop	r21
     71e:	4f 91       	pop	r20
     720:	3f 91       	pop	r19
     722:	2f 91       	pop	r18
     724:	0f 90       	pop	r0
     726:	0f be       	out	0x3f, r0	; 63
     728:	0f 90       	pop	r0
     72a:	1f 90       	pop	r1
     72c:	18 95       	reti

0000072e <__vector_11>:

void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
     72e:	1f 92       	push	r1
     730:	0f 92       	push	r0
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	0f 92       	push	r0
     736:	11 24       	eor	r1, r1
     738:	2f 93       	push	r18
     73a:	3f 93       	push	r19
     73c:	4f 93       	push	r20
     73e:	5f 93       	push	r21
     740:	6f 93       	push	r22
     742:	7f 93       	push	r23
     744:	8f 93       	push	r24
     746:	9f 93       	push	r25
     748:	af 93       	push	r26
     74a:	bf 93       	push	r27
     74c:	ef 93       	push	r30
     74e:	ff 93       	push	r31
	g_TIM0_Config->P_TOIE0_CALL();
     750:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <g_TIM0_Config>
     754:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <g_TIM0_Config+0x1>
     758:	06 80       	ldd	r0, Z+6	; 0x06
     75a:	f7 81       	ldd	r31, Z+7	; 0x07
     75c:	e0 2d       	mov	r30, r0
     75e:	09 95       	icall
}
     760:	ff 91       	pop	r31
     762:	ef 91       	pop	r30
     764:	bf 91       	pop	r27
     766:	af 91       	pop	r26
     768:	9f 91       	pop	r25
     76a:	8f 91       	pop	r24
     76c:	7f 91       	pop	r23
     76e:	6f 91       	pop	r22
     770:	5f 91       	pop	r21
     772:	4f 91       	pop	r20
     774:	3f 91       	pop	r19
     776:	2f 91       	pop	r18
     778:	0f 90       	pop	r0
     77a:	0f be       	out	0x3f, r0	; 63
     77c:	0f 90       	pop	r0
     77e:	1f 90       	pop	r1
     780:	18 95       	reti

00000782 <__vector_13>:
 *
 * ===============================================================
 */
void __vector_13 (void) __attribute__((signal));
void __vector_13 (void)
{
     782:	1f 92       	push	r1
     784:	0f 92       	push	r0
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	0f 92       	push	r0
     78a:	11 24       	eor	r1, r1
     78c:	2f 93       	push	r18
     78e:	3f 93       	push	r19
     790:	4f 93       	push	r20
     792:	5f 93       	push	r21
     794:	6f 93       	push	r22
     796:	7f 93       	push	r23
     798:	8f 93       	push	r24
     79a:	9f 93       	push	r25
     79c:	af 93       	push	r26
     79e:	bf 93       	push	r27
     7a0:	ef 93       	push	r30
     7a2:	ff 93       	push	r31
	//Call function
	GPU_IRQ_CALL[2]();
     7a4:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <GPU_IRQ_CALL+0x4>
     7a8:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <GPU_IRQ_CALL+0x5>
     7ac:	09 95       	icall
}
     7ae:	ff 91       	pop	r31
     7b0:	ef 91       	pop	r30
     7b2:	bf 91       	pop	r27
     7b4:	af 91       	pop	r26
     7b6:	9f 91       	pop	r25
     7b8:	8f 91       	pop	r24
     7ba:	7f 91       	pop	r23
     7bc:	6f 91       	pop	r22
     7be:	5f 91       	pop	r21
     7c0:	4f 91       	pop	r20
     7c2:	3f 91       	pop	r19
     7c4:	2f 91       	pop	r18
     7c6:	0f 90       	pop	r0
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	0f 90       	pop	r0
     7cc:	1f 90       	pop	r1
     7ce:	18 95       	reti

000007d0 <__vector_14>:

void __vector_14 (void) __attribute__((signal));
void __vector_14 (void)
{
     7d0:	1f 92       	push	r1
     7d2:	0f 92       	push	r0
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	0f 92       	push	r0
     7d8:	11 24       	eor	r1, r1
     7da:	2f 93       	push	r18
     7dc:	3f 93       	push	r19
     7de:	4f 93       	push	r20
     7e0:	5f 93       	push	r21
     7e2:	6f 93       	push	r22
     7e4:	7f 93       	push	r23
     7e6:	8f 93       	push	r24
     7e8:	9f 93       	push	r25
     7ea:	af 93       	push	r26
     7ec:	bf 93       	push	r27
     7ee:	ef 93       	push	r30
     7f0:	ff 93       	push	r31
	//Call function
	GPU_IRQ_CALL[1]();
     7f2:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <GPU_IRQ_CALL+0x2>
     7f6:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <GPU_IRQ_CALL+0x3>
     7fa:	09 95       	icall
}
     7fc:	ff 91       	pop	r31
     7fe:	ef 91       	pop	r30
     800:	bf 91       	pop	r27
     802:	af 91       	pop	r26
     804:	9f 91       	pop	r25
     806:	8f 91       	pop	r24
     808:	7f 91       	pop	r23
     80a:	6f 91       	pop	r22
     80c:	5f 91       	pop	r21
     80e:	4f 91       	pop	r20
     810:	3f 91       	pop	r19
     812:	2f 91       	pop	r18
     814:	0f 90       	pop	r0
     816:	0f be       	out	0x3f, r0	; 63
     818:	0f 90       	pop	r0
     81a:	1f 90       	pop	r1
     81c:	18 95       	reti

0000081e <__vector_15>:

void __vector_15 (void) __attribute__((signal));
void __vector_15 (void)
{
     81e:	1f 92       	push	r1
     820:	0f 92       	push	r0
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	0f 92       	push	r0
     826:	11 24       	eor	r1, r1
     828:	2f 93       	push	r18
     82a:	3f 93       	push	r19
     82c:	4f 93       	push	r20
     82e:	5f 93       	push	r21
     830:	6f 93       	push	r22
     832:	7f 93       	push	r23
     834:	8f 93       	push	r24
     836:	9f 93       	push	r25
     838:	af 93       	push	r26
     83a:	bf 93       	push	r27
     83c:	ef 93       	push	r30
     83e:	ff 93       	push	r31
	//Call function
	GPU_IRQ_CALL[0]();
     840:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <GPU_IRQ_CALL>
     844:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <GPU_IRQ_CALL+0x1>
     848:	09 95       	icall
}
     84a:	ff 91       	pop	r31
     84c:	ef 91       	pop	r30
     84e:	bf 91       	pop	r27
     850:	af 91       	pop	r26
     852:	9f 91       	pop	r25
     854:	8f 91       	pop	r24
     856:	7f 91       	pop	r23
     858:	6f 91       	pop	r22
     85a:	5f 91       	pop	r21
     85c:	4f 91       	pop	r20
     85e:	3f 91       	pop	r19
     860:	2f 91       	pop	r18
     862:	0f 90       	pop	r0
     864:	0f be       	out	0x3f, r0	; 63
     866:	0f 90       	pop	r0
     868:	1f 90       	pop	r1
     86a:	18 95       	reti

0000086c <MCAL_WDT_Init>:

#include "WDT.h"

void MCAL_WDT_Init(uint8_t Wait_Time)
{
	WDTCR = Wait_Time ;
     86c:	81 bd       	out	0x21, r24	; 33
     86e:	08 95       	ret

00000870 <MCAL_WDT_ON>:
}


void MCAL_WDT_ON(void)
{
	WDTCR |= (1 << 3);
     870:	81 b5       	in	r24, 0x21	; 33
     872:	88 60       	ori	r24, 0x08	; 8
     874:	81 bd       	out	0x21, r24	; 33
     876:	08 95       	ret

00000878 <MCAL_WDT_OFF>:
}

void MCAL_WDT_OFF(void)
{
	WDTCR = (1<<4)|(1<<3);
     878:	88 e1       	ldi	r24, 0x18	; 24
     87a:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0x00;
     87c:	11 bc       	out	0x21, r1	; 33
     87e:	08 95       	ret

00000880 <EEPROM_Init>:

#include "EEPROM.h"


void EEPROM_Init(void)
{
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	00 d0       	rcall	.+0      	; 0x886 <EEPROM_Init+0x6>
     886:	00 d0       	rcall	.+0      	; 0x888 <EEPROM_Init+0x8>
     888:	00 d0       	rcall	.+0      	; 0x88a <EEPROM_Init+0xa>
     88a:	cd b7       	in	r28, 0x3d	; 61
     88c:	de b7       	in	r29, 0x3e	; 62
	I2C_config_t I2C_Config ;
	I2C_Config.IRQ_EN =I2C_IRQ_ENABLE_Disable ;
     88e:	8e ef       	ldi	r24, 0xFE	; 254
     890:	8b 83       	std	Y+3, r24	; 0x03
	I2C_Config.P_IRQ_CALL = NULL ;
     892:	1e 82       	std	Y+6, r1	; 0x06
     894:	1d 82       	std	Y+5, r1	; 0x05
	I2C_Config.Speed_MODE = I2C_Speed_MODE_100 ;
     896:	80 ea       	ldi	r24, 0xA0	; 160
     898:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Config.Prescaler = I2C_Prescaler_1     ;
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	8c 83       	std	Y+4, r24	; 0x04
	MCAL_I2C_Init(&I2C_Config) ;
     89e:	ce 01       	movw	r24, r28
     8a0:	01 96       	adiw	r24, 0x01	; 1
     8a2:	0e 94 06 01 	call	0x20c	; 0x20c <MCAL_I2C_Init>
}
     8a6:	26 96       	adiw	r28, 0x06	; 6
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	f8 94       	cli
     8ac:	de bf       	out	0x3e, r29	; 62
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	cd bf       	out	0x3d, r28	; 61
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	08 95       	ret

000008b8 <EEPROM_Write_Data>:


void EEPROM_Write_Data(uint16_t EEPROM_Address , uint8_t* PTXBuffer , uint8_t Dataln)
{
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62
     8c0:	cf 5f       	subi	r28, 0xFF	; 255
     8c2:	d1 09       	sbc	r29, r1
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	f8 94       	cli
     8c8:	de bf       	out	0x3e, r29	; 62
     8ca:	0f be       	out	0x3f, r0	; 63
     8cc:	cd bf       	out	0x3d, r28	; 61
     8ce:	fb 01       	movw	r30, r22
	uint8_t i=0;
	uint8_t buffer[255];
	buffer[0] = (uint8_t)(EEPROM_Address>>8);   // Send Upper Byte
     8d0:	99 83       	std	Y+1, r25	; 0x01
	buffer[1] = (uint8_t)(EEPROM_Address);		// Send Lower Byte
     8d2:	8a 83       	std	Y+2, r24	; 0x02
	for (i=2 ; i< Dataln+2 ; i++)
     8d4:	52 e0       	ldi	r21, 0x02	; 2
     8d6:	09 c0       	rjmp	.+18     	; 0x8ea <EEPROM_Write_Data+0x32>
	{
		buffer[i]= *PTXBuffer;
     8d8:	21 91       	ld	r18, Z+
     8da:	a1 e0       	ldi	r26, 0x01	; 1
     8dc:	b0 e0       	ldi	r27, 0x00	; 0
     8de:	ac 0f       	add	r26, r28
     8e0:	bd 1f       	adc	r27, r29
     8e2:	a8 0f       	add	r26, r24
     8e4:	b9 1f       	adc	r27, r25
     8e6:	2c 93       	st	X, r18
{
	uint8_t i=0;
	uint8_t buffer[255];
	buffer[0] = (uint8_t)(EEPROM_Address>>8);   // Send Upper Byte
	buffer[1] = (uint8_t)(EEPROM_Address);		// Send Lower Byte
	for (i=2 ; i< Dataln+2 ; i++)
     8e8:	5f 5f       	subi	r21, 0xFF	; 255
     8ea:	85 2f       	mov	r24, r21
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	24 2f       	mov	r18, r20
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	2e 5f       	subi	r18, 0xFE	; 254
     8f4:	3f 4f       	sbci	r19, 0xFF	; 255
     8f6:	82 17       	cp	r24, r18
     8f8:	93 07       	cpc	r25, r19
     8fa:	74 f3       	brlt	.-36     	; 0x8d8 <EEPROM_Write_Data+0x20>
	{
		buffer[i]= *PTXBuffer;
		PTXBuffer++;
	}
	
	MCAL_I2C_Master_TX(EEPROM_Slave_Address_Write, buffer, Dataln+2 ,With_Stop);
     8fc:	4e 5f       	subi	r20, 0xFE	; 254
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	be 01       	movw	r22, r28
     902:	6f 5f       	subi	r22, 0xFF	; 255
     904:	7f 4f       	sbci	r23, 0xFF	; 255
     906:	86 ea       	ldi	r24, 0xA6	; 166
     908:	0e 94 a2 01 	call	0x344	; 0x344 <MCAL_I2C_Master_TX>
	return 0;
}
     90c:	c1 50       	subi	r28, 0x01	; 1
     90e:	df 4f       	sbci	r29, 0xFF	; 255
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	f8 94       	cli
     914:	de bf       	out	0x3e, r29	; 62
     916:	0f be       	out	0x3f, r0	; 63
     918:	cd bf       	out	0x3d, r28	; 61
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	08 95       	ret

00000920 <EEPROM_Read_Data>:


void EEPROM_Read_Data( uint16_t EEPROM_Address , uint8_t* PRXBuffer , uint8_t Dataln )
{
     920:	ff 92       	push	r15
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	00 d0       	rcall	.+0      	; 0x92c <EEPROM_Read_Data+0xc>
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	8b 01       	movw	r16, r22
     932:	f4 2e       	mov	r15, r20
	uint8_t i=0  ;

	uint8_t buffer[2];
	buffer[0] = (uint8_t)(EEPROM_Address>>8);   // Send Upper Byte
     934:	99 83       	std	Y+1, r25	; 0x01
	buffer[1] = (uint8_t)(EEPROM_Address);		 // Send Lower Byte
     936:	8a 83       	std	Y+2, r24	; 0x02
	//send address
	MCAL_I2C_Master_TX(EEPROM_Slave_Address_Write, buffer, 2 , Without_Stop);
     938:	21 e0       	ldi	r18, 0x01	; 1
     93a:	42 e0       	ldi	r20, 0x02	; 2
     93c:	be 01       	movw	r22, r28
     93e:	6f 5f       	subi	r22, 0xFF	; 255
     940:	7f 4f       	sbci	r23, 0xFF	; 255
     942:	86 ea       	ldi	r24, 0xA6	; 166
     944:	0e 94 a2 01 	call	0x344	; 0x344 <MCAL_I2C_Master_TX>
	// Read Data
	MCAL_I2C_Master_RX( EEPROM_Slave_Address_Read , PRXBuffer , Dataln );
     948:	4f 2d       	mov	r20, r15
     94a:	b8 01       	movw	r22, r16
     94c:	87 ea       	ldi	r24, 0xA7	; 167
     94e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <MCAL_I2C_Master_RX>
     952:	0f 90       	pop	r0
     954:	0f 90       	pop	r0
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	ff 90       	pop	r15
     960:	08 95       	ret

00000962 <keypad_init>:
int Keypad_Read_Row[]={0,1,2,3};
int Keypad_Row[]={R0,R1,R2,R3};
int Keypad_Col[]={C0,C1,C2,C3};

void keypad_init(void)
{
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	00 d0       	rcall	.+0      	; 0x96a <keypad_init+0x8>
     96a:	cd b7       	in	r28, 0x3d	; 61
     96c:	de b7       	in	r29, 0x3e	; 62
	GPIO_Pinconfig_t keypad_Conf ;
	keypad_Conf.GPIO_MODE=GPIO_MODE_OUTPUT;
     96e:	13 e0       	ldi	r17, 0x03	; 3
     970:	1a 83       	std	Y+2, r17	; 0x02
	keypad_Conf.pinNumber=C0;
     972:	80 e1       	ldi	r24, 0x10	; 16
     974:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init(Keypad_Col_port,&keypad_Conf);
     976:	be 01       	movw	r22, r28
     978:	6f 5f       	subi	r22, 0xFF	; 255
     97a:	7f 4f       	sbci	r23, 0xFF	; 255
     97c:	83 e3       	ldi	r24, 0x33	; 51
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	0e 94 c8 00 	call	0x190	; 0x190 <MCAL_GPIO_Init>
	
	keypad_Conf.GPIO_MODE=GPIO_MODE_OUTPUT;
     984:	1a 83       	std	Y+2, r17	; 0x02
	keypad_Conf.pinNumber=C1;
     986:	80 e2       	ldi	r24, 0x20	; 32
     988:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init(Keypad_Col_port,&keypad_Conf);
     98a:	be 01       	movw	r22, r28
     98c:	6f 5f       	subi	r22, 0xFF	; 255
     98e:	7f 4f       	sbci	r23, 0xFF	; 255
     990:	83 e3       	ldi	r24, 0x33	; 51
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 c8 00 	call	0x190	; 0x190 <MCAL_GPIO_Init>
	
	keypad_Conf.GPIO_MODE=GPIO_MODE_OUTPUT;
     998:	1a 83       	std	Y+2, r17	; 0x02
	keypad_Conf.pinNumber=C2;
     99a:	80 e4       	ldi	r24, 0x40	; 64
     99c:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init(Keypad_Col_port,&keypad_Conf);
     99e:	be 01       	movw	r22, r28
     9a0:	6f 5f       	subi	r22, 0xFF	; 255
     9a2:	7f 4f       	sbci	r23, 0xFF	; 255
     9a4:	83 e3       	ldi	r24, 0x33	; 51
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 c8 00 	call	0x190	; 0x190 <MCAL_GPIO_Init>
	
	keypad_Conf.GPIO_MODE=GPIO_MODE_OUTPUT;
     9ac:	1a 83       	std	Y+2, r17	; 0x02
	keypad_Conf.pinNumber=C3;
     9ae:	80 e8       	ldi	r24, 0x80	; 128
     9b0:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init(Keypad_Col_port,&keypad_Conf);
     9b2:	be 01       	movw	r22, r28
     9b4:	6f 5f       	subi	r22, 0xFF	; 255
     9b6:	7f 4f       	sbci	r23, 0xFF	; 255
     9b8:	83 e3       	ldi	r24, 0x33	; 51
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 c8 00 	call	0x190	; 0x190 <MCAL_GPIO_Init>
	
	keypad_Conf.GPIO_MODE=GPIO_MODE_INPUT_PU;
     9c0:	12 e0       	ldi	r17, 0x02	; 2
     9c2:	1a 83       	std	Y+2, r17	; 0x02
	keypad_Conf.pinNumber=R0;
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init(Keypad_port,&keypad_Conf);
     9c8:	be 01       	movw	r22, r28
     9ca:	6f 5f       	subi	r22, 0xFF	; 255
     9cc:	7f 4f       	sbci	r23, 0xFF	; 255
     9ce:	80 e3       	ldi	r24, 0x30	; 48
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	0e 94 c8 00 	call	0x190	; 0x190 <MCAL_GPIO_Init>
	
	keypad_Conf.GPIO_MODE=GPIO_MODE_INPUT_PU;
     9d6:	1a 83       	std	Y+2, r17	; 0x02
	keypad_Conf.pinNumber=R1;
     9d8:	19 83       	std	Y+1, r17	; 0x01
	MCAL_GPIO_Init(Keypad_port,&keypad_Conf);
     9da:	be 01       	movw	r22, r28
     9dc:	6f 5f       	subi	r22, 0xFF	; 255
     9de:	7f 4f       	sbci	r23, 0xFF	; 255
     9e0:	80 e3       	ldi	r24, 0x30	; 48
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	0e 94 c8 00 	call	0x190	; 0x190 <MCAL_GPIO_Init>
	
	keypad_Conf.GPIO_MODE=GPIO_MODE_INPUT_PU;
     9e8:	1a 83       	std	Y+2, r17	; 0x02
	keypad_Conf.pinNumber=R2;
     9ea:	84 e0       	ldi	r24, 0x04	; 4
     9ec:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init(Keypad_port,&keypad_Conf);
     9ee:	be 01       	movw	r22, r28
     9f0:	6f 5f       	subi	r22, 0xFF	; 255
     9f2:	7f 4f       	sbci	r23, 0xFF	; 255
     9f4:	80 e3       	ldi	r24, 0x30	; 48
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 c8 00 	call	0x190	; 0x190 <MCAL_GPIO_Init>
	
	keypad_Conf.GPIO_MODE=GPIO_MODE_INPUT_PU;
     9fc:	1a 83       	std	Y+2, r17	; 0x02
	keypad_Conf.pinNumber=R3;
     9fe:	88 e0       	ldi	r24, 0x08	; 8
     a00:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init(Keypad_port,&keypad_Conf);
     a02:	be 01       	movw	r22, r28
     a04:	6f 5f       	subi	r22, 0xFF	; 255
     a06:	7f 4f       	sbci	r23, 0xFF	; 255
     a08:	80 e3       	ldi	r24, 0x30	; 48
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	0e 94 c8 00 	call	0x190	; 0x190 <MCAL_GPIO_Init>
	
}
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	1f 91       	pop	r17
     a1a:	08 95       	ret

00000a1c <keypad_getkey>:

char keypad_getkey(void)
{
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
	int i,j;
	for(i=0;i<4;i++)
     a24:	00 e0       	ldi	r16, 0x00	; 0
     a26:	10 e0       	ldi	r17, 0x00	; 0
     a28:	5a c0       	rjmp	.+180    	; 0xade <keypad_getkey+0xc2>
	{
		MCAL_GPIO_WritePin(Keypad_Col_port,C0,GPIO_PIN_SET);
     a2a:	41 e0       	ldi	r20, 0x01	; 1
     a2c:	60 e1       	ldi	r22, 0x10	; 16
     a2e:	83 e3       	ldi	r24, 0x33	; 51
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(Keypad_Col_port,C1,GPIO_PIN_SET);
     a36:	41 e0       	ldi	r20, 0x01	; 1
     a38:	60 e2       	ldi	r22, 0x20	; 32
     a3a:	83 e3       	ldi	r24, 0x33	; 51
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(Keypad_Col_port,C2,GPIO_PIN_SET);
     a42:	41 e0       	ldi	r20, 0x01	; 1
     a44:	60 e4       	ldi	r22, 0x40	; 64
     a46:	83 e3       	ldi	r24, 0x33	; 51
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(Keypad_Col_port,C3,GPIO_PIN_SET);
     a4e:	41 e0       	ldi	r20, 0x01	; 1
     a50:	60 e8       	ldi	r22, 0x80	; 128
     a52:	83 e3       	ldi	r24, 0x33	; 51
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(Keypad_Col_port,Keypad_Col[i],GPIO_PIN_RESET);
     a5a:	f8 01       	movw	r30, r16
     a5c:	ee 0f       	add	r30, r30
     a5e:	ff 1f       	adc	r31, r31
     a60:	e0 5a       	subi	r30, 0xA0	; 160
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	60 81       	ld	r22, Z
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	83 e3       	ldi	r24, 0x33	; 51
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePin>
		for(j=0;j<4;j++)
     a70:	c0 e0       	ldi	r28, 0x00	; 0
     a72:	d0 e0       	ldi	r29, 0x00	; 0
     a74:	2f c0       	rjmp	.+94     	; 0xad4 <keypad_getkey+0xb8>
		{
			if(!(((uint8_t)MCAL_GPIO_ReadPort(Keypad_port)) & (1<<Keypad_Read_Row[j])))
     a76:	80 e3       	ldi	r24, 0x30	; 48
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <MCAL_GPIO_ReadPort>
     a7e:	fe 01       	movw	r30, r28
     a80:	ee 0f       	add	r30, r30
     a82:	ff 1f       	adc	r31, r31
     a84:	e8 59       	subi	r30, 0x98	; 152
     a86:	ff 4f       	sbci	r31, 0xFF	; 255
     a88:	99 27       	eor	r25, r25
     a8a:	00 80       	ld	r0, Z
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <keypad_getkey+0x76>
     a8e:	95 95       	asr	r25
     a90:	87 95       	ror	r24
     a92:	0a 94       	dec	r0
     a94:	e2 f7       	brpl	.-8      	; 0xa8e <keypad_getkey+0x72>
     a96:	80 fd       	sbrc	r24, 0
     a98:	1c c0       	rjmp	.+56     	; 0xad2 <keypad_getkey+0xb6>
			{
				while(!(((uint8_t)MCAL_GPIO_ReadPort(Keypad_port)) & (1<<Keypad_Read_Row[j])));
     a9a:	80 e3       	ldi	r24, 0x30	; 48
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <MCAL_GPIO_ReadPort>
     aa2:	fe 01       	movw	r30, r28
     aa4:	ee 0f       	add	r30, r30
     aa6:	ff 1f       	adc	r31, r31
     aa8:	e8 59       	subi	r30, 0x98	; 152
     aaa:	ff 4f       	sbci	r31, 0xFF	; 255
     aac:	99 27       	eor	r25, r25
     aae:	00 80       	ld	r0, Z
     ab0:	02 c0       	rjmp	.+4      	; 0xab6 <keypad_getkey+0x9a>
     ab2:	95 95       	asr	r25
     ab4:	87 95       	ror	r24
     ab6:	0a 94       	dec	r0
     ab8:	e2 f7       	brpl	.-8      	; 0xab2 <keypad_getkey+0x96>
     aba:	80 ff       	sbrs	r24, 0
     abc:	ee cf       	rjmp	.-36     	; 0xa9a <keypad_getkey+0x7e>
				return keypad_NUM[j][i];
     abe:	cc 0f       	add	r28, r28
     ac0:	dd 1f       	adc	r29, r29
     ac2:	cc 0f       	add	r28, r28
     ac4:	dd 1f       	adc	r29, r29
     ac6:	c0 59       	subi	r28, 0x90	; 144
     ac8:	df 4f       	sbci	r29, 0xFF	; 255
     aca:	c0 0f       	add	r28, r16
     acc:	d1 1f       	adc	r29, r17
     ace:	88 81       	ld	r24, Y
     ad0:	0b c0       	rjmp	.+22     	; 0xae8 <keypad_getkey+0xcc>
		MCAL_GPIO_WritePin(Keypad_Col_port,C0,GPIO_PIN_SET);
		MCAL_GPIO_WritePin(Keypad_Col_port,C1,GPIO_PIN_SET);
		MCAL_GPIO_WritePin(Keypad_Col_port,C2,GPIO_PIN_SET);
		MCAL_GPIO_WritePin(Keypad_Col_port,C3,GPIO_PIN_SET);
		MCAL_GPIO_WritePin(Keypad_Col_port,Keypad_Col[i],GPIO_PIN_RESET);
		for(j=0;j<4;j++)
     ad2:	21 96       	adiw	r28, 0x01	; 1
     ad4:	c4 30       	cpi	r28, 0x04	; 4
     ad6:	d1 05       	cpc	r29, r1
     ad8:	74 f2       	brlt	.-100    	; 0xa76 <keypad_getkey+0x5a>
}

char keypad_getkey(void)
{
	int i,j;
	for(i=0;i<4;i++)
     ada:	0f 5f       	subi	r16, 0xFF	; 255
     adc:	1f 4f       	sbci	r17, 0xFF	; 255
     ade:	04 30       	cpi	r16, 0x04	; 4
     ae0:	11 05       	cpc	r17, r1
     ae2:	0c f4       	brge	.+2      	; 0xae6 <keypad_getkey+0xca>
     ae4:	a2 cf       	rjmp	.-188    	; 0xa2a <keypad_getkey+0xe>
				while(!(((uint8_t)MCAL_GPIO_ReadPort(Keypad_port)) & (1<<Keypad_Read_Row[j])));
				return keypad_NUM[j][i];
			}
		}
	}
	return 'n';
     ae6:	8e e6       	ldi	r24, 0x6E	; 110
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	1f 91       	pop	r17
     aee:	0f 91       	pop	r16
     af0:	08 95       	ret

00000af2 <LCD_cmd>:
	_delay_ms(2);
#endif
}

void LCD_cmd( unsigned char cmd )
{
     af2:	cf 93       	push	r28
     af4:	c8 2f       	mov	r28, r24
	_delay_us(1);       
	MCAL_GPIO_WritePin( lcd_control_Port , en , GPIO_PIN_RESET ) ;               
	_delay_us(200);
#endif
#ifdef _4_bit_mode
	MCAL_GPIO_WritePort(lcd_Data_Port, (cmd & 0XF0));
     af6:	68 2f       	mov	r22, r24
     af8:	60 7f       	andi	r22, 0xF0	; 240
     afa:	89 e3       	ldi	r24, 0x39	; 57
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	0e 94 03 01 	call	0x206	; 0x206 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(lcd_control_Port,rs,GPIO_PIN_RESET);            // rs=0 i.e select command reg
     b02:	40 e0       	ldi	r20, 0x00	; 0
     b04:	62 e0       	ldi	r22, 0x02	; 2
     b06:	86 e3       	ldi	r24, 0x36	; 54
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,RW,GPIO_PIN_RESET);					 // R/W=0 i.e MODE Write
     b0e:	40 e0       	ldi	r20, 0x00	; 0
     b10:	68 e0       	ldi	r22, 0x08	; 8
     b12:	86 e3       	ldi	r24, 0x36	; 54
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_SET);					// give high pulse to enable pin
     b1a:	41 e0       	ldi	r20, 0x01	; 1
     b1c:	64 e0       	ldi	r22, 0x04	; 4
     b1e:	86 e3       	ldi	r24, 0x36	; 54
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b26:	00 00       	nop
	_delay_us(1);
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_RESET);				 // give low pulse to enable pin
     b28:	40 e0       	ldi	r20, 0x00	; 0
     b2a:	64 e0       	ldi	r22, 0x04	; 4
     b2c:	86 e3       	ldi	r24, 0x36	; 54
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePin>
     b34:	82 e4       	ldi	r24, 0x42	; 66
     b36:	8a 95       	dec	r24
     b38:	f1 f7       	brne	.-4      	; 0xb36 <LCD_cmd+0x44>
     b3a:	00 c0       	rjmp	.+0      	; 0xb3c <LCD_cmd+0x4a>
	_delay_us(200);
	MCAL_GPIO_WritePort(lcd_Data_Port, ( cmd & 0X0F) << 4);               //sending lower nibble of 8 bit 
     b3c:	90 e1       	ldi	r25, 0x10	; 16
     b3e:	c9 9f       	mul	r28, r25
     b40:	b0 01       	movw	r22, r0
     b42:	11 24       	eor	r1, r1
     b44:	89 e3       	ldi	r24, 0x39	; 57
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	0e 94 03 01 	call	0x206	; 0x206 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(lcd_control_Port,rs,GPIO_PIN_RESET);            // rs=0 i.e select command reg
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	62 e0       	ldi	r22, 0x02	; 2
     b50:	86 e3       	ldi	r24, 0x36	; 54
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,RW,GPIO_PIN_RESET);					 // R/W=0 i.e MODE Write
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	68 e0       	ldi	r22, 0x08	; 8
     b5c:	86 e3       	ldi	r24, 0x36	; 54
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_SET);					// give high pulse to enable pin
     b64:	41 e0       	ldi	r20, 0x01	; 1
     b66:	64 e0       	ldi	r22, 0x04	; 4
     b68:	86 e3       	ldi	r24, 0x36	; 54
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePin>
     b70:	00 00       	nop
	_delay_us(1);
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_RESET);				 // give low pulse to enable pin
     b72:	40 e0       	ldi	r20, 0x00	; 0
     b74:	64 e0       	ldi	r22, 0x04	; 4
     b76:	86 e3       	ldi	r24, 0x36	; 54
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b7e:	83 ef       	ldi	r24, 0xF3	; 243
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	f1 f7       	brne	.-4      	; 0xb82 <LCD_cmd+0x90>
     b86:	00 c0       	rjmp	.+0      	; 0xb88 <LCD_cmd+0x96>
     b88:	00 00       	nop
	_delay_ms(2);
#endif
}
     b8a:	cf 91       	pop	r28
     b8c:	08 95       	ret

00000b8e <LCD_init>:
#include "LCD.h"

#define _4_bit_mode

void LCD_init(void)
{
     b8e:	ef 92       	push	r14
     b90:	ff 92       	push	r15
     b92:	0f 93       	push	r16
     b94:	1f 93       	push	r17
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	00 d0       	rcall	.+0      	; 0xb9c <LCD_init+0xe>
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	GPIO_Pinconfig_t config ;
		
	// set port lcd_data as output
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
     ba0:	13 e0       	ldi	r17, 0x03	; 3
     ba2:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_0 ;
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
     ba8:	be 01       	movw	r22, r28
     baa:	6f 5f       	subi	r22, 0xFF	; 255
     bac:	7f 4f       	sbci	r23, 0xFF	; 255
     bae:	89 e3       	ldi	r24, 0x39	; 57
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	0e 94 c8 00 	call	0x190	; 0x190 <MCAL_GPIO_Init>
		
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
     bb6:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_1 ;
     bb8:	68 94       	set
     bba:	ff 24       	eor	r15, r15
     bbc:	f1 f8       	bld	r15, 1
     bbe:	f9 82       	std	Y+1, r15	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
     bc0:	be 01       	movw	r22, r28
     bc2:	6f 5f       	subi	r22, 0xFF	; 255
     bc4:	7f 4f       	sbci	r23, 0xFF	; 255
     bc6:	89 e3       	ldi	r24, 0x39	; 57
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	0e 94 c8 00 	call	0x190	; 0x190 <MCAL_GPIO_Init>
				
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
     bce:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_2 ;
     bd0:	68 94       	set
     bd2:	ee 24       	eor	r14, r14
     bd4:	e2 f8       	bld	r14, 2
     bd6:	e9 82       	std	Y+1, r14	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
     bd8:	be 01       	movw	r22, r28
     bda:	6f 5f       	subi	r22, 0xFF	; 255
     bdc:	7f 4f       	sbci	r23, 0xFF	; 255
     bde:	89 e3       	ldi	r24, 0x39	; 57
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	0e 94 c8 00 	call	0x190	; 0x190 <MCAL_GPIO_Init>
						
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
     be6:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_3 ;
     be8:	08 e0       	ldi	r16, 0x08	; 8
     bea:	09 83       	std	Y+1, r16	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
     bec:	be 01       	movw	r22, r28
     bee:	6f 5f       	subi	r22, 0xFF	; 255
     bf0:	7f 4f       	sbci	r23, 0xFF	; 255
     bf2:	89 e3       	ldi	r24, 0x39	; 57
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	0e 94 c8 00 	call	0x190	; 0x190 <MCAL_GPIO_Init>
								
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
     bfa:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_4 ;
     bfc:	80 e1       	ldi	r24, 0x10	; 16
     bfe:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
     c00:	be 01       	movw	r22, r28
     c02:	6f 5f       	subi	r22, 0xFF	; 255
     c04:	7f 4f       	sbci	r23, 0xFF	; 255
     c06:	89 e3       	ldi	r24, 0x39	; 57
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 c8 00 	call	0x190	; 0x190 <MCAL_GPIO_Init>
										
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
     c0e:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_5 ;
     c10:	80 e2       	ldi	r24, 0x20	; 32
     c12:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
     c14:	be 01       	movw	r22, r28
     c16:	6f 5f       	subi	r22, 0xFF	; 255
     c18:	7f 4f       	sbci	r23, 0xFF	; 255
     c1a:	89 e3       	ldi	r24, 0x39	; 57
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 c8 00 	call	0x190	; 0x190 <MCAL_GPIO_Init>
												
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
     c22:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_6 ;
     c24:	80 e4       	ldi	r24, 0x40	; 64
     c26:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
     c28:	be 01       	movw	r22, r28
     c2a:	6f 5f       	subi	r22, 0xFF	; 255
     c2c:	7f 4f       	sbci	r23, 0xFF	; 255
     c2e:	89 e3       	ldi	r24, 0x39	; 57
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 c8 00 	call	0x190	; 0x190 <MCAL_GPIO_Init>
														
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
     c36:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_7 ;
     c38:	80 e8       	ldi	r24, 0x80	; 128
     c3a:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
     c3c:	be 01       	movw	r22, r28
     c3e:	6f 5f       	subi	r22, 0xFF	; 255
     c40:	7f 4f       	sbci	r23, 0xFF	; 255
     c42:	89 e3       	ldi	r24, 0x39	; 57
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 c8 00 	call	0x190	; 0x190 <MCAL_GPIO_Init>
	
	// set en rs rw as outpit
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
     c4a:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = en ;
     c4c:	e9 82       	std	Y+1, r14	; 0x01
	MCAL_GPIO_Init( lcd_control_Direction , & config ) ;
     c4e:	be 01       	movw	r22, r28
     c50:	6f 5f       	subi	r22, 0xFF	; 255
     c52:	7f 4f       	sbci	r23, 0xFF	; 255
     c54:	86 e3       	ldi	r24, 0x36	; 54
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 c8 00 	call	0x190	; 0x190 <MCAL_GPIO_Init>
	
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
     c5c:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = rs ;
     c5e:	f9 82       	std	Y+1, r15	; 0x01
	MCAL_GPIO_Init( lcd_control_Direction , & config ) ;
     c60:	be 01       	movw	r22, r28
     c62:	6f 5f       	subi	r22, 0xFF	; 255
     c64:	7f 4f       	sbci	r23, 0xFF	; 255
     c66:	86 e3       	ldi	r24, 0x36	; 54
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	0e 94 c8 00 	call	0x190	; 0x190 <MCAL_GPIO_Init>
	
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
     c6e:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = RW ;
     c70:	09 83       	std	Y+1, r16	; 0x01
	MCAL_GPIO_Init( lcd_control_Direction , & config ) ;
     c72:	be 01       	movw	r22, r28
     c74:	6f 5f       	subi	r22, 0xFF	; 255
     c76:	7f 4f       	sbci	r23, 0xFF	; 255
     c78:	86 e3       	ldi	r24, 0x36	; 54
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 c8 00 	call	0x190	; 0x190 <MCAL_GPIO_Init>
     c80:	87 e8       	ldi	r24, 0x87	; 135
     c82:	93 e1       	ldi	r25, 0x13	; 19
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	f1 f7       	brne	.-4      	; 0xc84 <LCD_init+0xf6>
     c88:	00 c0       	rjmp	.+0      	; 0xc8a <LCD_init+0xfc>
     c8a:	00 00       	nop
	LCD_cmd(Entry_Mode);                        // take cursor to next position "shift cursor to right"
	LCD_cmd(Clear_Display);                    // Clear display screen
	_delay_ms(2);
#endif
#ifdef _4_bit_mode
	LCD_cmd(0x02);                // send for 4 bit initialization of LCD "shift cursor to left"
     c8c:	82 e0       	ldi	r24, 0x02	; 2
     c8e:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCD_cmd>
	LCD_cmd(_2L_4b);                              // 2 line 5*7 matrix in 4-bit mode
     c92:	88 e2       	ldi	r24, 0x28	; 40
     c94:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCD_cmd>
	LCD_cmd(Entry_Mode);                        // take cursor to next position "shift cursor to right"
     c98:	86 e0       	ldi	r24, 0x06	; 6
     c9a:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCD_cmd>
	LCD_cmd(beginning_of_the_first_line);
     c9e:	80 e8       	ldi	r24, 0x80	; 128
     ca0:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCD_cmd>
	LCD_cmd(Display_on_Cursor_off);              // Display on cursor off
     ca4:	8c e0       	ldi	r24, 0x0C	; 12
     ca6:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCD_cmd>
	LCD_cmd(Clear_Display);                    // Clear display screen
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCD_cmd>
     cb0:	83 ef       	ldi	r24, 0xF3	; 243
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	f1 f7       	brne	.-4      	; 0xcb4 <LCD_init+0x126>
     cb8:	00 c0       	rjmp	.+0      	; 0xcba <LCD_init+0x12c>
     cba:	00 00       	nop
	_delay_ms(2);
#endif
}
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	ff 90       	pop	r15
     cca:	ef 90       	pop	r14
     ccc:	08 95       	ret

00000cce <lcd_Clear>:
#endif
}

void lcd_Clear()
{
	LCD_cmd (0x01);                   // send hex 01 to Clear display
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCD_cmd>
     cd4:	83 ef       	ldi	r24, 0xF3	; 243
     cd6:	91 e0       	ldi	r25, 0x01	; 1
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	f1 f7       	brne	.-4      	; 0xcd8 <lcd_Clear+0xa>
     cdc:	00 c0       	rjmp	.+0      	; 0xcde <lcd_Clear+0x10>
     cde:	00 00       	nop
	_delay_ms(2);
	LCD_cmd(0x80);                   // send hex 80 to Force Cursor to beginning of 1st line
     ce0:	80 e8       	ldi	r24, 0x80	; 128
     ce2:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCD_cmd>
     ce6:	08 95       	ret

00000ce8 <GOTO_XY>:
}

void GOTO_XY(unsigned char line , unsigned char posision)
{
	if (line==0)
     ce8:	81 11       	cpse	r24, r1
     cea:	07 c0       	rjmp	.+14     	; 0xcfa <GOTO_XY+0x12>
	{
		if(posision>=0 && posision<16)
     cec:	60 31       	cpi	r22, 0x10	; 16
     cee:	68 f4       	brcc	.+26     	; 0xd0a <GOTO_XY+0x22>
			LCD_cmd(0X80+posision);
     cf0:	80 e8       	ldi	r24, 0x80	; 128
     cf2:	86 0f       	add	r24, r22
     cf4:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCD_cmd>
     cf8:	08 95       	ret
	}
	else if (line==1)
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	31 f4       	brne	.+12     	; 0xd0a <GOTO_XY+0x22>
	{
		if(posision>=0 && posision<16)
     cfe:	60 31       	cpi	r22, 0x10	; 16
     d00:	20 f4       	brcc	.+8      	; 0xd0a <GOTO_XY+0x22>
			LCD_cmd(0XC0+posision);
     d02:	80 ec       	ldi	r24, 0xC0	; 192
     d04:	86 0f       	add	r24, r22
     d06:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCD_cmd>
     d0a:	08 95       	ret

00000d0c <LCD_Character>:
	}
}

void LCD_Character( unsigned char character )
{
     d0c:	cf 93       	push	r28
     d0e:	c8 2f       	mov	r28, r24
	_delay_us(1);
	MCAL_GPIO_WritePin( lcd_control_Port , en , GPIO_PIN_RESET ) ;
	_delay_ms(2);
#endif
#ifdef _4_bit_mode
	MCAL_GPIO_WritePort(lcd_Data_Port, (character & 0XF0));
     d10:	68 2f       	mov	r22, r24
     d12:	60 7f       	andi	r22, 0xF0	; 240
     d14:	89 e3       	ldi	r24, 0x39	; 57
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	0e 94 03 01 	call	0x206	; 0x206 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(lcd_control_Port,rs,GPIO_PIN_SET);            // rs=0 i.e select DATA reg
     d1c:	41 e0       	ldi	r20, 0x01	; 1
     d1e:	62 e0       	ldi	r22, 0x02	; 2
     d20:	86 e3       	ldi	r24, 0x36	; 54
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,RW,GPIO_PIN_RESET);					 // R/W=0 i.e MODE Write
     d28:	40 e0       	ldi	r20, 0x00	; 0
     d2a:	68 e0       	ldi	r22, 0x08	; 8
     d2c:	86 e3       	ldi	r24, 0x36	; 54
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_SET);					// give high pulse to enable pin
     d34:	41 e0       	ldi	r20, 0x01	; 1
     d36:	64 e0       	ldi	r22, 0x04	; 4
     d38:	86 e3       	ldi	r24, 0x36	; 54
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d40:	00 00       	nop
	_delay_us(1);
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_RESET);				 // give low pulse to enable pin
     d42:	40 e0       	ldi	r20, 0x00	; 0
     d44:	64 e0       	ldi	r22, 0x04	; 4
     d46:	86 e3       	ldi	r24, 0x36	; 54
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePin>
     d4e:	82 e4       	ldi	r24, 0x42	; 66
     d50:	8a 95       	dec	r24
     d52:	f1 f7       	brne	.-4      	; 0xd50 <LCD_Character+0x44>
     d54:	00 c0       	rjmp	.+0      	; 0xd56 <LCD_Character+0x4a>
	_delay_us(200);
	MCAL_GPIO_WritePort(lcd_Data_Port, ( character & 0X0F) << 4);               //sending lower nibble of 8 bit i.e 1byte
     d56:	90 e1       	ldi	r25, 0x10	; 16
     d58:	c9 9f       	mul	r28, r25
     d5a:	b0 01       	movw	r22, r0
     d5c:	11 24       	eor	r1, r1
     d5e:	89 e3       	ldi	r24, 0x39	; 57
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	0e 94 03 01 	call	0x206	; 0x206 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(lcd_control_Port,rs,GPIO_PIN_SET);            // rs=0 i.e select DATA reg
     d66:	41 e0       	ldi	r20, 0x01	; 1
     d68:	62 e0       	ldi	r22, 0x02	; 2
     d6a:	86 e3       	ldi	r24, 0x36	; 54
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,RW,GPIO_PIN_RESET);					 // R/W=0 i.e MODE Write
     d72:	40 e0       	ldi	r20, 0x00	; 0
     d74:	68 e0       	ldi	r22, 0x08	; 8
     d76:	86 e3       	ldi	r24, 0x36	; 54
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_SET);					// give high pulse to enable pin
     d7e:	41 e0       	ldi	r20, 0x01	; 1
     d80:	64 e0       	ldi	r22, 0x04	; 4
     d82:	86 e3       	ldi	r24, 0x36	; 54
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePin>
     d8a:	00 00       	nop
	_delay_us(1);
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_RESET);				 // give low pulse to enable pin
     d8c:	40 e0       	ldi	r20, 0x00	; 0
     d8e:	64 e0       	ldi	r22, 0x04	; 4
     d90:	86 e3       	ldi	r24, 0x36	; 54
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d98:	83 ef       	ldi	r24, 0xF3	; 243
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	f1 f7       	brne	.-4      	; 0xd9c <LCD_Character+0x90>
     da0:	00 c0       	rjmp	.+0      	; 0xda2 <LCD_Character+0x96>
     da2:	00 00       	nop
	_delay_ms(2);
#endif
}
     da4:	cf 91       	pop	r28
     da6:	08 95       	ret

00000da8 <LCD_String>:

void LCD_String (char *string)
{
     da8:	0f 93       	push	r16
     daa:	1f 93       	push	r17
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	8c 01       	movw	r16, r24
	int count=0;
     db2:	c0 e0       	ldi	r28, 0x00	; 0
     db4:	d0 e0       	ldi	r29, 0x00	; 0
	while(*string)
     db6:	21 c0       	rjmp	.+66     	; 0xdfa <LCD_String+0x52>
	{
		count++;
     db8:	21 96       	adiw	r28, 0x01	; 1
		LCD_Character(*string++);
     dba:	0f 5f       	subi	r16, 0xFF	; 255
     dbc:	1f 4f       	sbci	r17, 0xFF	; 255
     dbe:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_Character>
		if (count==16)
     dc2:	c0 31       	cpi	r28, 0x10	; 16
     dc4:	d1 05       	cpc	r29, r1
     dc6:	29 f4       	brne	.+10     	; 0xdd2 <LCD_String+0x2a>
		{
			GOTO_XY(1,0);
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	0e 94 74 06 	call	0xce8	; 0xce8 <GOTO_XY>
     dd0:	14 c0       	rjmp	.+40     	; 0xdfa <LCD_String+0x52>
		}
		else if(count==32)
     dd2:	c0 32       	cpi	r28, 0x20	; 32
     dd4:	d1 05       	cpc	r29, r1
     dd6:	89 f4       	brne	.+34     	; 0xdfa <LCD_String+0x52>
     dd8:	2f e9       	ldi	r18, 0x9F	; 159
     dda:	86 e8       	ldi	r24, 0x86	; 134
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	21 50       	subi	r18, 0x01	; 1
     de0:	80 40       	sbci	r24, 0x00	; 0
     de2:	90 40       	sbci	r25, 0x00	; 0
     de4:	e1 f7       	brne	.-8      	; 0xdde <LCD_String+0x36>
     de6:	00 c0       	rjmp	.+0      	; 0xde8 <LCD_String+0x40>
     de8:	00 00       	nop
		{
			_delay_ms(500);
			lcd_Clear();
     dea:	0e 94 67 06 	call	0xcce	; 0xcce <lcd_Clear>
			GOTO_XY(0,0);
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	0e 94 74 06 	call	0xce8	; 0xce8 <GOTO_XY>
			count=0;
     df6:	c0 e0       	ldi	r28, 0x00	; 0
     df8:	d0 e0       	ldi	r29, 0x00	; 0
}

void LCD_String (char *string)
{
	int count=0;
	while(*string)
     dfa:	f8 01       	movw	r30, r16
     dfc:	80 81       	ld	r24, Z
     dfe:	81 11       	cpse	r24, r1
     e00:	db cf       	rjmp	.-74     	; 0xdb8 <LCD_String+0x10>
			lcd_Clear();
			GOTO_XY(0,0);
			count=0;
		}
	}
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	0f 91       	pop	r16
     e0a:	08 95       	ret

00000e0c <Servo_Init>:
* @brief		  	-Initializes the TIMER1  to act in mode Fast PWM at 50HZ Output and F_CPU / 64 Input 
* @retval 			-none
* Note				-Disable all pointers
*/
void Servo_Init(void) 
{
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	62 97       	sbiw	r28, 0x12	; 18
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
	PWM_config_t PWM_Config ;
	PWM_Config.Compare_Value_CH_B = 0 ;
     e20:	1a 86       	std	Y+10, r1	; 0x0a
     e22:	19 86       	std	Y+9, r1	; 0x09
	PWM_Config.Compare_Value_CH_A = 0 ;
     e24:	18 86       	std	Y+8, r1	; 0x08
     e26:	1f 82       	std	Y+7, r1	; 0x07
	PWM_Config.Output_Compare_pin_B = PWM_Output_Compare_pin_B_Disable ;
     e28:	1a 82       	std	Y+2, r1	; 0x02
	PWM_Config.Output_Compare_pin_A = PWM_Output_Compare_pin_A_Clear_At_Compare_Value_Set_At_TOP ;
     e2a:	80 e8       	ldi	r24, 0x80	; 128
     e2c:	89 83       	std	Y+1, r24	; 0x01
	PWM_Config.Clock_Source = PWM_Clock_Source_clk_64 ;
     e2e:	83 e0       	ldi	r24, 0x03	; 3
     e30:	8b 83       	std	Y+3, r24	; 0x03
	PWM_Config.TOP_Value = (uint16_t)((F_CPU/(64*50))-1) ;
     e32:	87 e3       	ldi	r24, 0x37	; 55
     e34:	91 e0       	ldi	r25, 0x01	; 1
     e36:	9c 87       	std	Y+12, r25	; 0x0c
     e38:	8b 87       	std	Y+11, r24	; 0x0b
	PWM_Config.OCIE1A_EN = PWM_OCIE1A_ENABLE_Disable ;
     e3a:	1d 82       	std	Y+5, r1	; 0x05
	PWM_Config.OCIE1B_EN = PWM_OCIE1B_ENABLE_Disable ;
     e3c:	1e 82       	std	Y+6, r1	; 0x06
	PWM_Config.TOIE1_EN = PWM_TOIE1_ENABLE_Disable ;
     e3e:	1c 82       	std	Y+4, r1	; 0x04
	PWM_Config.P_OCIE1A_CALL = NULL ;
     e40:	18 8a       	std	Y+16, r1	; 0x10
     e42:	1f 86       	std	Y+15, r1	; 0x0f
	PWM_Config.P_OCIE1B_CALL = NULL ;
     e44:	1a 8a       	std	Y+18, r1	; 0x12
     e46:	19 8a       	std	Y+17, r1	; 0x11
	PWM_Config.P_TOIE1_CALL = NULL ;
     e48:	1e 86       	std	Y+14, r1	; 0x0e
     e4a:	1d 86       	std	Y+13, r1	; 0x0d
	MCAL_PWM_Init(&PWM_Config) ;
     e4c:	ce 01       	movw	r24, r28
     e4e:	01 96       	adiw	r24, 0x01	; 1
     e50:	0e 94 3e 02 	call	0x47c	; 0x47c <MCAL_PWM_Init>
}
     e54:	62 96       	adiw	r28, 0x12	; 18
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	08 95       	ret

00000e66 <My_Servo>:
* Note				-none
*/
void My_Servo(uint8_t angle) 
{
	uint16_t Compare_Value = 0;
	Compare_Value = Get_Compare_Value(angle) ;
     e66:	68 2f       	mov	r22, r24
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 16 0a 	call	0x142c	; 0x142c <__floatsisf>
     e72:	2c ed       	ldi	r18, 0xDC	; 220
     e74:	39 e6       	ldi	r19, 0x69	; 105
     e76:	4a eb       	ldi	r20, 0xBA	; 186
     e78:	56 e3       	ldi	r21, 0x36	; 54
     e7a:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     e7e:	2f e6       	ldi	r18, 0x6F	; 111
     e80:	32 e1       	ldi	r19, 0x12	; 18
     e82:	43 e8       	ldi	r20, 0x83	; 131
     e84:	5a e3       	ldi	r21, 0x3A	; 58
     e86:	0e 94 07 09 	call	0x120e	; 0x120e <__addsf3>
     e8a:	2d eb       	ldi	r18, 0xBD	; 189
     e8c:	37 e3       	ldi	r19, 0x37	; 55
     e8e:	46 e8       	ldi	r20, 0x86	; 134
     e90:	58 e3       	ldi	r21, 0x38	; 56
     e92:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__divsf3>
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	40 e0       	ldi	r20, 0x00	; 0
     e9c:	5f e3       	ldi	r21, 0x3F	; 63
     e9e:	0e 94 06 09 	call	0x120c	; 0x120c <__subsf3>
     ea2:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__fixunssfsi>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
	MCAL_PWM_Set_Compare_Value(Compare_Value,A) ;
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	0e 94 bd 02 	call	0x57a	; 0x57a <MCAL_PWM_Set_Compare_Value>
     eb0:	08 95       	ret

00000eb2 <GPIO_INIT>:
uint8_t Data2[4]= {0x1,0x1,0x1,0x1};
uint8_t key_pressed;
uint8_t number_attempts=3 ,Select=1;

void GPIO_INIT(void)
{
     eb2:	1f 93       	push	r17
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	00 d0       	rcall	.+0      	; 0xeba <GPIO_INIT+0x8>
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
	GPIO_Pinconfig_t keypad_Conf ;
	keypad_Conf.GPIO_MODE=GPIO_MODE_OUTPUT;
     ebe:	13 e0       	ldi	r17, 0x03	; 3
     ec0:	1a 83       	std	Y+2, r17	; 0x02
	keypad_Conf.pinNumber=GPIO_PIN_4;
     ec2:	80 e1       	ldi	r24, 0x10	; 16
     ec4:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init(GPIOB,&keypad_Conf);
     ec6:	be 01       	movw	r22, r28
     ec8:	6f 5f       	subi	r22, 0xFF	; 255
     eca:	7f 4f       	sbci	r23, 0xFF	; 255
     ecc:	86 e3       	ldi	r24, 0x36	; 54
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 c8 00 	call	0x190	; 0x190 <MCAL_GPIO_Init>
		
	keypad_Conf.GPIO_MODE=GPIO_MODE_OUTPUT;
     ed4:	1a 83       	std	Y+2, r17	; 0x02
	keypad_Conf.pinNumber=GPIO_PIN_5;
     ed6:	80 e2       	ldi	r24, 0x20	; 32
     ed8:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init(GPIOB,&keypad_Conf);
     eda:	be 01       	movw	r22, r28
     edc:	6f 5f       	subi	r22, 0xFF	; 255
     ede:	7f 4f       	sbci	r23, 0xFF	; 255
     ee0:	86 e3       	ldi	r24, 0x36	; 54
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 c8 00 	call	0x190	; 0x190 <MCAL_GPIO_Init>
}
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	08 95       	ret

00000ef4 <Get_pass>:

//Receiving the password from the user using the keypad
void Get_pass(void)
{
	key_pressed=keypad_getkey();
     ef4:	0e 94 0e 05 	call	0xa1c	; 0xa1c <keypad_getkey>
     ef8:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <key_pressed>
	while(key_pressed=='n')
     efc:	04 c0       	rjmp	.+8      	; 0xf06 <Get_pass+0x12>
	{
		key_pressed=keypad_getkey();
     efe:	0e 94 0e 05 	call	0xa1c	; 0xa1c <keypad_getkey>
     f02:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <key_pressed>

//Receiving the password from the user using the keypad
void Get_pass(void)
{
	key_pressed=keypad_getkey();
	while(key_pressed=='n')
     f06:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <key_pressed>
     f0a:	8e 36       	cpi	r24, 0x6E	; 110
     f0c:	c1 f3       	breq	.-16     	; 0xefe <Get_pass+0xa>
	{
		key_pressed=keypad_getkey();
	}
	Data1[0]=key_pressed;
     f0e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <Data1>
	LCD_Character('*');
     f12:	8a e2       	ldi	r24, 0x2A	; 42
     f14:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_Character>
	key_pressed=keypad_getkey();
     f18:	0e 94 0e 05 	call	0xa1c	; 0xa1c <keypad_getkey>
     f1c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <key_pressed>
	while(key_pressed=='n')
     f20:	04 c0       	rjmp	.+8      	; 0xf2a <Get_pass+0x36>
	{
		key_pressed=keypad_getkey();
     f22:	0e 94 0e 05 	call	0xa1c	; 0xa1c <keypad_getkey>
     f26:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <key_pressed>
		key_pressed=keypad_getkey();
	}
	Data1[0]=key_pressed;
	LCD_Character('*');
	key_pressed=keypad_getkey();
	while(key_pressed=='n')
     f2a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <key_pressed>
     f2e:	8e 36       	cpi	r24, 0x6E	; 110
     f30:	c1 f3       	breq	.-16     	; 0xf22 <Get_pass+0x2e>
	{
		key_pressed=keypad_getkey();
	}
	Data1[1]=key_pressed;
     f32:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <Data1+0x1>
	LCD_Character('*');
     f36:	8a e2       	ldi	r24, 0x2A	; 42
     f38:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_Character>
	key_pressed=keypad_getkey();
     f3c:	0e 94 0e 05 	call	0xa1c	; 0xa1c <keypad_getkey>
     f40:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <key_pressed>
	while(key_pressed=='n')
     f44:	04 c0       	rjmp	.+8      	; 0xf4e <Get_pass+0x5a>
	{
		key_pressed=keypad_getkey();
     f46:	0e 94 0e 05 	call	0xa1c	; 0xa1c <keypad_getkey>
     f4a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <key_pressed>
		key_pressed=keypad_getkey();
	}
	Data1[1]=key_pressed;
	LCD_Character('*');
	key_pressed=keypad_getkey();
	while(key_pressed=='n')
     f4e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <key_pressed>
     f52:	8e 36       	cpi	r24, 0x6E	; 110
     f54:	c1 f3       	breq	.-16     	; 0xf46 <Get_pass+0x52>
	{
		key_pressed=keypad_getkey();
	}
	Data1[2]=key_pressed;
     f56:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <Data1+0x2>
	LCD_Character('*');
     f5a:	8a e2       	ldi	r24, 0x2A	; 42
     f5c:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_Character>
	key_pressed=keypad_getkey();
     f60:	0e 94 0e 05 	call	0xa1c	; 0xa1c <keypad_getkey>
     f64:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <key_pressed>
	while(key_pressed=='n')
     f68:	04 c0       	rjmp	.+8      	; 0xf72 <Get_pass+0x7e>
	{
		key_pressed=keypad_getkey();
     f6a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <keypad_getkey>
     f6e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <key_pressed>
		key_pressed=keypad_getkey();
	}
	Data1[2]=key_pressed;
	LCD_Character('*');
	key_pressed=keypad_getkey();
	while(key_pressed=='n')
     f72:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <key_pressed>
     f76:	8e 36       	cpi	r24, 0x6E	; 110
     f78:	c1 f3       	breq	.-16     	; 0xf6a <Get_pass+0x76>
	{
		key_pressed=keypad_getkey();
	}
	Data1[3]=key_pressed;
     f7a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <Data1+0x3>
	LCD_Character('*');
     f7e:	8a e2       	ldi	r24, 0x2A	; 42
     f80:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_Character>
	lcd_Clear();
     f84:	0e 94 67 06 	call	0xcce	; 0xcce <lcd_Clear>
     f88:	08 95       	ret

00000f8a <main>:


int main(void)
{
	//initialization GPIO , WDT , EEPROM , I2C , LCD , KEYPAD , SERVO , 
	MCAL_WDT_OFF();
     f8a:	0e 94 3c 04 	call	0x878	; 0x878 <MCAL_WDT_OFF>
	MCAL_WDT_Init(WDT_Wait_Time_2200ms);
     f8e:	87 e0       	ldi	r24, 0x07	; 7
     f90:	0e 94 36 04 	call	0x86c	; 0x86c <MCAL_WDT_Init>
	EEPROM_Init();
     f94:	0e 94 40 04 	call	0x880	; 0x880 <EEPROM_Init>
	keypad_init();
     f98:	0e 94 b1 04 	call	0x962	; 0x962 <keypad_init>
	LCD_init();
     f9c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <LCD_init>
	Servo_Init();
     fa0:	0e 94 06 07 	call	0xe0c	; 0xe0c <Servo_Init>
	GPIO_INIT();
     fa4:	0e 94 59 07 	call	0xeb2	; 0xeb2 <GPIO_INIT>
     fa8:	2f e9       	ldi	r18, 0x9F	; 159
     faa:	86 e8       	ldi	r24, 0x86	; 134
     fac:	91 e0       	ldi	r25, 0x01	; 1
     fae:	21 50       	subi	r18, 0x01	; 1
     fb0:	80 40       	sbci	r24, 0x00	; 0
     fb2:	90 40       	sbci	r25, 0x00	; 0
     fb4:	e1 f7       	brne	.-8      	; 0xfae <main+0x24>
     fb6:	00 c0       	rjmp	.+0      	; 0xfb8 <main+0x2e>
     fb8:	00 00       	nop
	_delay_ms(500);
	//Read the saved password inside the EEPROM
	EEPROM_Read_Data(0x0000, Data2, 4);
     fba:	44 e0       	ldi	r20, 0x04	; 4
     fbc:	62 e8       	ldi	r22, 0x82	; 130
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	0e 94 90 04 	call	0x920	; 0x920 <EEPROM_Read_Data>
	//The function is called when the system is running for the first time to set the password
	if (Data2[0]==0XFF && Data2[1]==0XFF)
     fc8:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <Data2>
     fcc:	8f 3f       	cpi	r24, 0xFF	; 255
     fce:	59 f5       	brne	.+86     	; 0x1026 <main+0x9c>
     fd0:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <Data2+0x1>
     fd4:	8f 3f       	cpi	r24, 0xFF	; 255
     fd6:	39 f5       	brne	.+78     	; 0x1026 <main+0x9c>
	{
		LCD_String("Please enter a  new password");
     fd8:	86 e8       	ldi	r24, 0x86	; 134
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 d4 06 	call	0xda8	; 0xda8 <LCD_String>
     fe0:	2f e3       	ldi	r18, 0x3F	; 63
     fe2:	8d e0       	ldi	r24, 0x0D	; 13
     fe4:	93 e0       	ldi	r25, 0x03	; 3
     fe6:	21 50       	subi	r18, 0x01	; 1
     fe8:	80 40       	sbci	r24, 0x00	; 0
     fea:	90 40       	sbci	r25, 0x00	; 0
     fec:	e1 f7       	brne	.-8      	; 0xfe6 <main+0x5c>
     fee:	00 c0       	rjmp	.+0      	; 0xff0 <main+0x66>
     ff0:	00 00       	nop
		_delay_ms(1000);
		lcd_Clear();
     ff2:	0e 94 67 06 	call	0xcce	; 0xcce <lcd_Clear>
		Get_pass();
     ff6:	0e 94 7a 07 	call	0xef4	; 0xef4 <Get_pass>
		EEPROM_Write_Data(0x0000, Data1, 4);
     ffa:	44 e0       	ldi	r20, 0x04	; 4
     ffc:	6c e1       	ldi	r22, 0x1C	; 28
     ffe:	71 e0       	ldi	r23, 0x01	; 1
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <EEPROM_Write_Data>
		LCD_String("Welcome");
    1008:	83 ea       	ldi	r24, 0xA3	; 163
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 d4 06 	call	0xda8	; 0xda8 <LCD_String>
    1010:	2f e3       	ldi	r18, 0x3F	; 63
    1012:	8d e0       	ldi	r24, 0x0D	; 13
    1014:	93 e0       	ldi	r25, 0x03	; 3
    1016:	21 50       	subi	r18, 0x01	; 1
    1018:	80 40       	sbci	r24, 0x00	; 0
    101a:	90 40       	sbci	r25, 0x00	; 0
    101c:	e1 f7       	brne	.-8      	; 0x1016 <main+0x8c>
    101e:	00 c0       	rjmp	.+0      	; 0x1020 <main+0x96>
    1020:	00 00       	nop
		_delay_ms(1000);
		lcd_Clear();
    1022:	0e 94 67 06 	call	0xcce	; 0xcce <lcd_Clear>
	}

    while (1) 
    {
		//Set the number of attempts allowed each time(3)
		number_attempts=3;
    1026:	83 e0       	ldi	r24, 0x03	; 3
    1028:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <number_attempts>
		//Read the saved password inside the EEPROM
		EEPROM_Read_Data(0x0000, Data2, 4);
    102c:	44 e0       	ldi	r20, 0x04	; 4
    102e:	62 e8       	ldi	r22, 0x82	; 130
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 90 04 	call	0x920	; 0x920 <EEPROM_Read_Data>
		LCD_String("Please enter a  password");
    103a:	8b ea       	ldi	r24, 0xAB	; 171
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 d4 06 	call	0xda8	; 0xda8 <LCD_String>
    1042:	2f e3       	ldi	r18, 0x3F	; 63
    1044:	8d e0       	ldi	r24, 0x0D	; 13
    1046:	93 e0       	ldi	r25, 0x03	; 3
    1048:	21 50       	subi	r18, 0x01	; 1
    104a:	80 40       	sbci	r24, 0x00	; 0
    104c:	90 40       	sbci	r25, 0x00	; 0
    104e:	e1 f7       	brne	.-8      	; 0x1048 <main+0xbe>
    1050:	00 c0       	rjmp	.+0      	; 0x1052 <main+0xc8>
    1052:	00 00       	nop
		_delay_ms(1000);
		lcd_Clear();
    1054:	0e 94 67 06 	call	0xcce	; 0xcce <lcd_Clear>
		Get_pass();
    1058:	0e 94 7a 07 	call	0xef4	; 0xef4 <Get_pass>
		//Compare the user password with the one stored before 
		while(number_attempts)
    105c:	71 c0       	rjmp	.+226    	; 0x1140 <main+0x1b6>
		{
			//When a valid password is entered, the number_attempts is set to zero and the programs are completed
			if (Data2[0]==Data1[0] && Data2[1]==Data1[1] && Data2[2]==Data1[2] && Data2[3]==Data1[3])
    105e:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <Data2>
    1062:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <Data1>
    1066:	29 13       	cpse	r18, r25
    1068:	24 c0       	rjmp	.+72     	; 0x10b2 <main+0x128>
    106a:	20 91 83 00 	lds	r18, 0x0083	; 0x800083 <Data2+0x1>
    106e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Data1+0x1>
    1072:	29 13       	cpse	r18, r25
    1074:	1e c0       	rjmp	.+60     	; 0x10b2 <main+0x128>
    1076:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <Data2+0x2>
    107a:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <Data1+0x2>
    107e:	29 13       	cpse	r18, r25
    1080:	18 c0       	rjmp	.+48     	; 0x10b2 <main+0x128>
    1082:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <Data2+0x3>
    1086:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <Data1+0x3>
    108a:	29 13       	cpse	r18, r25
    108c:	12 c0       	rjmp	.+36     	; 0x10b2 <main+0x128>
			{
				LCD_String("correct");
    108e:	86 ec       	ldi	r24, 0xC6	; 198
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	0e 94 d4 06 	call	0xda8	; 0xda8 <LCD_String>
    1096:	2f e3       	ldi	r18, 0x3F	; 63
    1098:	8d e0       	ldi	r24, 0x0D	; 13
    109a:	93 e0       	ldi	r25, 0x03	; 3
    109c:	21 50       	subi	r18, 0x01	; 1
    109e:	80 40       	sbci	r24, 0x00	; 0
    10a0:	90 40       	sbci	r25, 0x00	; 0
    10a2:	e1 f7       	brne	.-8      	; 0x109c <main+0x112>
    10a4:	00 c0       	rjmp	.+0      	; 0x10a6 <main+0x11c>
    10a6:	00 00       	nop
				_delay_ms(1000);
				lcd_Clear();
    10a8:	0e 94 67 06 	call	0xcce	; 0xcce <lcd_Clear>
				number_attempts=0;
    10ac:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <number_attempts>
    10b0:	47 c0       	rjmp	.+142    	; 0x1140 <main+0x1b6>
			}
			//When an incorrect password is entered (3 times), the number_attempts is set to zero and WDT is activated to reboot the system after 2200 microseconds
			else
			{
				number_attempts--;
    10b2:	81 50       	subi	r24, 0x01	; 1
    10b4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <number_attempts>
				LCD_String("incorrect");
    10b8:	84 ec       	ldi	r24, 0xC4	; 196
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 d4 06 	call	0xda8	; 0xda8 <LCD_String>
    10c0:	2f e3       	ldi	r18, 0x3F	; 63
    10c2:	8d e0       	ldi	r24, 0x0D	; 13
    10c4:	93 e0       	ldi	r25, 0x03	; 3
    10c6:	21 50       	subi	r18, 0x01	; 1
    10c8:	80 40       	sbci	r24, 0x00	; 0
    10ca:	90 40       	sbci	r25, 0x00	; 0
    10cc:	e1 f7       	brne	.-8      	; 0x10c6 <main+0x13c>
    10ce:	00 c0       	rjmp	.+0      	; 0x10d0 <main+0x146>
    10d0:	00 00       	nop
				_delay_ms(1000);
				lcd_Clear();
    10d2:	0e 94 67 06 	call	0xcce	; 0xcce <lcd_Clear>
				if (number_attempts==0)
    10d6:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <number_attempts>
    10da:	81 11       	cpse	r24, r1
    10dc:	20 c0       	rjmp	.+64     	; 0x111e <main+0x194>
				{
					MCAL_WDT_ON();
    10de:	0e 94 38 04 	call	0x870	; 0x870 <MCAL_WDT_ON>
					MCAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
    10e2:	41 e0       	ldi	r20, 0x01	; 1
    10e4:	60 e2       	ldi	r22, 0x20	; 32
    10e6:	86 e3       	ldi	r24, 0x36	; 54
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePin>
					LCD_String("please wait");
    10ee:	8e ec       	ldi	r24, 0xCE	; 206
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	0e 94 d4 06 	call	0xda8	; 0xda8 <LCD_String>
    10f6:	2f e9       	ldi	r18, 0x9F	; 159
    10f8:	88 e6       	ldi	r24, 0x68	; 104
    10fa:	96 e0       	ldi	r25, 0x06	; 6
    10fc:	21 50       	subi	r18, 0x01	; 1
    10fe:	80 40       	sbci	r24, 0x00	; 0
    1100:	90 40       	sbci	r25, 0x00	; 0
    1102:	e1 f7       	brne	.-8      	; 0x10fc <main+0x172>
    1104:	00 c0       	rjmp	.+0      	; 0x1106 <main+0x17c>
    1106:	00 00       	nop
					_delay_ms(2100);
					lcd_Clear();
    1108:	0e 94 67 06 	call	0xcce	; 0xcce <lcd_Clear>
    110c:	2f e9       	ldi	r18, 0x9F	; 159
    110e:	86 e8       	ldi	r24, 0x86	; 134
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	21 50       	subi	r18, 0x01	; 1
    1114:	80 40       	sbci	r24, 0x00	; 0
    1116:	90 40       	sbci	r25, 0x00	; 0
    1118:	e1 f7       	brne	.-8      	; 0x1112 <main+0x188>
    111a:	00 c0       	rjmp	.+0      	; 0x111c <main+0x192>
    111c:	00 00       	nop
					_delay_ms(500);
				}
				LCD_String("Please enter a password");
    111e:	8a ed       	ldi	r24, 0xDA	; 218
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 d4 06 	call	0xda8	; 0xda8 <LCD_String>
    1126:	2f e3       	ldi	r18, 0x3F	; 63
    1128:	8d e0       	ldi	r24, 0x0D	; 13
    112a:	93 e0       	ldi	r25, 0x03	; 3
    112c:	21 50       	subi	r18, 0x01	; 1
    112e:	80 40       	sbci	r24, 0x00	; 0
    1130:	90 40       	sbci	r25, 0x00	; 0
    1132:	e1 f7       	brne	.-8      	; 0x112c <main+0x1a2>
    1134:	00 c0       	rjmp	.+0      	; 0x1136 <main+0x1ac>
    1136:	00 00       	nop
				_delay_ms(1000);
				lcd_Clear();
    1138:	0e 94 67 06 	call	0xcce	; 0xcce <lcd_Clear>
				Get_pass();
    113c:	0e 94 7a 07 	call	0xef4	; 0xef4 <Get_pass>
		LCD_String("Please enter a  password");
		_delay_ms(1000);
		lcd_Clear();
		Get_pass();
		//Compare the user password with the one stored before 
		while(number_attempts)
    1140:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <number_attempts>
    1144:	81 11       	cpse	r24, r1
    1146:	8b cf       	rjmp	.-234    	; 0x105e <main+0xd4>
		}
		//This LOOP can only be accessed when a valid password is entered
		do
		{
			//You can continue inside the system or change the current password
			LCD_String("1:change the password");
    1148:	82 ef       	ldi	r24, 0xF2	; 242
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	0e 94 d4 06 	call	0xda8	; 0xda8 <LCD_String>
			GOTO_XY(1,0);
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	0e 94 74 06 	call	0xce8	; 0xce8 <GOTO_XY>
			LCD_String("2:continue");
    1158:	88 e0       	ldi	r24, 0x08	; 8
    115a:	91 e0       	ldi	r25, 0x01	; 1
    115c:	0e 94 d4 06 	call	0xda8	; 0xda8 <LCD_String>
			Select=keypad_getkey();
    1160:	0e 94 0e 05 	call	0xa1c	; 0xa1c <keypad_getkey>
    1164:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <Select>
			while(Select=='n')
    1168:	04 c0       	rjmp	.+8      	; 0x1172 <main+0x1e8>
			{
				Select=keypad_getkey();
    116a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <keypad_getkey>
    116e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <Select>
			//You can continue inside the system or change the current password
			LCD_String("1:change the password");
			GOTO_XY(1,0);
			LCD_String("2:continue");
			Select=keypad_getkey();
			while(Select=='n')
    1172:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <Select>
    1176:	8e 36       	cpi	r24, 0x6E	; 110
    1178:	c1 f3       	breq	.-16     	; 0x116a <main+0x1e0>
			{
				Select=keypad_getkey();
			}
			lcd_Clear();
    117a:	0e 94 67 06 	call	0xcce	; 0xcce <lcd_Clear>
			if (Select==1)
    117e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <Select>
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	11 f5       	brne	.+68     	; 0x11ca <main+0x240>
			{
				lcd_Clear();
    1186:	0e 94 67 06 	call	0xcce	; 0xcce <lcd_Clear>
    118a:	87 ea       	ldi	r24, 0xA7	; 167
    118c:	91 e6       	ldi	r25, 0x61	; 97
    118e:	01 97       	sbiw	r24, 0x01	; 1
    1190:	f1 f7       	brne	.-4      	; 0x118e <main+0x204>
    1192:	00 c0       	rjmp	.+0      	; 0x1194 <main+0x20a>
    1194:	00 00       	nop
				_delay_ms(100);
				LCD_String("Please enter a  new password");
    1196:	86 e8       	ldi	r24, 0x86	; 134
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	0e 94 d4 06 	call	0xda8	; 0xda8 <LCD_String>
    119e:	9f e9       	ldi	r25, 0x9F	; 159
    11a0:	26 e8       	ldi	r18, 0x86	; 134
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	91 50       	subi	r25, 0x01	; 1
    11a6:	20 40       	sbci	r18, 0x00	; 0
    11a8:	80 40       	sbci	r24, 0x00	; 0
    11aa:	e1 f7       	brne	.-8      	; 0x11a4 <main+0x21a>
    11ac:	00 c0       	rjmp	.+0      	; 0x11ae <main+0x224>
    11ae:	00 00       	nop
				_delay_ms(500);
				lcd_Clear();
    11b0:	0e 94 67 06 	call	0xcce	; 0xcce <lcd_Clear>
				Get_pass();
    11b4:	0e 94 7a 07 	call	0xef4	; 0xef4 <Get_pass>
				EEPROM_Write_Data(0x00, Data1, 4);
    11b8:	44 e0       	ldi	r20, 0x04	; 4
    11ba:	6c e1       	ldi	r22, 0x1C	; 28
    11bc:	71 e0       	ldi	r23, 0x01	; 1
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <EEPROM_Write_Data>
				Select=0;
    11c6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <Select>
			}
		} while (Select=='n');
    11ca:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <Select>
    11ce:	8e 36       	cpi	r24, 0x6E	; 110
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <main+0x24a>
    11d2:	ba cf       	rjmp	.-140    	; 0x1148 <main+0x1be>
		//When you enter the correct password, the SERVO will be moved at an angle of 90 degrees for 3 seconds
		My_Servo(90) ;
    11d4:	8a e5       	ldi	r24, 0x5A	; 90
    11d6:	0e 94 33 07 	call	0xe66	; 0xe66 <My_Servo>
		MCAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
    11da:	41 e0       	ldi	r20, 0x01	; 1
    11dc:	60 e1       	ldi	r22, 0x10	; 16
    11de:	86 e3       	ldi	r24, 0x36	; 54
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePin>
    11e6:	9f eb       	ldi	r25, 0xBF	; 191
    11e8:	27 e2       	ldi	r18, 0x27	; 39
    11ea:	89 e0       	ldi	r24, 0x09	; 9
    11ec:	91 50       	subi	r25, 0x01	; 1
    11ee:	20 40       	sbci	r18, 0x00	; 0
    11f0:	80 40       	sbci	r24, 0x00	; 0
    11f2:	e1 f7       	brne	.-8      	; 0x11ec <main+0x262>
    11f4:	00 c0       	rjmp	.+0      	; 0x11f6 <main+0x26c>
    11f6:	00 00       	nop
		_delay_ms(3000);
		MCAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	60 e1       	ldi	r22, 0x10	; 16
    11fc:	86 e3       	ldi	r24, 0x36	; 54
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePin>
		My_Servo(0) ;
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	0e 94 33 07 	call	0xe66	; 0xe66 <My_Servo>
		
    }
    120a:	0d cf       	rjmp	.-486    	; 0x1026 <main+0x9c>

0000120c <__subsf3>:
    120c:	50 58       	subi	r21, 0x80	; 128

0000120e <__addsf3>:
    120e:	bb 27       	eor	r27, r27
    1210:	aa 27       	eor	r26, r26
    1212:	0e 94 1e 09 	call	0x123c	; 0x123c <__addsf3x>
    1216:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__fp_round>
    121a:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fp_pscA>
    121e:	38 f0       	brcs	.+14     	; 0x122e <__addsf3+0x20>
    1220:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__fp_pscB>
    1224:	20 f0       	brcs	.+8      	; 0x122e <__addsf3+0x20>
    1226:	39 f4       	brne	.+14     	; 0x1236 <__addsf3+0x28>
    1228:	9f 3f       	cpi	r25, 0xFF	; 255
    122a:	19 f4       	brne	.+6      	; 0x1232 <__addsf3+0x24>
    122c:	26 f4       	brtc	.+8      	; 0x1236 <__addsf3+0x28>
    122e:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__fp_nan>
    1232:	0e f4       	brtc	.+2      	; 0x1236 <__addsf3+0x28>
    1234:	e0 95       	com	r30
    1236:	e7 fb       	bst	r30, 7
    1238:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__fp_inf>

0000123c <__addsf3x>:
    123c:	e9 2f       	mov	r30, r25
    123e:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__fp_split3>
    1242:	58 f3       	brcs	.-42     	; 0x121a <__addsf3+0xc>
    1244:	ba 17       	cp	r27, r26
    1246:	62 07       	cpc	r22, r18
    1248:	73 07       	cpc	r23, r19
    124a:	84 07       	cpc	r24, r20
    124c:	95 07       	cpc	r25, r21
    124e:	20 f0       	brcs	.+8      	; 0x1258 <__addsf3x+0x1c>
    1250:	79 f4       	brne	.+30     	; 0x1270 <__addsf3x+0x34>
    1252:	a6 f5       	brtc	.+104    	; 0x12bc <__addsf3x+0x80>
    1254:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__fp_zero>
    1258:	0e f4       	brtc	.+2      	; 0x125c <__addsf3x+0x20>
    125a:	e0 95       	com	r30
    125c:	0b 2e       	mov	r0, r27
    125e:	ba 2f       	mov	r27, r26
    1260:	a0 2d       	mov	r26, r0
    1262:	0b 01       	movw	r0, r22
    1264:	b9 01       	movw	r22, r18
    1266:	90 01       	movw	r18, r0
    1268:	0c 01       	movw	r0, r24
    126a:	ca 01       	movw	r24, r20
    126c:	a0 01       	movw	r20, r0
    126e:	11 24       	eor	r1, r1
    1270:	ff 27       	eor	r31, r31
    1272:	59 1b       	sub	r21, r25
    1274:	99 f0       	breq	.+38     	; 0x129c <__addsf3x+0x60>
    1276:	59 3f       	cpi	r21, 0xF9	; 249
    1278:	50 f4       	brcc	.+20     	; 0x128e <__addsf3x+0x52>
    127a:	50 3e       	cpi	r21, 0xE0	; 224
    127c:	68 f1       	brcs	.+90     	; 0x12d8 <__addsf3x+0x9c>
    127e:	1a 16       	cp	r1, r26
    1280:	f0 40       	sbci	r31, 0x00	; 0
    1282:	a2 2f       	mov	r26, r18
    1284:	23 2f       	mov	r18, r19
    1286:	34 2f       	mov	r19, r20
    1288:	44 27       	eor	r20, r20
    128a:	58 5f       	subi	r21, 0xF8	; 248
    128c:	f3 cf       	rjmp	.-26     	; 0x1274 <__addsf3x+0x38>
    128e:	46 95       	lsr	r20
    1290:	37 95       	ror	r19
    1292:	27 95       	ror	r18
    1294:	a7 95       	ror	r26
    1296:	f0 40       	sbci	r31, 0x00	; 0
    1298:	53 95       	inc	r21
    129a:	c9 f7       	brne	.-14     	; 0x128e <__addsf3x+0x52>
    129c:	7e f4       	brtc	.+30     	; 0x12bc <__addsf3x+0x80>
    129e:	1f 16       	cp	r1, r31
    12a0:	ba 0b       	sbc	r27, r26
    12a2:	62 0b       	sbc	r22, r18
    12a4:	73 0b       	sbc	r23, r19
    12a6:	84 0b       	sbc	r24, r20
    12a8:	ba f0       	brmi	.+46     	; 0x12d8 <__addsf3x+0x9c>
    12aa:	91 50       	subi	r25, 0x01	; 1
    12ac:	a1 f0       	breq	.+40     	; 0x12d6 <__addsf3x+0x9a>
    12ae:	ff 0f       	add	r31, r31
    12b0:	bb 1f       	adc	r27, r27
    12b2:	66 1f       	adc	r22, r22
    12b4:	77 1f       	adc	r23, r23
    12b6:	88 1f       	adc	r24, r24
    12b8:	c2 f7       	brpl	.-16     	; 0x12aa <__addsf3x+0x6e>
    12ba:	0e c0       	rjmp	.+28     	; 0x12d8 <__addsf3x+0x9c>
    12bc:	ba 0f       	add	r27, r26
    12be:	62 1f       	adc	r22, r18
    12c0:	73 1f       	adc	r23, r19
    12c2:	84 1f       	adc	r24, r20
    12c4:	48 f4       	brcc	.+18     	; 0x12d8 <__addsf3x+0x9c>
    12c6:	87 95       	ror	r24
    12c8:	77 95       	ror	r23
    12ca:	67 95       	ror	r22
    12cc:	b7 95       	ror	r27
    12ce:	f7 95       	ror	r31
    12d0:	9e 3f       	cpi	r25, 0xFE	; 254
    12d2:	08 f0       	brcs	.+2      	; 0x12d6 <__addsf3x+0x9a>
    12d4:	b0 cf       	rjmp	.-160    	; 0x1236 <__addsf3+0x28>
    12d6:	93 95       	inc	r25
    12d8:	88 0f       	add	r24, r24
    12da:	08 f0       	brcs	.+2      	; 0x12de <__addsf3x+0xa2>
    12dc:	99 27       	eor	r25, r25
    12de:	ee 0f       	add	r30, r30
    12e0:	97 95       	ror	r25
    12e2:	87 95       	ror	r24
    12e4:	08 95       	ret

000012e6 <__divsf3>:
    12e6:	0e 94 87 09 	call	0x130e	; 0x130e <__divsf3x>
    12ea:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__fp_round>
    12ee:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__fp_pscB>
    12f2:	58 f0       	brcs	.+22     	; 0x130a <__divsf3+0x24>
    12f4:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fp_pscA>
    12f8:	40 f0       	brcs	.+16     	; 0x130a <__divsf3+0x24>
    12fa:	29 f4       	brne	.+10     	; 0x1306 <__divsf3+0x20>
    12fc:	5f 3f       	cpi	r21, 0xFF	; 255
    12fe:	29 f0       	breq	.+10     	; 0x130a <__divsf3+0x24>
    1300:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__fp_inf>
    1304:	51 11       	cpse	r21, r1
    1306:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__fp_szero>
    130a:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__fp_nan>

0000130e <__divsf3x>:
    130e:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__fp_split3>
    1312:	68 f3       	brcs	.-38     	; 0x12ee <__divsf3+0x8>

00001314 <__divsf3_pse>:
    1314:	99 23       	and	r25, r25
    1316:	b1 f3       	breq	.-20     	; 0x1304 <__divsf3+0x1e>
    1318:	55 23       	and	r21, r21
    131a:	91 f3       	breq	.-28     	; 0x1300 <__divsf3+0x1a>
    131c:	95 1b       	sub	r25, r21
    131e:	55 0b       	sbc	r21, r21
    1320:	bb 27       	eor	r27, r27
    1322:	aa 27       	eor	r26, r26
    1324:	62 17       	cp	r22, r18
    1326:	73 07       	cpc	r23, r19
    1328:	84 07       	cpc	r24, r20
    132a:	38 f0       	brcs	.+14     	; 0x133a <__divsf3_pse+0x26>
    132c:	9f 5f       	subi	r25, 0xFF	; 255
    132e:	5f 4f       	sbci	r21, 0xFF	; 255
    1330:	22 0f       	add	r18, r18
    1332:	33 1f       	adc	r19, r19
    1334:	44 1f       	adc	r20, r20
    1336:	aa 1f       	adc	r26, r26
    1338:	a9 f3       	breq	.-22     	; 0x1324 <__divsf3_pse+0x10>
    133a:	35 d0       	rcall	.+106    	; 0x13a6 <__divsf3_pse+0x92>
    133c:	0e 2e       	mov	r0, r30
    133e:	3a f0       	brmi	.+14     	; 0x134e <__divsf3_pse+0x3a>
    1340:	e0 e8       	ldi	r30, 0x80	; 128
    1342:	32 d0       	rcall	.+100    	; 0x13a8 <__divsf3_pse+0x94>
    1344:	91 50       	subi	r25, 0x01	; 1
    1346:	50 40       	sbci	r21, 0x00	; 0
    1348:	e6 95       	lsr	r30
    134a:	00 1c       	adc	r0, r0
    134c:	ca f7       	brpl	.-14     	; 0x1340 <__divsf3_pse+0x2c>
    134e:	2b d0       	rcall	.+86     	; 0x13a6 <__divsf3_pse+0x92>
    1350:	fe 2f       	mov	r31, r30
    1352:	29 d0       	rcall	.+82     	; 0x13a6 <__divsf3_pse+0x92>
    1354:	66 0f       	add	r22, r22
    1356:	77 1f       	adc	r23, r23
    1358:	88 1f       	adc	r24, r24
    135a:	bb 1f       	adc	r27, r27
    135c:	26 17       	cp	r18, r22
    135e:	37 07       	cpc	r19, r23
    1360:	48 07       	cpc	r20, r24
    1362:	ab 07       	cpc	r26, r27
    1364:	b0 e8       	ldi	r27, 0x80	; 128
    1366:	09 f0       	breq	.+2      	; 0x136a <__divsf3_pse+0x56>
    1368:	bb 0b       	sbc	r27, r27
    136a:	80 2d       	mov	r24, r0
    136c:	bf 01       	movw	r22, r30
    136e:	ff 27       	eor	r31, r31
    1370:	93 58       	subi	r25, 0x83	; 131
    1372:	5f 4f       	sbci	r21, 0xFF	; 255
    1374:	3a f0       	brmi	.+14     	; 0x1384 <__divsf3_pse+0x70>
    1376:	9e 3f       	cpi	r25, 0xFE	; 254
    1378:	51 05       	cpc	r21, r1
    137a:	78 f0       	brcs	.+30     	; 0x139a <__divsf3_pse+0x86>
    137c:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__fp_inf>
    1380:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__fp_szero>
    1384:	5f 3f       	cpi	r21, 0xFF	; 255
    1386:	e4 f3       	brlt	.-8      	; 0x1380 <__divsf3_pse+0x6c>
    1388:	98 3e       	cpi	r25, 0xE8	; 232
    138a:	d4 f3       	brlt	.-12     	; 0x1380 <__divsf3_pse+0x6c>
    138c:	86 95       	lsr	r24
    138e:	77 95       	ror	r23
    1390:	67 95       	ror	r22
    1392:	b7 95       	ror	r27
    1394:	f7 95       	ror	r31
    1396:	9f 5f       	subi	r25, 0xFF	; 255
    1398:	c9 f7       	brne	.-14     	; 0x138c <__divsf3_pse+0x78>
    139a:	88 0f       	add	r24, r24
    139c:	91 1d       	adc	r25, r1
    139e:	96 95       	lsr	r25
    13a0:	87 95       	ror	r24
    13a2:	97 f9       	bld	r25, 7
    13a4:	08 95       	ret
    13a6:	e1 e0       	ldi	r30, 0x01	; 1
    13a8:	66 0f       	add	r22, r22
    13aa:	77 1f       	adc	r23, r23
    13ac:	88 1f       	adc	r24, r24
    13ae:	bb 1f       	adc	r27, r27
    13b0:	62 17       	cp	r22, r18
    13b2:	73 07       	cpc	r23, r19
    13b4:	84 07       	cpc	r24, r20
    13b6:	ba 07       	cpc	r27, r26
    13b8:	20 f0       	brcs	.+8      	; 0x13c2 <__divsf3_pse+0xae>
    13ba:	62 1b       	sub	r22, r18
    13bc:	73 0b       	sbc	r23, r19
    13be:	84 0b       	sbc	r24, r20
    13c0:	ba 0b       	sbc	r27, r26
    13c2:	ee 1f       	adc	r30, r30
    13c4:	88 f7       	brcc	.-30     	; 0x13a8 <__divsf3_pse+0x94>
    13c6:	e0 95       	com	r30
    13c8:	08 95       	ret

000013ca <__fixunssfsi>:
    13ca:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fp_splitA>
    13ce:	88 f0       	brcs	.+34     	; 0x13f2 <__fixunssfsi+0x28>
    13d0:	9f 57       	subi	r25, 0x7F	; 127
    13d2:	98 f0       	brcs	.+38     	; 0x13fa <__fixunssfsi+0x30>
    13d4:	b9 2f       	mov	r27, r25
    13d6:	99 27       	eor	r25, r25
    13d8:	b7 51       	subi	r27, 0x17	; 23
    13da:	b0 f0       	brcs	.+44     	; 0x1408 <__fixunssfsi+0x3e>
    13dc:	e1 f0       	breq	.+56     	; 0x1416 <__fixunssfsi+0x4c>
    13de:	66 0f       	add	r22, r22
    13e0:	77 1f       	adc	r23, r23
    13e2:	88 1f       	adc	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	1a f0       	brmi	.+6      	; 0x13ee <__fixunssfsi+0x24>
    13e8:	ba 95       	dec	r27
    13ea:	c9 f7       	brne	.-14     	; 0x13de <__fixunssfsi+0x14>
    13ec:	14 c0       	rjmp	.+40     	; 0x1416 <__fixunssfsi+0x4c>
    13ee:	b1 30       	cpi	r27, 0x01	; 1
    13f0:	91 f0       	breq	.+36     	; 0x1416 <__fixunssfsi+0x4c>
    13f2:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__fp_zero>
    13f6:	b1 e0       	ldi	r27, 0x01	; 1
    13f8:	08 95       	ret
    13fa:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__fp_zero>
    13fe:	67 2f       	mov	r22, r23
    1400:	78 2f       	mov	r23, r24
    1402:	88 27       	eor	r24, r24
    1404:	b8 5f       	subi	r27, 0xF8	; 248
    1406:	39 f0       	breq	.+14     	; 0x1416 <__fixunssfsi+0x4c>
    1408:	b9 3f       	cpi	r27, 0xF9	; 249
    140a:	cc f3       	brlt	.-14     	; 0x13fe <__fixunssfsi+0x34>
    140c:	86 95       	lsr	r24
    140e:	77 95       	ror	r23
    1410:	67 95       	ror	r22
    1412:	b3 95       	inc	r27
    1414:	d9 f7       	brne	.-10     	; 0x140c <__fixunssfsi+0x42>
    1416:	3e f4       	brtc	.+14     	; 0x1426 <__fixunssfsi+0x5c>
    1418:	90 95       	com	r25
    141a:	80 95       	com	r24
    141c:	70 95       	com	r23
    141e:	61 95       	neg	r22
    1420:	7f 4f       	sbci	r23, 0xFF	; 255
    1422:	8f 4f       	sbci	r24, 0xFF	; 255
    1424:	9f 4f       	sbci	r25, 0xFF	; 255
    1426:	08 95       	ret

00001428 <__floatunsisf>:
    1428:	e8 94       	clt
    142a:	09 c0       	rjmp	.+18     	; 0x143e <__floatsisf+0x12>

0000142c <__floatsisf>:
    142c:	97 fb       	bst	r25, 7
    142e:	3e f4       	brtc	.+14     	; 0x143e <__floatsisf+0x12>
    1430:	90 95       	com	r25
    1432:	80 95       	com	r24
    1434:	70 95       	com	r23
    1436:	61 95       	neg	r22
    1438:	7f 4f       	sbci	r23, 0xFF	; 255
    143a:	8f 4f       	sbci	r24, 0xFF	; 255
    143c:	9f 4f       	sbci	r25, 0xFF	; 255
    143e:	99 23       	and	r25, r25
    1440:	a9 f0       	breq	.+42     	; 0x146c <__floatsisf+0x40>
    1442:	f9 2f       	mov	r31, r25
    1444:	96 e9       	ldi	r25, 0x96	; 150
    1446:	bb 27       	eor	r27, r27
    1448:	93 95       	inc	r25
    144a:	f6 95       	lsr	r31
    144c:	87 95       	ror	r24
    144e:	77 95       	ror	r23
    1450:	67 95       	ror	r22
    1452:	b7 95       	ror	r27
    1454:	f1 11       	cpse	r31, r1
    1456:	f8 cf       	rjmp	.-16     	; 0x1448 <__floatsisf+0x1c>
    1458:	fa f4       	brpl	.+62     	; 0x1498 <__floatsisf+0x6c>
    145a:	bb 0f       	add	r27, r27
    145c:	11 f4       	brne	.+4      	; 0x1462 <__floatsisf+0x36>
    145e:	60 ff       	sbrs	r22, 0
    1460:	1b c0       	rjmp	.+54     	; 0x1498 <__floatsisf+0x6c>
    1462:	6f 5f       	subi	r22, 0xFF	; 255
    1464:	7f 4f       	sbci	r23, 0xFF	; 255
    1466:	8f 4f       	sbci	r24, 0xFF	; 255
    1468:	9f 4f       	sbci	r25, 0xFF	; 255
    146a:	16 c0       	rjmp	.+44     	; 0x1498 <__floatsisf+0x6c>
    146c:	88 23       	and	r24, r24
    146e:	11 f0       	breq	.+4      	; 0x1474 <__floatsisf+0x48>
    1470:	96 e9       	ldi	r25, 0x96	; 150
    1472:	11 c0       	rjmp	.+34     	; 0x1496 <__floatsisf+0x6a>
    1474:	77 23       	and	r23, r23
    1476:	21 f0       	breq	.+8      	; 0x1480 <__floatsisf+0x54>
    1478:	9e e8       	ldi	r25, 0x8E	; 142
    147a:	87 2f       	mov	r24, r23
    147c:	76 2f       	mov	r23, r22
    147e:	05 c0       	rjmp	.+10     	; 0x148a <__floatsisf+0x5e>
    1480:	66 23       	and	r22, r22
    1482:	71 f0       	breq	.+28     	; 0x14a0 <__floatsisf+0x74>
    1484:	96 e8       	ldi	r25, 0x86	; 134
    1486:	86 2f       	mov	r24, r22
    1488:	70 e0       	ldi	r23, 0x00	; 0
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	2a f0       	brmi	.+10     	; 0x1498 <__floatsisf+0x6c>
    148e:	9a 95       	dec	r25
    1490:	66 0f       	add	r22, r22
    1492:	77 1f       	adc	r23, r23
    1494:	88 1f       	adc	r24, r24
    1496:	da f7       	brpl	.-10     	; 0x148e <__floatsisf+0x62>
    1498:	88 0f       	add	r24, r24
    149a:	96 95       	lsr	r25
    149c:	87 95       	ror	r24
    149e:	97 f9       	bld	r25, 7
    14a0:	08 95       	ret

000014a2 <__fp_inf>:
    14a2:	97 f9       	bld	r25, 7
    14a4:	9f 67       	ori	r25, 0x7F	; 127
    14a6:	80 e8       	ldi	r24, 0x80	; 128
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	60 e0       	ldi	r22, 0x00	; 0
    14ac:	08 95       	ret

000014ae <__fp_nan>:
    14ae:	9f ef       	ldi	r25, 0xFF	; 255
    14b0:	80 ec       	ldi	r24, 0xC0	; 192
    14b2:	08 95       	ret

000014b4 <__fp_pscA>:
    14b4:	00 24       	eor	r0, r0
    14b6:	0a 94       	dec	r0
    14b8:	16 16       	cp	r1, r22
    14ba:	17 06       	cpc	r1, r23
    14bc:	18 06       	cpc	r1, r24
    14be:	09 06       	cpc	r0, r25
    14c0:	08 95       	ret

000014c2 <__fp_pscB>:
    14c2:	00 24       	eor	r0, r0
    14c4:	0a 94       	dec	r0
    14c6:	12 16       	cp	r1, r18
    14c8:	13 06       	cpc	r1, r19
    14ca:	14 06       	cpc	r1, r20
    14cc:	05 06       	cpc	r0, r21
    14ce:	08 95       	ret

000014d0 <__fp_round>:
    14d0:	09 2e       	mov	r0, r25
    14d2:	03 94       	inc	r0
    14d4:	00 0c       	add	r0, r0
    14d6:	11 f4       	brne	.+4      	; 0x14dc <__fp_round+0xc>
    14d8:	88 23       	and	r24, r24
    14da:	52 f0       	brmi	.+20     	; 0x14f0 <__fp_round+0x20>
    14dc:	bb 0f       	add	r27, r27
    14de:	40 f4       	brcc	.+16     	; 0x14f0 <__fp_round+0x20>
    14e0:	bf 2b       	or	r27, r31
    14e2:	11 f4       	brne	.+4      	; 0x14e8 <__fp_round+0x18>
    14e4:	60 ff       	sbrs	r22, 0
    14e6:	04 c0       	rjmp	.+8      	; 0x14f0 <__fp_round+0x20>
    14e8:	6f 5f       	subi	r22, 0xFF	; 255
    14ea:	7f 4f       	sbci	r23, 0xFF	; 255
    14ec:	8f 4f       	sbci	r24, 0xFF	; 255
    14ee:	9f 4f       	sbci	r25, 0xFF	; 255
    14f0:	08 95       	ret

000014f2 <__fp_split3>:
    14f2:	57 fd       	sbrc	r21, 7
    14f4:	90 58       	subi	r25, 0x80	; 128
    14f6:	44 0f       	add	r20, r20
    14f8:	55 1f       	adc	r21, r21
    14fa:	59 f0       	breq	.+22     	; 0x1512 <__fp_splitA+0x10>
    14fc:	5f 3f       	cpi	r21, 0xFF	; 255
    14fe:	71 f0       	breq	.+28     	; 0x151c <__fp_splitA+0x1a>
    1500:	47 95       	ror	r20

00001502 <__fp_splitA>:
    1502:	88 0f       	add	r24, r24
    1504:	97 fb       	bst	r25, 7
    1506:	99 1f       	adc	r25, r25
    1508:	61 f0       	breq	.+24     	; 0x1522 <__fp_splitA+0x20>
    150a:	9f 3f       	cpi	r25, 0xFF	; 255
    150c:	79 f0       	breq	.+30     	; 0x152c <__fp_splitA+0x2a>
    150e:	87 95       	ror	r24
    1510:	08 95       	ret
    1512:	12 16       	cp	r1, r18
    1514:	13 06       	cpc	r1, r19
    1516:	14 06       	cpc	r1, r20
    1518:	55 1f       	adc	r21, r21
    151a:	f2 cf       	rjmp	.-28     	; 0x1500 <__fp_split3+0xe>
    151c:	46 95       	lsr	r20
    151e:	f1 df       	rcall	.-30     	; 0x1502 <__fp_splitA>
    1520:	08 c0       	rjmp	.+16     	; 0x1532 <__fp_splitA+0x30>
    1522:	16 16       	cp	r1, r22
    1524:	17 06       	cpc	r1, r23
    1526:	18 06       	cpc	r1, r24
    1528:	99 1f       	adc	r25, r25
    152a:	f1 cf       	rjmp	.-30     	; 0x150e <__fp_splitA+0xc>
    152c:	86 95       	lsr	r24
    152e:	71 05       	cpc	r23, r1
    1530:	61 05       	cpc	r22, r1
    1532:	08 94       	sec
    1534:	08 95       	ret

00001536 <__fp_zero>:
    1536:	e8 94       	clt

00001538 <__fp_szero>:
    1538:	bb 27       	eor	r27, r27
    153a:	66 27       	eor	r22, r22
    153c:	77 27       	eor	r23, r23
    153e:	cb 01       	movw	r24, r22
    1540:	97 f9       	bld	r25, 7
    1542:	08 95       	ret

00001544 <__mulsf3>:
    1544:	0e 94 b5 0a 	call	0x156a	; 0x156a <__mulsf3x>
    1548:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__fp_round>
    154c:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fp_pscA>
    1550:	38 f0       	brcs	.+14     	; 0x1560 <__mulsf3+0x1c>
    1552:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__fp_pscB>
    1556:	20 f0       	brcs	.+8      	; 0x1560 <__mulsf3+0x1c>
    1558:	95 23       	and	r25, r21
    155a:	11 f0       	breq	.+4      	; 0x1560 <__mulsf3+0x1c>
    155c:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__fp_inf>
    1560:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__fp_nan>
    1564:	11 24       	eor	r1, r1
    1566:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__fp_szero>

0000156a <__mulsf3x>:
    156a:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__fp_split3>
    156e:	70 f3       	brcs	.-36     	; 0x154c <__mulsf3+0x8>

00001570 <__mulsf3_pse>:
    1570:	95 9f       	mul	r25, r21
    1572:	c1 f3       	breq	.-16     	; 0x1564 <__mulsf3+0x20>
    1574:	95 0f       	add	r25, r21
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	55 1f       	adc	r21, r21
    157a:	62 9f       	mul	r22, r18
    157c:	f0 01       	movw	r30, r0
    157e:	72 9f       	mul	r23, r18
    1580:	bb 27       	eor	r27, r27
    1582:	f0 0d       	add	r31, r0
    1584:	b1 1d       	adc	r27, r1
    1586:	63 9f       	mul	r22, r19
    1588:	aa 27       	eor	r26, r26
    158a:	f0 0d       	add	r31, r0
    158c:	b1 1d       	adc	r27, r1
    158e:	aa 1f       	adc	r26, r26
    1590:	64 9f       	mul	r22, r20
    1592:	66 27       	eor	r22, r22
    1594:	b0 0d       	add	r27, r0
    1596:	a1 1d       	adc	r26, r1
    1598:	66 1f       	adc	r22, r22
    159a:	82 9f       	mul	r24, r18
    159c:	22 27       	eor	r18, r18
    159e:	b0 0d       	add	r27, r0
    15a0:	a1 1d       	adc	r26, r1
    15a2:	62 1f       	adc	r22, r18
    15a4:	73 9f       	mul	r23, r19
    15a6:	b0 0d       	add	r27, r0
    15a8:	a1 1d       	adc	r26, r1
    15aa:	62 1f       	adc	r22, r18
    15ac:	83 9f       	mul	r24, r19
    15ae:	a0 0d       	add	r26, r0
    15b0:	61 1d       	adc	r22, r1
    15b2:	22 1f       	adc	r18, r18
    15b4:	74 9f       	mul	r23, r20
    15b6:	33 27       	eor	r19, r19
    15b8:	a0 0d       	add	r26, r0
    15ba:	61 1d       	adc	r22, r1
    15bc:	23 1f       	adc	r18, r19
    15be:	84 9f       	mul	r24, r20
    15c0:	60 0d       	add	r22, r0
    15c2:	21 1d       	adc	r18, r1
    15c4:	82 2f       	mov	r24, r18
    15c6:	76 2f       	mov	r23, r22
    15c8:	6a 2f       	mov	r22, r26
    15ca:	11 24       	eor	r1, r1
    15cc:	9f 57       	subi	r25, 0x7F	; 127
    15ce:	50 40       	sbci	r21, 0x00	; 0
    15d0:	9a f0       	brmi	.+38     	; 0x15f8 <__mulsf3_pse+0x88>
    15d2:	f1 f0       	breq	.+60     	; 0x1610 <__mulsf3_pse+0xa0>
    15d4:	88 23       	and	r24, r24
    15d6:	4a f0       	brmi	.+18     	; 0x15ea <__mulsf3_pse+0x7a>
    15d8:	ee 0f       	add	r30, r30
    15da:	ff 1f       	adc	r31, r31
    15dc:	bb 1f       	adc	r27, r27
    15de:	66 1f       	adc	r22, r22
    15e0:	77 1f       	adc	r23, r23
    15e2:	88 1f       	adc	r24, r24
    15e4:	91 50       	subi	r25, 0x01	; 1
    15e6:	50 40       	sbci	r21, 0x00	; 0
    15e8:	a9 f7       	brne	.-22     	; 0x15d4 <__mulsf3_pse+0x64>
    15ea:	9e 3f       	cpi	r25, 0xFE	; 254
    15ec:	51 05       	cpc	r21, r1
    15ee:	80 f0       	brcs	.+32     	; 0x1610 <__mulsf3_pse+0xa0>
    15f0:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__fp_inf>
    15f4:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__fp_szero>
    15f8:	5f 3f       	cpi	r21, 0xFF	; 255
    15fa:	e4 f3       	brlt	.-8      	; 0x15f4 <__mulsf3_pse+0x84>
    15fc:	98 3e       	cpi	r25, 0xE8	; 232
    15fe:	d4 f3       	brlt	.-12     	; 0x15f4 <__mulsf3_pse+0x84>
    1600:	86 95       	lsr	r24
    1602:	77 95       	ror	r23
    1604:	67 95       	ror	r22
    1606:	b7 95       	ror	r27
    1608:	f7 95       	ror	r31
    160a:	e7 95       	ror	r30
    160c:	9f 5f       	subi	r25, 0xFF	; 255
    160e:	c1 f7       	brne	.-16     	; 0x1600 <__mulsf3_pse+0x90>
    1610:	fe 2b       	or	r31, r30
    1612:	88 0f       	add	r24, r24
    1614:	91 1d       	adc	r25, r1
    1616:	96 95       	lsr	r25
    1618:	87 95       	ror	r24
    161a:	97 f9       	bld	r25, 7
    161c:	08 95       	ret

0000161e <__udivmodsi4>:
    161e:	a1 e2       	ldi	r26, 0x21	; 33
    1620:	1a 2e       	mov	r1, r26
    1622:	aa 1b       	sub	r26, r26
    1624:	bb 1b       	sub	r27, r27
    1626:	fd 01       	movw	r30, r26
    1628:	0d c0       	rjmp	.+26     	; 0x1644 <__udivmodsi4_ep>

0000162a <__udivmodsi4_loop>:
    162a:	aa 1f       	adc	r26, r26
    162c:	bb 1f       	adc	r27, r27
    162e:	ee 1f       	adc	r30, r30
    1630:	ff 1f       	adc	r31, r31
    1632:	a2 17       	cp	r26, r18
    1634:	b3 07       	cpc	r27, r19
    1636:	e4 07       	cpc	r30, r20
    1638:	f5 07       	cpc	r31, r21
    163a:	20 f0       	brcs	.+8      	; 0x1644 <__udivmodsi4_ep>
    163c:	a2 1b       	sub	r26, r18
    163e:	b3 0b       	sbc	r27, r19
    1640:	e4 0b       	sbc	r30, r20
    1642:	f5 0b       	sbc	r31, r21

00001644 <__udivmodsi4_ep>:
    1644:	66 1f       	adc	r22, r22
    1646:	77 1f       	adc	r23, r23
    1648:	88 1f       	adc	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	1a 94       	dec	r1
    164e:	69 f7       	brne	.-38     	; 0x162a <__udivmodsi4_loop>
    1650:	60 95       	com	r22
    1652:	70 95       	com	r23
    1654:	80 95       	com	r24
    1656:	90 95       	com	r25
    1658:	9b 01       	movw	r18, r22
    165a:	ac 01       	movw	r20, r24
    165c:	bd 01       	movw	r22, r26
    165e:	cf 01       	movw	r24, r30
    1660:	08 95       	ret

00001662 <__tablejump2__>:
    1662:	ee 0f       	add	r30, r30
    1664:	ff 1f       	adc	r31, r31
    1666:	05 90       	lpm	r0, Z+
    1668:	f4 91       	lpm	r31, Z
    166a:	e0 2d       	mov	r30, r0
    166c:	09 94       	ijmp

0000166e <_exit>:
    166e:	f8 94       	cli

00001670 <__stop_program>:
    1670:	ff cf       	rjmp	.-2      	; 0x1670 <__stop_program>
