
Atmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ab4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000b28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800060  00800060  00000b28  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e2d  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012df  00000000  00000000  00003ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ce8  00000000  00000000  00004f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a04  00000000  00000000  00006c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e0f  00000000  00000000  0000766c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d4e  00000000  00000000  0000847b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000a1c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_2>
   c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__vector_7>
  20:	0c 94 83 02 	jmp	0x506	; 0x506 <__vector_8>
  24:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_9>
  28:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__vector_10>
  2c:	0c 94 01 03 	jmp	0x602	; 0x602 <__vector_11>
  30:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__vector_12>
  34:	0c 94 2b 03 	jmp	0x656	; 0x656 <__vector_13>
  38:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__vector_14>
  3c:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__vector_15>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	32 01       	movw	r6, r4
  56:	37 01       	movw	r6, r14
  58:	3d 01       	movw	r6, r26
  5a:	55 01       	movw	r10, r10
  5c:	43 01       	movw	r8, r6
  5e:	49 01       	movw	r8, r18
  60:	61 01       	movw	r12, r2
  62:	4f 01       	movw	r8, r30
  64:	67 01       	movw	r12, r14
  66:	5b 01       	movw	r10, r22

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	20 e0       	ldi	r18, 0x00	; 0
  76:	a0 e6       	ldi	r26, 0x60	; 96
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 37       	cpi	r26, 0x74	; 116
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ff 04 	call	0x9fe	; 0x9fe <main>
  88:	0c 94 58 05 	jmp	0xab0	; 0xab0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_1>:
 */


void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	6f 93       	push	r22
  a4:	7f 93       	push	r23
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
  aa:	af 93       	push	r26
  ac:	bf 93       	push	r27
  ae:	ef 93       	push	r30
  b0:	ff 93       	push	r31
	//Call function
	GP_IRQ_CALL[0]();
  b2:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <GP_IRQ_CALL>
  b6:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <GP_IRQ_CALL+0x1>
  ba:	09 95       	icall
}
  bc:	ff 91       	pop	r31
  be:	ef 91       	pop	r30
  c0:	bf 91       	pop	r27
  c2:	af 91       	pop	r26
  c4:	9f 91       	pop	r25
  c6:	8f 91       	pop	r24
  c8:	7f 91       	pop	r23
  ca:	6f 91       	pop	r22
  cc:	5f 91       	pop	r21
  ce:	4f 91       	pop	r20
  d0:	3f 91       	pop	r19
  d2:	2f 91       	pop	r18
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <__vector_2>:


void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	2f 93       	push	r18
  ea:	3f 93       	push	r19
  ec:	4f 93       	push	r20
  ee:	5f 93       	push	r21
  f0:	6f 93       	push	r22
  f2:	7f 93       	push	r23
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
  f8:	af 93       	push	r26
  fa:	bf 93       	push	r27
  fc:	ef 93       	push	r30
  fe:	ff 93       	push	r31
	//Call function
	GP_IRQ_CALL[1]();
 100:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <GP_IRQ_CALL+0x2>
 104:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <GP_IRQ_CALL+0x3>
 108:	09 95       	icall
}
 10a:	ff 91       	pop	r31
 10c:	ef 91       	pop	r30
 10e:	bf 91       	pop	r27
 110:	af 91       	pop	r26
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	7f 91       	pop	r23
 118:	6f 91       	pop	r22
 11a:	5f 91       	pop	r21
 11c:	4f 91       	pop	r20
 11e:	3f 91       	pop	r19
 120:	2f 91       	pop	r18
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <__vector_3>:


void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	2f 93       	push	r18
 138:	3f 93       	push	r19
 13a:	4f 93       	push	r20
 13c:	5f 93       	push	r21
 13e:	6f 93       	push	r22
 140:	7f 93       	push	r23
 142:	8f 93       	push	r24
 144:	9f 93       	push	r25
 146:	af 93       	push	r26
 148:	bf 93       	push	r27
 14a:	ef 93       	push	r30
 14c:	ff 93       	push	r31
	//Call function
	GP_IRQ_CALL[2]();
 14e:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <GP_IRQ_CALL+0x4>
 152:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <GP_IRQ_CALL+0x5>
 156:	09 95       	icall
}
 158:	ff 91       	pop	r31
 15a:	ef 91       	pop	r30
 15c:	bf 91       	pop	r27
 15e:	af 91       	pop	r26
 160:	9f 91       	pop	r25
 162:	8f 91       	pop	r24
 164:	7f 91       	pop	r23
 166:	6f 91       	pop	r22
 168:	5f 91       	pop	r21
 16a:	4f 91       	pop	r20
 16c:	3f 91       	pop	r19
 16e:	2f 91       	pop	r18
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <MCAL_GPIO_Init>:
uint16_t MCAL_GPIO_ReadPort(GPIO_TypeDef *GPIOx )
{
	uint8_t port_value;
	port_value= (uint8_t) (GPIOx->PIN);
	return port_value;
}
 17a:	fc 01       	movw	r30, r24
 17c:	db 01       	movw	r26, r22
 17e:	11 96       	adiw	r26, 0x01	; 1
 180:	8c 91       	ld	r24, X
 182:	11 97       	sbiw	r26, 0x01	; 1
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	59 f4       	brne	.+22     	; 0x19e <MCAL_GPIO_Init+0x24>
 188:	8c 91       	ld	r24, X
 18a:	80 95       	com	r24
 18c:	91 81       	ldd	r25, Z+1	; 0x01
 18e:	89 23       	and	r24, r25
 190:	81 83       	std	Z+1, r24	; 0x01
 192:	8c 91       	ld	r24, X
 194:	80 95       	com	r24
 196:	92 81       	ldd	r25, Z+2	; 0x02
 198:	89 23       	and	r24, r25
 19a:	82 83       	std	Z+2, r24	; 0x02
 19c:	08 95       	ret
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	51 f4       	brne	.+20     	; 0x1b6 <MCAL_GPIO_Init+0x3c>
 1a2:	8c 91       	ld	r24, X
 1a4:	80 95       	com	r24
 1a6:	91 81       	ldd	r25, Z+1	; 0x01
 1a8:	89 23       	and	r24, r25
 1aa:	81 83       	std	Z+1, r24	; 0x01
 1ac:	8c 91       	ld	r24, X
 1ae:	92 81       	ldd	r25, Z+2	; 0x02
 1b0:	89 2b       	or	r24, r25
 1b2:	82 83       	std	Z+2, r24	; 0x02
 1b4:	08 95       	ret
 1b6:	8c 91       	ld	r24, X
 1b8:	91 81       	ldd	r25, Z+1	; 0x01
 1ba:	89 2b       	or	r24, r25
 1bc:	81 83       	std	Z+1, r24	; 0x01
 1be:	8c 91       	ld	r24, X
 1c0:	80 95       	com	r24
 1c2:	92 81       	ldd	r25, Z+2	; 0x02
 1c4:	89 23       	and	r24, r25
 1c6:	82 83       	std	Z+2, r24	; 0x02
 1c8:	08 95       	ret

000001ca <MCAL_GPIO_WritePin>:
* @retval 			-none
* Note				-none
*/
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx ,uint8_t pinNumber ,uint8_t value)
{
	if ( value == GPIO_PIN_SET )
 1ca:	41 30       	cpi	r20, 0x01	; 1
 1cc:	29 f4       	brne	.+10     	; 0x1d8 <MCAL_GPIO_WritePin+0xe>
	{
		GPIOx->PORT |= pinNumber ;
 1ce:	fc 01       	movw	r30, r24
 1d0:	22 81       	ldd	r18, Z+2	; 0x02
 1d2:	62 2b       	or	r22, r18
 1d4:	62 83       	std	Z+2, r22	; 0x02
 1d6:	08 95       	ret
	}
	else if(  value == GPIO_PIN_RESET)
 1d8:	41 11       	cpse	r20, r1
 1da:	05 c0       	rjmp	.+10     	; 0x1e6 <MCAL_GPIO_WritePin+0x1c>
	{
		GPIOx->PORT &= ~( pinNumber ) ;
 1dc:	60 95       	com	r22
 1de:	fc 01       	movw	r30, r24
 1e0:	22 81       	ldd	r18, Z+2	; 0x02
 1e2:	62 23       	and	r22, r18
 1e4:	62 83       	std	Z+2, r22	; 0x02
 1e6:	08 95       	ret

000001e8 <MCAL_GPIO_WritePort>:
* @retval 			-none
* Note				-none
*/
void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx ,uint8_t value)
{
	GPIOx->PORT=  value;
 1e8:	fc 01       	movw	r30, r24
 1ea:	62 83       	std	Z+2, r22	; 0x02
 1ec:	08 95       	ret

000001ee <MCAL_I2C_Init>:
	{
		//ERROR
	}
	// return data
	return I2C->TWDR;
}
 1ee:	fc 01       	movw	r30, r24
 1f0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1f8:	80 81       	ld	r24, Z
 1fa:	82 b9       	out	0x02, r24	; 2
 1fc:	83 81       	ldd	r24, Z+3	; 0x03
 1fe:	81 b9       	out	0x01, r24	; 1
 200:	82 81       	ldd	r24, Z+2	; 0x02
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	39 f4       	brne	.+14     	; 0x214 <MCAL_I2C_Init+0x26>
 206:	96 b7       	in	r25, 0x36	; 54
 208:	89 2b       	or	r24, r25
 20a:	86 bf       	out	0x36, r24	; 54
 20c:	8f b7       	in	r24, 0x3f	; 63
 20e:	80 68       	ori	r24, 0x80	; 128
 210:	8f bf       	out	0x3f, r24	; 63
 212:	06 c0       	rjmp	.+12     	; 0x220 <MCAL_I2C_Init+0x32>
 214:	96 b7       	in	r25, 0x36	; 54
 216:	89 23       	and	r24, r25
 218:	86 bf       	out	0x36, r24	; 54
 21a:	8f b7       	in	r24, 0x3f	; 63
 21c:	8f 77       	andi	r24, 0x7F	; 127
 21e:	8f bf       	out	0x3f, r24	; 63
 220:	21 81       	ldd	r18, Z+1	; 0x01
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	50 e0       	ldi	r21, 0x00	; 0
 228:	60 e4       	ldi	r22, 0x40	; 64
 22a:	72 e4       	ldi	r23, 0x42	; 66
 22c:	8f e0       	ldi	r24, 0x0F	; 15
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 30 05 	call	0xa60	; 0xa60 <__udivmodsi4>
 234:	da 01       	movw	r26, r20
 236:	c9 01       	movw	r24, r18
 238:	40 97       	sbiw	r24, 0x10	; 16
 23a:	a1 09       	sbc	r26, r1
 23c:	b1 09       	sbc	r27, r1
 23e:	b6 95       	lsr	r27
 240:	a7 95       	ror	r26
 242:	97 95       	ror	r25
 244:	87 95       	ror	r24
 246:	80 b9       	out	0x00, r24	; 0
 248:	86 b7       	in	r24, 0x36	; 54
 24a:	84 64       	ori	r24, 0x44	; 68
 24c:	86 bf       	out	0x36, r24	; 54
 24e:	08 95       	ret

00000250 <Get_flag_stutus>:
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	8a 30       	cpi	r24, 0x0A	; 10
 254:	91 05       	cpc	r25, r1
 256:	08 f0       	brcs	.+2      	; 0x25a <Get_flag_stutus+0xa>
 258:	53 c0       	rjmp	.+166    	; 0x300 <Get_flag_stutus+0xb0>
 25a:	fc 01       	movw	r30, r24
 25c:	e6 5d       	subi	r30, 0xD6	; 214
 25e:	ff 4f       	sbci	r31, 0xFF	; 255
 260:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <__tablejump2__>
 264:	06 b6       	in	r0, 0x36	; 54
 266:	07 fe       	sbrs	r0, 7
 268:	38 c0       	rjmp	.+112    	; 0x2da <Get_flag_stutus+0x8a>
 26a:	21 e0       	ldi	r18, 0x01	; 1
 26c:	49 c0       	rjmp	.+146    	; 0x300 <Get_flag_stutus+0xb0>
 26e:	81 b1       	in	r24, 0x01	; 1
 270:	88 7f       	andi	r24, 0xF8	; 248
 272:	88 30       	cpi	r24, 0x08	; 8
 274:	a1 f1       	breq	.+104    	; 0x2de <Get_flag_stutus+0x8e>
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	43 c0       	rjmp	.+134    	; 0x300 <Get_flag_stutus+0xb0>
 27a:	81 b1       	in	r24, 0x01	; 1
 27c:	88 7f       	andi	r24, 0xF8	; 248
 27e:	88 31       	cpi	r24, 0x18	; 24
 280:	81 f1       	breq	.+96     	; 0x2e2 <Get_flag_stutus+0x92>
 282:	21 e0       	ldi	r18, 0x01	; 1
 284:	3d c0       	rjmp	.+122    	; 0x300 <Get_flag_stutus+0xb0>
 286:	81 b1       	in	r24, 0x01	; 1
 288:	88 7f       	andi	r24, 0xF8	; 248
 28a:	88 32       	cpi	r24, 0x28	; 40
 28c:	61 f1       	breq	.+88     	; 0x2e6 <Get_flag_stutus+0x96>
 28e:	21 e0       	ldi	r18, 0x01	; 1
 290:	37 c0       	rjmp	.+110    	; 0x300 <Get_flag_stutus+0xb0>
 292:	81 b1       	in	r24, 0x01	; 1
 294:	88 7f       	andi	r24, 0xF8	; 248
 296:	80 36       	cpi	r24, 0x60	; 96
 298:	41 f1       	breq	.+80     	; 0x2ea <Get_flag_stutus+0x9a>
 29a:	21 e0       	ldi	r18, 0x01	; 1
 29c:	31 c0       	rjmp	.+98     	; 0x300 <Get_flag_stutus+0xb0>
 29e:	81 b1       	in	r24, 0x01	; 1
 2a0:	88 7f       	andi	r24, 0xF8	; 248
 2a2:	80 38       	cpi	r24, 0x80	; 128
 2a4:	21 f1       	breq	.+72     	; 0x2ee <Get_flag_stutus+0x9e>
 2a6:	21 e0       	ldi	r18, 0x01	; 1
 2a8:	2b c0       	rjmp	.+86     	; 0x300 <Get_flag_stutus+0xb0>
 2aa:	81 b1       	in	r24, 0x01	; 1
 2ac:	88 7f       	andi	r24, 0xF8	; 248
 2ae:	80 34       	cpi	r24, 0x40	; 64
 2b0:	01 f1       	breq	.+64     	; 0x2f2 <Get_flag_stutus+0xa2>
 2b2:	21 e0       	ldi	r18, 0x01	; 1
 2b4:	25 c0       	rjmp	.+74     	; 0x300 <Get_flag_stutus+0xb0>
 2b6:	81 b1       	in	r24, 0x01	; 1
 2b8:	88 7f       	andi	r24, 0xF8	; 248
 2ba:	80 35       	cpi	r24, 0x50	; 80
 2bc:	e1 f0       	breq	.+56     	; 0x2f6 <Get_flag_stutus+0xa6>
 2be:	21 e0       	ldi	r18, 0x01	; 1
 2c0:	1f c0       	rjmp	.+62     	; 0x300 <Get_flag_stutus+0xb0>
 2c2:	81 b1       	in	r24, 0x01	; 1
 2c4:	88 7f       	andi	r24, 0xF8	; 248
 2c6:	88 3a       	cpi	r24, 0xA8	; 168
 2c8:	c1 f0       	breq	.+48     	; 0x2fa <Get_flag_stutus+0xaa>
 2ca:	21 e0       	ldi	r18, 0x01	; 1
 2cc:	19 c0       	rjmp	.+50     	; 0x300 <Get_flag_stutus+0xb0>
 2ce:	81 b1       	in	r24, 0x01	; 1
 2d0:	88 7f       	andi	r24, 0xF8	; 248
 2d2:	88 3b       	cpi	r24, 0xB8	; 184
 2d4:	a1 f0       	breq	.+40     	; 0x2fe <Get_flag_stutus+0xae>
 2d6:	21 e0       	ldi	r18, 0x01	; 1
 2d8:	13 c0       	rjmp	.+38     	; 0x300 <Get_flag_stutus+0xb0>
 2da:	20 e0       	ldi	r18, 0x00	; 0
 2dc:	11 c0       	rjmp	.+34     	; 0x300 <Get_flag_stutus+0xb0>
 2de:	20 e0       	ldi	r18, 0x00	; 0
 2e0:	0f c0       	rjmp	.+30     	; 0x300 <Get_flag_stutus+0xb0>
 2e2:	20 e0       	ldi	r18, 0x00	; 0
 2e4:	0d c0       	rjmp	.+26     	; 0x300 <Get_flag_stutus+0xb0>
 2e6:	20 e0       	ldi	r18, 0x00	; 0
 2e8:	0b c0       	rjmp	.+22     	; 0x300 <Get_flag_stutus+0xb0>
 2ea:	20 e0       	ldi	r18, 0x00	; 0
 2ec:	09 c0       	rjmp	.+18     	; 0x300 <Get_flag_stutus+0xb0>
 2ee:	20 e0       	ldi	r18, 0x00	; 0
 2f0:	07 c0       	rjmp	.+14     	; 0x300 <Get_flag_stutus+0xb0>
 2f2:	20 e0       	ldi	r18, 0x00	; 0
 2f4:	05 c0       	rjmp	.+10     	; 0x300 <Get_flag_stutus+0xb0>
 2f6:	20 e0       	ldi	r18, 0x00	; 0
 2f8:	03 c0       	rjmp	.+6      	; 0x300 <Get_flag_stutus+0xb0>
 2fa:	20 e0       	ldi	r18, 0x00	; 0
 2fc:	01 c0       	rjmp	.+2      	; 0x300 <Get_flag_stutus+0xb0>
 2fe:	20 e0       	ldi	r18, 0x00	; 0
 300:	82 2f       	mov	r24, r18
 302:	08 95       	ret

00000304 <I2C_Generate_Start>:
 304:	84 ea       	ldi	r24, 0xA4	; 164
 306:	86 bf       	out	0x36, r24	; 54
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	0e 94 28 01 	call	0x250	; 0x250 <Get_flag_stutus>
 30e:	88 23       	and	r24, r24
 310:	d9 f3       	breq	.-10     	; 0x308 <I2C_Generate_Start+0x4>
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 28 01 	call	0x250	; 0x250 <Get_flag_stutus>
 318:	86 b7       	in	r24, 0x36	; 54
 31a:	8f 75       	andi	r24, 0x5F	; 95
 31c:	86 bf       	out	0x36, r24	; 54
 31e:	08 95       	ret

00000320 <I2C_Generate_Stop>:
 320:	84 e9       	ldi	r24, 0x94	; 148
 322:	86 bf       	out	0x36, r24	; 54
 324:	08 95       	ret

00000326 <MCAL_I2C_Master_TX>:
 326:	ff 92       	push	r15
 328:	0f 93       	push	r16
 32a:	1f 93       	push	r17
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	c8 2f       	mov	r28, r24
 332:	8b 01       	movw	r16, r22
 334:	d4 2f       	mov	r29, r20
 336:	f2 2e       	mov	r15, r18
 338:	0e 94 82 01 	call	0x304	; 0x304 <I2C_Generate_Start>
 33c:	c3 b9       	out	0x03, r28	; 3
 33e:	86 b7       	in	r24, 0x36	; 54
 340:	80 68       	ori	r24, 0x80	; 128
 342:	86 bf       	out	0x36, r24	; 54
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	0e 94 28 01 	call	0x250	; 0x250 <Get_flag_stutus>
 34a:	88 23       	and	r24, r24
 34c:	d9 f3       	breq	.-10     	; 0x344 <MCAL_I2C_Master_TX+0x1e>
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	0e 94 28 01 	call	0x250	; 0x250 <Get_flag_stutus>
 354:	c0 e0       	ldi	r28, 0x00	; 0
 356:	11 c0       	rjmp	.+34     	; 0x37a <MCAL_I2C_Master_TX+0x54>
 358:	f8 01       	movw	r30, r16
 35a:	ec 0f       	add	r30, r28
 35c:	f1 1d       	adc	r31, r1
 35e:	80 81       	ld	r24, Z
 360:	83 b9       	out	0x03, r24	; 3
 362:	86 b7       	in	r24, 0x36	; 54
 364:	80 68       	ori	r24, 0x80	; 128
 366:	86 bf       	out	0x36, r24	; 54
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	0e 94 28 01 	call	0x250	; 0x250 <Get_flag_stutus>
 36e:	88 23       	and	r24, r24
 370:	d9 f3       	breq	.-10     	; 0x368 <MCAL_I2C_Master_TX+0x42>
 372:	84 e0       	ldi	r24, 0x04	; 4
 374:	0e 94 28 01 	call	0x250	; 0x250 <Get_flag_stutus>
 378:	cf 5f       	subi	r28, 0xFF	; 255
 37a:	cd 17       	cp	r28, r29
 37c:	68 f3       	brcs	.-38     	; 0x358 <MCAL_I2C_Master_TX+0x32>
 37e:	f1 10       	cpse	r15, r1
 380:	02 c0       	rjmp	.+4      	; 0x386 <MCAL_I2C_Master_TX+0x60>
 382:	0e 94 90 01 	call	0x320	; 0x320 <I2C_Generate_Stop>
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	ff 90       	pop	r15
 390:	08 95       	ret

00000392 <MCAL_I2C_Master_RX>:
 392:	0f 93       	push	r16
 394:	1f 93       	push	r17
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	c8 2f       	mov	r28, r24
 39c:	8b 01       	movw	r16, r22
 39e:	d4 2f       	mov	r29, r20
 3a0:	0e 94 82 01 	call	0x304	; 0x304 <I2C_Generate_Start>
 3a4:	c3 b9       	out	0x03, r28	; 3
 3a6:	86 b7       	in	r24, 0x36	; 54
 3a8:	80 6c       	ori	r24, 0xC0	; 192
 3aa:	86 bf       	out	0x36, r24	; 54
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	0e 94 28 01 	call	0x250	; 0x250 <Get_flag_stutus>
 3b2:	88 23       	and	r24, r24
 3b4:	d9 f3       	breq	.-10     	; 0x3ac <MCAL_I2C_Master_RX+0x1a>
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	0e 94 28 01 	call	0x250	; 0x250 <Get_flag_stutus>
 3bc:	c0 e0       	ldi	r28, 0x00	; 0
 3be:	1c c0       	rjmp	.+56     	; 0x3f8 <MCAL_I2C_Master_RX+0x66>
 3c0:	2c 2f       	mov	r18, r28
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	8d 2f       	mov	r24, r29
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	28 17       	cp	r18, r24
 3cc:	39 07       	cpc	r19, r25
 3ce:	19 f4       	brne	.+6      	; 0x3d6 <MCAL_I2C_Master_RX+0x44>
 3d0:	86 b7       	in	r24, 0x36	; 54
 3d2:	8f 7b       	andi	r24, 0xBF	; 191
 3d4:	86 bf       	out	0x36, r24	; 54
 3d6:	86 b7       	in	r24, 0x36	; 54
 3d8:	80 68       	ori	r24, 0x80	; 128
 3da:	86 bf       	out	0x36, r24	; 54
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 28 01 	call	0x250	; 0x250 <Get_flag_stutus>
 3e2:	88 23       	and	r24, r24
 3e4:	d9 f3       	breq	.-10     	; 0x3dc <MCAL_I2C_Master_RX+0x4a>
 3e6:	89 e0       	ldi	r24, 0x09	; 9
 3e8:	0e 94 28 01 	call	0x250	; 0x250 <Get_flag_stutus>
 3ec:	f8 01       	movw	r30, r16
 3ee:	ec 0f       	add	r30, r28
 3f0:	f1 1d       	adc	r31, r1
 3f2:	83 b1       	in	r24, 0x03	; 3
 3f4:	80 83       	st	Z, r24
 3f6:	cf 5f       	subi	r28, 0xFF	; 255
 3f8:	cd 17       	cp	r28, r29
 3fa:	10 f3       	brcs	.-60     	; 0x3c0 <MCAL_I2C_Master_RX+0x2e>
 3fc:	0e 94 90 01 	call	0x320	; 0x320 <I2C_Generate_Stop>
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	1f 91       	pop	r17
 406:	0f 91       	pop	r16
 408:	08 95       	ret

0000040a <__vector_19>:
 */


void __vector_19 (void) __attribute__((signal));
void __vector_19 (void)
{
 40a:	1f 92       	push	r1
 40c:	0f 92       	push	r0
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	0f 92       	push	r0
 412:	11 24       	eor	r1, r1
 414:	2f 93       	push	r18
 416:	3f 93       	push	r19
 418:	4f 93       	push	r20
 41a:	5f 93       	push	r21
 41c:	6f 93       	push	r22
 41e:	7f 93       	push	r23
 420:	8f 93       	push	r24
 422:	9f 93       	push	r25
 424:	af 93       	push	r26
 426:	bf 93       	push	r27
 428:	ef 93       	push	r30
 42a:	ff 93       	push	r31
	g_I2C_Config->P_IRQ_CALL() ;
 42c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 430:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 434:	04 80       	ldd	r0, Z+4	; 0x04
 436:	f5 81       	ldd	r31, Z+5	; 0x05
 438:	e0 2d       	mov	r30, r0
 43a:	09 95       	icall
}
 43c:	ff 91       	pop	r31
 43e:	ef 91       	pop	r30
 440:	bf 91       	pop	r27
 442:	af 91       	pop	r26
 444:	9f 91       	pop	r25
 446:	8f 91       	pop	r24
 448:	7f 91       	pop	r23
 44a:	6f 91       	pop	r22
 44c:	5f 91       	pop	r21
 44e:	4f 91       	pop	r20
 450:	3f 91       	pop	r19
 452:	2f 91       	pop	r18
 454:	0f 90       	pop	r0
 456:	0f be       	out	0x3f, r0	; 63
 458:	0f 90       	pop	r0
 45a:	1f 90       	pop	r1
 45c:	18 95       	reti

0000045e <__vector_9>:
 * ===============================================================
 */

void __vector_9 (void) __attribute__((signal));
void __vector_9 (void)
{
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	11 24       	eor	r1, r1
 468:	2f 93       	push	r18
 46a:	3f 93       	push	r19
 46c:	4f 93       	push	r20
 46e:	5f 93       	push	r21
 470:	6f 93       	push	r22
 472:	7f 93       	push	r23
 474:	8f 93       	push	r24
 476:	9f 93       	push	r25
 478:	af 93       	push	r26
 47a:	bf 93       	push	r27
 47c:	ef 93       	push	r30
 47e:	ff 93       	push	r31
	g_PWM_Config->P_TOIE1_CALL();
 480:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <g_PWM_Config>
 484:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <g_PWM_Config+0x1>
 488:	04 84       	ldd	r0, Z+12	; 0x0c
 48a:	f5 85       	ldd	r31, Z+13	; 0x0d
 48c:	e0 2d       	mov	r30, r0
 48e:	09 95       	icall
}
 490:	ff 91       	pop	r31
 492:	ef 91       	pop	r30
 494:	bf 91       	pop	r27
 496:	af 91       	pop	r26
 498:	9f 91       	pop	r25
 49a:	8f 91       	pop	r24
 49c:	7f 91       	pop	r23
 49e:	6f 91       	pop	r22
 4a0:	5f 91       	pop	r21
 4a2:	4f 91       	pop	r20
 4a4:	3f 91       	pop	r19
 4a6:	2f 91       	pop	r18
 4a8:	0f 90       	pop	r0
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	0f 90       	pop	r0
 4ae:	1f 90       	pop	r1
 4b0:	18 95       	reti

000004b2 <__vector_7>:

void __vector_7 (void) __attribute__((signal));
void __vector_7 (void)
{
 4b2:	1f 92       	push	r1
 4b4:	0f 92       	push	r0
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	0f 92       	push	r0
 4ba:	11 24       	eor	r1, r1
 4bc:	2f 93       	push	r18
 4be:	3f 93       	push	r19
 4c0:	4f 93       	push	r20
 4c2:	5f 93       	push	r21
 4c4:	6f 93       	push	r22
 4c6:	7f 93       	push	r23
 4c8:	8f 93       	push	r24
 4ca:	9f 93       	push	r25
 4cc:	af 93       	push	r26
 4ce:	bf 93       	push	r27
 4d0:	ef 93       	push	r30
 4d2:	ff 93       	push	r31
	g_PWM_Config->P_OCIE1A_CALL();
 4d4:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <g_PWM_Config>
 4d8:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <g_PWM_Config+0x1>
 4dc:	06 84       	ldd	r0, Z+14	; 0x0e
 4de:	f7 85       	ldd	r31, Z+15	; 0x0f
 4e0:	e0 2d       	mov	r30, r0
 4e2:	09 95       	icall
}
 4e4:	ff 91       	pop	r31
 4e6:	ef 91       	pop	r30
 4e8:	bf 91       	pop	r27
 4ea:	af 91       	pop	r26
 4ec:	9f 91       	pop	r25
 4ee:	8f 91       	pop	r24
 4f0:	7f 91       	pop	r23
 4f2:	6f 91       	pop	r22
 4f4:	5f 91       	pop	r21
 4f6:	4f 91       	pop	r20
 4f8:	3f 91       	pop	r19
 4fa:	2f 91       	pop	r18
 4fc:	0f 90       	pop	r0
 4fe:	0f be       	out	0x3f, r0	; 63
 500:	0f 90       	pop	r0
 502:	1f 90       	pop	r1
 504:	18 95       	reti

00000506 <__vector_8>:

void __vector_8 (void) __attribute__((signal));
void __vector_8 (void)
{
 506:	1f 92       	push	r1
 508:	0f 92       	push	r0
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	0f 92       	push	r0
 50e:	11 24       	eor	r1, r1
 510:	2f 93       	push	r18
 512:	3f 93       	push	r19
 514:	4f 93       	push	r20
 516:	5f 93       	push	r21
 518:	6f 93       	push	r22
 51a:	7f 93       	push	r23
 51c:	8f 93       	push	r24
 51e:	9f 93       	push	r25
 520:	af 93       	push	r26
 522:	bf 93       	push	r27
 524:	ef 93       	push	r30
 526:	ff 93       	push	r31
	g_PWM_Config->P_OCIE1B_CALL();
 528:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <g_PWM_Config>
 52c:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <g_PWM_Config+0x1>
 530:	00 88       	ldd	r0, Z+16	; 0x10
 532:	f1 89       	ldd	r31, Z+17	; 0x11
 534:	e0 2d       	mov	r30, r0
 536:	09 95       	icall
}
 538:	ff 91       	pop	r31
 53a:	ef 91       	pop	r30
 53c:	bf 91       	pop	r27
 53e:	af 91       	pop	r26
 540:	9f 91       	pop	r25
 542:	8f 91       	pop	r24
 544:	7f 91       	pop	r23
 546:	6f 91       	pop	r22
 548:	5f 91       	pop	r21
 54a:	4f 91       	pop	r20
 54c:	3f 91       	pop	r19
 54e:	2f 91       	pop	r18
 550:	0f 90       	pop	r0
 552:	0f be       	out	0x3f, r0	; 63
 554:	0f 90       	pop	r0
 556:	1f 90       	pop	r1
 558:	18 95       	reti

0000055a <__vector_12>:
 */


void __vector_12 (void) __attribute__((signal));
void __vector_12 (void)
{
 55a:	1f 92       	push	r1
 55c:	0f 92       	push	r0
 55e:	0f b6       	in	r0, 0x3f	; 63
 560:	0f 92       	push	r0
 562:	11 24       	eor	r1, r1
 564:	2f 93       	push	r18
 566:	3f 93       	push	r19
 568:	4f 93       	push	r20
 56a:	5f 93       	push	r21
 56c:	6f 93       	push	r22
 56e:	7f 93       	push	r23
 570:	8f 93       	push	r24
 572:	9f 93       	push	r25
 574:	af 93       	push	r26
 576:	bf 93       	push	r27
 578:	ef 93       	push	r30
 57a:	ff 93       	push	r31
	g_SPI_Config->P_IRQ_CALL() ;
 57c:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <g_SPI_Config>
 580:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <g_SPI_Config+0x1>
 584:	07 80       	ldd	r0, Z+7	; 0x07
 586:	f0 85       	ldd	r31, Z+8	; 0x08
 588:	e0 2d       	mov	r30, r0
 58a:	09 95       	icall
}
 58c:	ff 91       	pop	r31
 58e:	ef 91       	pop	r30
 590:	bf 91       	pop	r27
 592:	af 91       	pop	r26
 594:	9f 91       	pop	r25
 596:	8f 91       	pop	r24
 598:	7f 91       	pop	r23
 59a:	6f 91       	pop	r22
 59c:	5f 91       	pop	r21
 59e:	4f 91       	pop	r20
 5a0:	3f 91       	pop	r19
 5a2:	2f 91       	pop	r18
 5a4:	0f 90       	pop	r0
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	0f 90       	pop	r0
 5aa:	1f 90       	pop	r1
 5ac:	18 95       	reti

000005ae <__vector_10>:
 * ===============================================================
 */

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
 5ae:	1f 92       	push	r1
 5b0:	0f 92       	push	r0
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	0f 92       	push	r0
 5b6:	11 24       	eor	r1, r1
 5b8:	2f 93       	push	r18
 5ba:	3f 93       	push	r19
 5bc:	4f 93       	push	r20
 5be:	5f 93       	push	r21
 5c0:	6f 93       	push	r22
 5c2:	7f 93       	push	r23
 5c4:	8f 93       	push	r24
 5c6:	9f 93       	push	r25
 5c8:	af 93       	push	r26
 5ca:	bf 93       	push	r27
 5cc:	ef 93       	push	r30
 5ce:	ff 93       	push	r31
	g_TIM0_Config->P_OCIE0_CALL();
 5d0:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <g_TIM0_Config>
 5d4:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <g_TIM0_Config+0x1>
 5d8:	00 84       	ldd	r0, Z+8	; 0x08
 5da:	f1 85       	ldd	r31, Z+9	; 0x09
 5dc:	e0 2d       	mov	r30, r0
 5de:	09 95       	icall
}
 5e0:	ff 91       	pop	r31
 5e2:	ef 91       	pop	r30
 5e4:	bf 91       	pop	r27
 5e6:	af 91       	pop	r26
 5e8:	9f 91       	pop	r25
 5ea:	8f 91       	pop	r24
 5ec:	7f 91       	pop	r23
 5ee:	6f 91       	pop	r22
 5f0:	5f 91       	pop	r21
 5f2:	4f 91       	pop	r20
 5f4:	3f 91       	pop	r19
 5f6:	2f 91       	pop	r18
 5f8:	0f 90       	pop	r0
 5fa:	0f be       	out	0x3f, r0	; 63
 5fc:	0f 90       	pop	r0
 5fe:	1f 90       	pop	r1
 600:	18 95       	reti

00000602 <__vector_11>:

void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
 602:	1f 92       	push	r1
 604:	0f 92       	push	r0
 606:	0f b6       	in	r0, 0x3f	; 63
 608:	0f 92       	push	r0
 60a:	11 24       	eor	r1, r1
 60c:	2f 93       	push	r18
 60e:	3f 93       	push	r19
 610:	4f 93       	push	r20
 612:	5f 93       	push	r21
 614:	6f 93       	push	r22
 616:	7f 93       	push	r23
 618:	8f 93       	push	r24
 61a:	9f 93       	push	r25
 61c:	af 93       	push	r26
 61e:	bf 93       	push	r27
 620:	ef 93       	push	r30
 622:	ff 93       	push	r31
	g_TIM0_Config->P_TOIE0_CALL();
 624:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <g_TIM0_Config>
 628:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <g_TIM0_Config+0x1>
 62c:	06 80       	ldd	r0, Z+6	; 0x06
 62e:	f7 81       	ldd	r31, Z+7	; 0x07
 630:	e0 2d       	mov	r30, r0
 632:	09 95       	icall
}
 634:	ff 91       	pop	r31
 636:	ef 91       	pop	r30
 638:	bf 91       	pop	r27
 63a:	af 91       	pop	r26
 63c:	9f 91       	pop	r25
 63e:	8f 91       	pop	r24
 640:	7f 91       	pop	r23
 642:	6f 91       	pop	r22
 644:	5f 91       	pop	r21
 646:	4f 91       	pop	r20
 648:	3f 91       	pop	r19
 64a:	2f 91       	pop	r18
 64c:	0f 90       	pop	r0
 64e:	0f be       	out	0x3f, r0	; 63
 650:	0f 90       	pop	r0
 652:	1f 90       	pop	r1
 654:	18 95       	reti

00000656 <__vector_13>:
 *
 * ===============================================================
 */
void __vector_13 (void) __attribute__((signal));
void __vector_13 (void)
{
 656:	1f 92       	push	r1
 658:	0f 92       	push	r0
 65a:	0f b6       	in	r0, 0x3f	; 63
 65c:	0f 92       	push	r0
 65e:	11 24       	eor	r1, r1
 660:	2f 93       	push	r18
 662:	3f 93       	push	r19
 664:	4f 93       	push	r20
 666:	5f 93       	push	r21
 668:	6f 93       	push	r22
 66a:	7f 93       	push	r23
 66c:	8f 93       	push	r24
 66e:	9f 93       	push	r25
 670:	af 93       	push	r26
 672:	bf 93       	push	r27
 674:	ef 93       	push	r30
 676:	ff 93       	push	r31
	//Call function
	GPU_IRQ_CALL[2]();
 678:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <GPU_IRQ_CALL+0x4>
 67c:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <GPU_IRQ_CALL+0x5>
 680:	09 95       	icall
}
 682:	ff 91       	pop	r31
 684:	ef 91       	pop	r30
 686:	bf 91       	pop	r27
 688:	af 91       	pop	r26
 68a:	9f 91       	pop	r25
 68c:	8f 91       	pop	r24
 68e:	7f 91       	pop	r23
 690:	6f 91       	pop	r22
 692:	5f 91       	pop	r21
 694:	4f 91       	pop	r20
 696:	3f 91       	pop	r19
 698:	2f 91       	pop	r18
 69a:	0f 90       	pop	r0
 69c:	0f be       	out	0x3f, r0	; 63
 69e:	0f 90       	pop	r0
 6a0:	1f 90       	pop	r1
 6a2:	18 95       	reti

000006a4 <__vector_14>:

void __vector_14 (void) __attribute__((signal));
void __vector_14 (void)
{
 6a4:	1f 92       	push	r1
 6a6:	0f 92       	push	r0
 6a8:	0f b6       	in	r0, 0x3f	; 63
 6aa:	0f 92       	push	r0
 6ac:	11 24       	eor	r1, r1
 6ae:	2f 93       	push	r18
 6b0:	3f 93       	push	r19
 6b2:	4f 93       	push	r20
 6b4:	5f 93       	push	r21
 6b6:	6f 93       	push	r22
 6b8:	7f 93       	push	r23
 6ba:	8f 93       	push	r24
 6bc:	9f 93       	push	r25
 6be:	af 93       	push	r26
 6c0:	bf 93       	push	r27
 6c2:	ef 93       	push	r30
 6c4:	ff 93       	push	r31
	//Call function
	GPU_IRQ_CALL[1]();
 6c6:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <GPU_IRQ_CALL+0x2>
 6ca:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <GPU_IRQ_CALL+0x3>
 6ce:	09 95       	icall
}
 6d0:	ff 91       	pop	r31
 6d2:	ef 91       	pop	r30
 6d4:	bf 91       	pop	r27
 6d6:	af 91       	pop	r26
 6d8:	9f 91       	pop	r25
 6da:	8f 91       	pop	r24
 6dc:	7f 91       	pop	r23
 6de:	6f 91       	pop	r22
 6e0:	5f 91       	pop	r21
 6e2:	4f 91       	pop	r20
 6e4:	3f 91       	pop	r19
 6e6:	2f 91       	pop	r18
 6e8:	0f 90       	pop	r0
 6ea:	0f be       	out	0x3f, r0	; 63
 6ec:	0f 90       	pop	r0
 6ee:	1f 90       	pop	r1
 6f0:	18 95       	reti

000006f2 <__vector_15>:

void __vector_15 (void) __attribute__((signal));
void __vector_15 (void)
{
 6f2:	1f 92       	push	r1
 6f4:	0f 92       	push	r0
 6f6:	0f b6       	in	r0, 0x3f	; 63
 6f8:	0f 92       	push	r0
 6fa:	11 24       	eor	r1, r1
 6fc:	2f 93       	push	r18
 6fe:	3f 93       	push	r19
 700:	4f 93       	push	r20
 702:	5f 93       	push	r21
 704:	6f 93       	push	r22
 706:	7f 93       	push	r23
 708:	8f 93       	push	r24
 70a:	9f 93       	push	r25
 70c:	af 93       	push	r26
 70e:	bf 93       	push	r27
 710:	ef 93       	push	r30
 712:	ff 93       	push	r31
	//Call function
	GPU_IRQ_CALL[0]();
 714:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <GPU_IRQ_CALL>
 718:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <GPU_IRQ_CALL+0x1>
 71c:	09 95       	icall
}
 71e:	ff 91       	pop	r31
 720:	ef 91       	pop	r30
 722:	bf 91       	pop	r27
 724:	af 91       	pop	r26
 726:	9f 91       	pop	r25
 728:	8f 91       	pop	r24
 72a:	7f 91       	pop	r23
 72c:	6f 91       	pop	r22
 72e:	5f 91       	pop	r21
 730:	4f 91       	pop	r20
 732:	3f 91       	pop	r19
 734:	2f 91       	pop	r18
 736:	0f 90       	pop	r0
 738:	0f be       	out	0x3f, r0	; 63
 73a:	0f 90       	pop	r0
 73c:	1f 90       	pop	r1
 73e:	18 95       	reti

00000740 <EEPROM_Init>:

#include "EEPROM.h"


void EEPROM_Init(void)
{
 740:	cf 93       	push	r28
 742:	df 93       	push	r29
 744:	00 d0       	rcall	.+0      	; 0x746 <EEPROM_Init+0x6>
 746:	00 d0       	rcall	.+0      	; 0x748 <EEPROM_Init+0x8>
 748:	00 d0       	rcall	.+0      	; 0x74a <EEPROM_Init+0xa>
 74a:	cd b7       	in	r28, 0x3d	; 61
 74c:	de b7       	in	r29, 0x3e	; 62
	I2C_config_t I2C_Config ;
	I2C_Config.IRQ_EN =I2C_IRQ_ENABLE_Disable ;
 74e:	8e ef       	ldi	r24, 0xFE	; 254
 750:	8b 83       	std	Y+3, r24	; 0x03
	I2C_Config.P_IRQ_CALL = NULL ;
 752:	1e 82       	std	Y+6, r1	; 0x06
 754:	1d 82       	std	Y+5, r1	; 0x05
	I2C_Config.Speed_MODE = I2C_Speed_MODE_100 ;
 756:	80 ea       	ldi	r24, 0xA0	; 160
 758:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Config.Prescaler = I2C_Prescaler_1     ;
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	8c 83       	std	Y+4, r24	; 0x04
	MCAL_I2C_Init(&I2C_Config) ;
 75e:	ce 01       	movw	r24, r28
 760:	01 96       	adiw	r24, 0x01	; 1
 762:	0e 94 f7 00 	call	0x1ee	; 0x1ee <MCAL_I2C_Init>
}
 766:	26 96       	adiw	r28, 0x06	; 6
 768:	0f b6       	in	r0, 0x3f	; 63
 76a:	f8 94       	cli
 76c:	de bf       	out	0x3e, r29	; 62
 76e:	0f be       	out	0x3f, r0	; 63
 770:	cd bf       	out	0x3d, r28	; 61
 772:	df 91       	pop	r29
 774:	cf 91       	pop	r28
 776:	08 95       	ret

00000778 <EEPROM_Write_Data>:


void EEPROM_Write_Data(uint16_t EEPROM_Address , uint8_t* PTXBuffer , uint8_t Dataln)
{
 778:	cf 93       	push	r28
 77a:	df 93       	push	r29
 77c:	cd b7       	in	r28, 0x3d	; 61
 77e:	de b7       	in	r29, 0x3e	; 62
 780:	cf 5f       	subi	r28, 0xFF	; 255
 782:	d1 09       	sbc	r29, r1
 784:	0f b6       	in	r0, 0x3f	; 63
 786:	f8 94       	cli
 788:	de bf       	out	0x3e, r29	; 62
 78a:	0f be       	out	0x3f, r0	; 63
 78c:	cd bf       	out	0x3d, r28	; 61
 78e:	fb 01       	movw	r30, r22
	uint8_t i=0;
	uint8_t buffer[255];
	buffer[0] = (uint8_t)(EEPROM_Address>>8);   // Send Upper Byte
 790:	99 83       	std	Y+1, r25	; 0x01
	buffer[1] = (uint8_t)(EEPROM_Address);		// Send Lower Byte
 792:	8a 83       	std	Y+2, r24	; 0x02
	for (i=2 ; i< Dataln+2 ; i++)
 794:	52 e0       	ldi	r21, 0x02	; 2
 796:	09 c0       	rjmp	.+18     	; 0x7aa <EEPROM_Write_Data+0x32>
	{
		buffer[i]= *PTXBuffer;
 798:	21 91       	ld	r18, Z+
 79a:	a1 e0       	ldi	r26, 0x01	; 1
 79c:	b0 e0       	ldi	r27, 0x00	; 0
 79e:	ac 0f       	add	r26, r28
 7a0:	bd 1f       	adc	r27, r29
 7a2:	a8 0f       	add	r26, r24
 7a4:	b9 1f       	adc	r27, r25
 7a6:	2c 93       	st	X, r18
{
	uint8_t i=0;
	uint8_t buffer[255];
	buffer[0] = (uint8_t)(EEPROM_Address>>8);   // Send Upper Byte
	buffer[1] = (uint8_t)(EEPROM_Address);		// Send Lower Byte
	for (i=2 ; i< Dataln+2 ; i++)
 7a8:	5f 5f       	subi	r21, 0xFF	; 255
 7aa:	85 2f       	mov	r24, r21
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	24 2f       	mov	r18, r20
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	2e 5f       	subi	r18, 0xFE	; 254
 7b4:	3f 4f       	sbci	r19, 0xFF	; 255
 7b6:	82 17       	cp	r24, r18
 7b8:	93 07       	cpc	r25, r19
 7ba:	74 f3       	brlt	.-36     	; 0x798 <EEPROM_Write_Data+0x20>
	{
		buffer[i]= *PTXBuffer;
		PTXBuffer++;
	}
	
	MCAL_I2C_Master_TX(EEPROM_Slave_Address_Write, buffer, Dataln+2 ,With_Stop);
 7bc:	4e 5f       	subi	r20, 0xFE	; 254
 7be:	20 e0       	ldi	r18, 0x00	; 0
 7c0:	be 01       	movw	r22, r28
 7c2:	6f 5f       	subi	r22, 0xFF	; 255
 7c4:	7f 4f       	sbci	r23, 0xFF	; 255
 7c6:	86 ea       	ldi	r24, 0xA6	; 166
 7c8:	0e 94 93 01 	call	0x326	; 0x326 <MCAL_I2C_Master_TX>
	return 0;
}
 7cc:	c1 50       	subi	r28, 0x01	; 1
 7ce:	df 4f       	sbci	r29, 0xFF	; 255
 7d0:	0f b6       	in	r0, 0x3f	; 63
 7d2:	f8 94       	cli
 7d4:	de bf       	out	0x3e, r29	; 62
 7d6:	0f be       	out	0x3f, r0	; 63
 7d8:	cd bf       	out	0x3d, r28	; 61
 7da:	df 91       	pop	r29
 7dc:	cf 91       	pop	r28
 7de:	08 95       	ret

000007e0 <EEPROM_Read_Data>:


void EEPROM_Read_Data( uint16_t EEPROM_Address , uint8_t* PRXBuffer , uint8_t Dataln )
{
 7e0:	ff 92       	push	r15
 7e2:	0f 93       	push	r16
 7e4:	1f 93       	push	r17
 7e6:	cf 93       	push	r28
 7e8:	df 93       	push	r29
 7ea:	00 d0       	rcall	.+0      	; 0x7ec <EEPROM_Read_Data+0xc>
 7ec:	cd b7       	in	r28, 0x3d	; 61
 7ee:	de b7       	in	r29, 0x3e	; 62
 7f0:	8b 01       	movw	r16, r22
 7f2:	f4 2e       	mov	r15, r20
	uint8_t i=0  ;

	uint8_t buffer[2];
	buffer[0] = (uint8_t)(EEPROM_Address>>8);   // Send Upper Byte
 7f4:	99 83       	std	Y+1, r25	; 0x01
	buffer[1] = (uint8_t)(EEPROM_Address);		 // Send Lower Byte
 7f6:	8a 83       	std	Y+2, r24	; 0x02
	//send address
	MCAL_I2C_Master_TX(EEPROM_Slave_Address_Write, buffer, 2 , Without_Stop);
 7f8:	21 e0       	ldi	r18, 0x01	; 1
 7fa:	42 e0       	ldi	r20, 0x02	; 2
 7fc:	be 01       	movw	r22, r28
 7fe:	6f 5f       	subi	r22, 0xFF	; 255
 800:	7f 4f       	sbci	r23, 0xFF	; 255
 802:	86 ea       	ldi	r24, 0xA6	; 166
 804:	0e 94 93 01 	call	0x326	; 0x326 <MCAL_I2C_Master_TX>
	// Read Data
	MCAL_I2C_Master_RX( EEPROM_Slave_Address_Read , PRXBuffer , Dataln );
 808:	4f 2d       	mov	r20, r15
 80a:	b8 01       	movw	r22, r16
 80c:	87 ea       	ldi	r24, 0xA7	; 167
 80e:	0e 94 c9 01 	call	0x392	; 0x392 <MCAL_I2C_Master_RX>
 812:	0f 90       	pop	r0
 814:	0f 90       	pop	r0
 816:	df 91       	pop	r29
 818:	cf 91       	pop	r28
 81a:	1f 91       	pop	r17
 81c:	0f 91       	pop	r16
 81e:	ff 90       	pop	r15
 820:	08 95       	ret

00000822 <LCD_cmd>:
	_delay_ms(2);
#endif
}

void LCD_cmd( unsigned char cmd )
{
 822:	cf 93       	push	r28
 824:	c8 2f       	mov	r28, r24
	_delay_us(1);       
	MCAL_GPIO_WritePin( lcd_control_Port , en , GPIO_PIN_RESET ) ;               
	_delay_us(200);
#endif
#ifdef _4_bit_mode
	MCAL_GPIO_WritePort(lcd_Data_Port, (cmd & 0XF0));
 826:	68 2f       	mov	r22, r24
 828:	60 7f       	andi	r22, 0xF0	; 240
 82a:	89 e3       	ldi	r24, 0x39	; 57
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(lcd_control_Port,rs,GPIO_PIN_RESET);            // rs=0 i.e select command reg
 832:	40 e0       	ldi	r20, 0x00	; 0
 834:	62 e0       	ldi	r22, 0x02	; 2
 836:	86 e3       	ldi	r24, 0x36	; 54
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,RW,GPIO_PIN_RESET);					 // R/W=0 i.e MODE Write
 83e:	40 e0       	ldi	r20, 0x00	; 0
 840:	68 e0       	ldi	r22, 0x08	; 8
 842:	86 e3       	ldi	r24, 0x36	; 54
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	0e 94 e5 00 	call	0x1ca	; 0x1ca <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_SET);					// give high pulse to enable pin
 84a:	41 e0       	ldi	r20, 0x01	; 1
 84c:	64 e0       	ldi	r22, 0x04	; 4
 84e:	86 e3       	ldi	r24, 0x36	; 54
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	0e 94 e5 00 	call	0x1ca	; 0x1ca <MCAL_GPIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 856:	00 00       	nop
	_delay_us(1);
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_RESET);				 // give low pulse to enable pin
 858:	40 e0       	ldi	r20, 0x00	; 0
 85a:	64 e0       	ldi	r22, 0x04	; 4
 85c:	86 e3       	ldi	r24, 0x36	; 54
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	0e 94 e5 00 	call	0x1ca	; 0x1ca <MCAL_GPIO_WritePin>
 864:	82 e4       	ldi	r24, 0x42	; 66
 866:	8a 95       	dec	r24
 868:	f1 f7       	brne	.-4      	; 0x866 <__stack+0x7>
 86a:	00 c0       	rjmp	.+0      	; 0x86c <__stack+0xd>
	_delay_us(200);
	MCAL_GPIO_WritePort(lcd_Data_Port, ( cmd & 0X0F) << 4);               //sending lower nibble of 8 bit 
 86c:	90 e1       	ldi	r25, 0x10	; 16
 86e:	c9 9f       	mul	r28, r25
 870:	b0 01       	movw	r22, r0
 872:	11 24       	eor	r1, r1
 874:	89 e3       	ldi	r24, 0x39	; 57
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(lcd_control_Port,rs,GPIO_PIN_RESET);            // rs=0 i.e select command reg
 87c:	40 e0       	ldi	r20, 0x00	; 0
 87e:	62 e0       	ldi	r22, 0x02	; 2
 880:	86 e3       	ldi	r24, 0x36	; 54
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	0e 94 e5 00 	call	0x1ca	; 0x1ca <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,RW,GPIO_PIN_RESET);					 // R/W=0 i.e MODE Write
 888:	40 e0       	ldi	r20, 0x00	; 0
 88a:	68 e0       	ldi	r22, 0x08	; 8
 88c:	86 e3       	ldi	r24, 0x36	; 54
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	0e 94 e5 00 	call	0x1ca	; 0x1ca <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_SET);					// give high pulse to enable pin
 894:	41 e0       	ldi	r20, 0x01	; 1
 896:	64 e0       	ldi	r22, 0x04	; 4
 898:	86 e3       	ldi	r24, 0x36	; 54
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <MCAL_GPIO_WritePin>
 8a0:	00 00       	nop
	_delay_us(1);
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_RESET);				 // give low pulse to enable pin
 8a2:	40 e0       	ldi	r20, 0x00	; 0
 8a4:	64 e0       	ldi	r22, 0x04	; 4
 8a6:	86 e3       	ldi	r24, 0x36	; 54
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	0e 94 e5 00 	call	0x1ca	; 0x1ca <MCAL_GPIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8ae:	83 ef       	ldi	r24, 0xF3	; 243
 8b0:	91 e0       	ldi	r25, 0x01	; 1
 8b2:	01 97       	sbiw	r24, 0x01	; 1
 8b4:	f1 f7       	brne	.-4      	; 0x8b2 <__stack+0x53>
 8b6:	00 c0       	rjmp	.+0      	; 0x8b8 <__stack+0x59>
 8b8:	00 00       	nop
	_delay_ms(2);
#endif
}
 8ba:	cf 91       	pop	r28
 8bc:	08 95       	ret

000008be <LCD_init>:
#include "LCD.h"

#define _4_bit_mode

void LCD_init(void)
{
 8be:	ef 92       	push	r14
 8c0:	ff 92       	push	r15
 8c2:	0f 93       	push	r16
 8c4:	1f 93       	push	r17
 8c6:	cf 93       	push	r28
 8c8:	df 93       	push	r29
 8ca:	00 d0       	rcall	.+0      	; 0x8cc <LCD_init+0xe>
 8cc:	cd b7       	in	r28, 0x3d	; 61
 8ce:	de b7       	in	r29, 0x3e	; 62
	GPIO_Pinconfig_t config ;
		
	// set port lcd_data as output
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 8d0:	13 e0       	ldi	r17, 0x03	; 3
 8d2:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_0 ;
 8d4:	81 e0       	ldi	r24, 0x01	; 1
 8d6:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
 8d8:	be 01       	movw	r22, r28
 8da:	6f 5f       	subi	r22, 0xFF	; 255
 8dc:	7f 4f       	sbci	r23, 0xFF	; 255
 8de:	89 e3       	ldi	r24, 0x39	; 57
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	0e 94 bd 00 	call	0x17a	; 0x17a <MCAL_GPIO_Init>
		
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 8e6:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_1 ;
 8e8:	68 94       	set
 8ea:	ff 24       	eor	r15, r15
 8ec:	f1 f8       	bld	r15, 1
 8ee:	f9 82       	std	Y+1, r15	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
 8f0:	be 01       	movw	r22, r28
 8f2:	6f 5f       	subi	r22, 0xFF	; 255
 8f4:	7f 4f       	sbci	r23, 0xFF	; 255
 8f6:	89 e3       	ldi	r24, 0x39	; 57
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	0e 94 bd 00 	call	0x17a	; 0x17a <MCAL_GPIO_Init>
				
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 8fe:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_2 ;
 900:	68 94       	set
 902:	ee 24       	eor	r14, r14
 904:	e2 f8       	bld	r14, 2
 906:	e9 82       	std	Y+1, r14	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
 908:	be 01       	movw	r22, r28
 90a:	6f 5f       	subi	r22, 0xFF	; 255
 90c:	7f 4f       	sbci	r23, 0xFF	; 255
 90e:	89 e3       	ldi	r24, 0x39	; 57
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	0e 94 bd 00 	call	0x17a	; 0x17a <MCAL_GPIO_Init>
						
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 916:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_3 ;
 918:	08 e0       	ldi	r16, 0x08	; 8
 91a:	09 83       	std	Y+1, r16	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
 91c:	be 01       	movw	r22, r28
 91e:	6f 5f       	subi	r22, 0xFF	; 255
 920:	7f 4f       	sbci	r23, 0xFF	; 255
 922:	89 e3       	ldi	r24, 0x39	; 57
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	0e 94 bd 00 	call	0x17a	; 0x17a <MCAL_GPIO_Init>
								
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 92a:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_4 ;
 92c:	80 e1       	ldi	r24, 0x10	; 16
 92e:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
 930:	be 01       	movw	r22, r28
 932:	6f 5f       	subi	r22, 0xFF	; 255
 934:	7f 4f       	sbci	r23, 0xFF	; 255
 936:	89 e3       	ldi	r24, 0x39	; 57
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	0e 94 bd 00 	call	0x17a	; 0x17a <MCAL_GPIO_Init>
										
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 93e:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_5 ;
 940:	80 e2       	ldi	r24, 0x20	; 32
 942:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
 944:	be 01       	movw	r22, r28
 946:	6f 5f       	subi	r22, 0xFF	; 255
 948:	7f 4f       	sbci	r23, 0xFF	; 255
 94a:	89 e3       	ldi	r24, 0x39	; 57
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	0e 94 bd 00 	call	0x17a	; 0x17a <MCAL_GPIO_Init>
												
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 952:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_6 ;
 954:	80 e4       	ldi	r24, 0x40	; 64
 956:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
 958:	be 01       	movw	r22, r28
 95a:	6f 5f       	subi	r22, 0xFF	; 255
 95c:	7f 4f       	sbci	r23, 0xFF	; 255
 95e:	89 e3       	ldi	r24, 0x39	; 57
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	0e 94 bd 00 	call	0x17a	; 0x17a <MCAL_GPIO_Init>
														
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 966:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = GPIO_PIN_7 ;
 968:	80 e8       	ldi	r24, 0x80	; 128
 96a:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init( lcd_Data_Direction , & config ) ;
 96c:	be 01       	movw	r22, r28
 96e:	6f 5f       	subi	r22, 0xFF	; 255
 970:	7f 4f       	sbci	r23, 0xFF	; 255
 972:	89 e3       	ldi	r24, 0x39	; 57
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	0e 94 bd 00 	call	0x17a	; 0x17a <MCAL_GPIO_Init>
	
	// set en rs rw as outpit
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 97a:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = en ;
 97c:	e9 82       	std	Y+1, r14	; 0x01
	MCAL_GPIO_Init( lcd_control_Direction , & config ) ;
 97e:	be 01       	movw	r22, r28
 980:	6f 5f       	subi	r22, 0xFF	; 255
 982:	7f 4f       	sbci	r23, 0xFF	; 255
 984:	86 e3       	ldi	r24, 0x36	; 54
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	0e 94 bd 00 	call	0x17a	; 0x17a <MCAL_GPIO_Init>
	
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 98c:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = rs ;
 98e:	f9 82       	std	Y+1, r15	; 0x01
	MCAL_GPIO_Init( lcd_control_Direction , & config ) ;
 990:	be 01       	movw	r22, r28
 992:	6f 5f       	subi	r22, 0xFF	; 255
 994:	7f 4f       	sbci	r23, 0xFF	; 255
 996:	86 e3       	ldi	r24, 0x36	; 54
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	0e 94 bd 00 	call	0x17a	; 0x17a <MCAL_GPIO_Init>
	
	config.GPIO_MODE =  GPIO_MODE_OUTPUT ;
 99e:	1a 83       	std	Y+2, r17	; 0x02
	config.pinNumber = RW ;
 9a0:	09 83       	std	Y+1, r16	; 0x01
	MCAL_GPIO_Init( lcd_control_Direction , & config ) ;
 9a2:	be 01       	movw	r22, r28
 9a4:	6f 5f       	subi	r22, 0xFF	; 255
 9a6:	7f 4f       	sbci	r23, 0xFF	; 255
 9a8:	86 e3       	ldi	r24, 0x36	; 54
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	0e 94 bd 00 	call	0x17a	; 0x17a <MCAL_GPIO_Init>
 9b0:	87 e8       	ldi	r24, 0x87	; 135
 9b2:	93 e1       	ldi	r25, 0x13	; 19
 9b4:	01 97       	sbiw	r24, 0x01	; 1
 9b6:	f1 f7       	brne	.-4      	; 0x9b4 <LCD_init+0xf6>
 9b8:	00 c0       	rjmp	.+0      	; 0x9ba <LCD_init+0xfc>
 9ba:	00 00       	nop
	LCD_cmd(Entry_Mode);                        // take cursor to next position "shift cursor to right"
	LCD_cmd(Clear_Display);                    // Clear display screen
	_delay_ms(2);
#endif
#ifdef _4_bit_mode
	LCD_cmd(0x02);                // send for 4 bit initialization of LCD "shift cursor to left"
 9bc:	82 e0       	ldi	r24, 0x02	; 2
 9be:	0e 94 11 04 	call	0x822	; 0x822 <LCD_cmd>
	LCD_cmd(_2L_4b);                              // 2 line 5*7 matrix in 4-bit mode
 9c2:	88 e2       	ldi	r24, 0x28	; 40
 9c4:	0e 94 11 04 	call	0x822	; 0x822 <LCD_cmd>
	LCD_cmd(Entry_Mode);                        // take cursor to next position "shift cursor to right"
 9c8:	86 e0       	ldi	r24, 0x06	; 6
 9ca:	0e 94 11 04 	call	0x822	; 0x822 <LCD_cmd>
	LCD_cmd(beginning_of_the_first_line);
 9ce:	80 e8       	ldi	r24, 0x80	; 128
 9d0:	0e 94 11 04 	call	0x822	; 0x822 <LCD_cmd>
	LCD_cmd(Display_on_Cursor_off);              // Display on cursor off
 9d4:	8c e0       	ldi	r24, 0x0C	; 12
 9d6:	0e 94 11 04 	call	0x822	; 0x822 <LCD_cmd>
	LCD_cmd(Clear_Display);                    // Clear display screen
 9da:	81 e0       	ldi	r24, 0x01	; 1
 9dc:	0e 94 11 04 	call	0x822	; 0x822 <LCD_cmd>
 9e0:	83 ef       	ldi	r24, 0xF3	; 243
 9e2:	91 e0       	ldi	r25, 0x01	; 1
 9e4:	01 97       	sbiw	r24, 0x01	; 1
 9e6:	f1 f7       	brne	.-4      	; 0x9e4 <LCD_init+0x126>
 9e8:	00 c0       	rjmp	.+0      	; 0x9ea <LCD_init+0x12c>
 9ea:	00 00       	nop
	_delay_ms(2);
#endif
}
 9ec:	0f 90       	pop	r0
 9ee:	0f 90       	pop	r0
 9f0:	df 91       	pop	r29
 9f2:	cf 91       	pop	r28
 9f4:	1f 91       	pop	r17
 9f6:	0f 91       	pop	r16
 9f8:	ff 90       	pop	r15
 9fa:	ef 90       	pop	r14
 9fc:	08 95       	ret

000009fe <main>:
void TIMER0_CALL(void)
{
	MCAL_GPIO_TogglePin(GPIOA , GPIO_PIN_0 );
}
int main(void)
{	
 9fe:	cf 93       	push	r28
 a00:	df 93       	push	r29
 a02:	cd b7       	in	r28, 0x3d	; 61
 a04:	de b7       	in	r29, 0x3e	; 62
 a06:	28 97       	sbiw	r28, 0x08	; 8
 a08:	0f b6       	in	r0, 0x3f	; 63
 a0a:	f8 94       	cli
 a0c:	de bf       	out	0x3e, r29	; 62
 a0e:	0f be       	out	0x3f, r0	; 63
 a10:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
 a12:	0e 94 5f 04 	call	0x8be	; 0x8be <LCD_init>
	uint8_t Data1[] = {0x1,0x2,0x3,0x4};
 a16:	81 e0       	ldi	r24, 0x01	; 1
 a18:	89 83       	std	Y+1, r24	; 0x01
 a1a:	82 e0       	ldi	r24, 0x02	; 2
 a1c:	8a 83       	std	Y+2, r24	; 0x02
 a1e:	83 e0       	ldi	r24, 0x03	; 3
 a20:	8b 83       	std	Y+3, r24	; 0x03
 a22:	84 e0       	ldi	r24, 0x04	; 4
 a24:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t Data2[4]= {0};
 a26:	1d 82       	std	Y+5, r1	; 0x05
 a28:	1e 82       	std	Y+6, r1	; 0x06
 a2a:	1f 82       	std	Y+7, r1	; 0x07
 a2c:	18 86       	std	Y+8, r1	; 0x08

	EEPROM_Init();
 a2e:	0e 94 a0 03 	call	0x740	; 0x740 <EEPROM_Init>
	EEPROM_Write_Data(0xAF, Data1, 4);
 a32:	44 e0       	ldi	r20, 0x04	; 4
 a34:	be 01       	movw	r22, r28
 a36:	6f 5f       	subi	r22, 0xFF	; 255
 a38:	7f 4f       	sbci	r23, 0xFF	; 255
 a3a:	8f ea       	ldi	r24, 0xAF	; 175
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	0e 94 bc 03 	call	0x778	; 0x778 <EEPROM_Write_Data>
 a42:	87 ea       	ldi	r24, 0xA7	; 167
 a44:	91 e6       	ldi	r25, 0x61	; 97
 a46:	01 97       	sbiw	r24, 0x01	; 1
 a48:	f1 f7       	brne	.-4      	; 0xa46 <main+0x48>
 a4a:	00 c0       	rjmp	.+0      	; 0xa4c <main+0x4e>
 a4c:	00 00       	nop
	_delay_ms(100);
	EEPROM_Read_Data(0xAF, Data2, 4);
 a4e:	44 e0       	ldi	r20, 0x04	; 4
 a50:	be 01       	movw	r22, r28
 a52:	6b 5f       	subi	r22, 0xFB	; 251
 a54:	7f 4f       	sbci	r23, 0xFF	; 255
 a56:	8f ea       	ldi	r24, 0xAF	; 175
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <EEPROM_Read_Data>
 a5e:	ff cf       	rjmp	.-2      	; 0xa5e <main+0x60>

00000a60 <__udivmodsi4>:
 a60:	a1 e2       	ldi	r26, 0x21	; 33
 a62:	1a 2e       	mov	r1, r26
 a64:	aa 1b       	sub	r26, r26
 a66:	bb 1b       	sub	r27, r27
 a68:	fd 01       	movw	r30, r26
 a6a:	0d c0       	rjmp	.+26     	; 0xa86 <__udivmodsi4_ep>

00000a6c <__udivmodsi4_loop>:
 a6c:	aa 1f       	adc	r26, r26
 a6e:	bb 1f       	adc	r27, r27
 a70:	ee 1f       	adc	r30, r30
 a72:	ff 1f       	adc	r31, r31
 a74:	a2 17       	cp	r26, r18
 a76:	b3 07       	cpc	r27, r19
 a78:	e4 07       	cpc	r30, r20
 a7a:	f5 07       	cpc	r31, r21
 a7c:	20 f0       	brcs	.+8      	; 0xa86 <__udivmodsi4_ep>
 a7e:	a2 1b       	sub	r26, r18
 a80:	b3 0b       	sbc	r27, r19
 a82:	e4 0b       	sbc	r30, r20
 a84:	f5 0b       	sbc	r31, r21

00000a86 <__udivmodsi4_ep>:
 a86:	66 1f       	adc	r22, r22
 a88:	77 1f       	adc	r23, r23
 a8a:	88 1f       	adc	r24, r24
 a8c:	99 1f       	adc	r25, r25
 a8e:	1a 94       	dec	r1
 a90:	69 f7       	brne	.-38     	; 0xa6c <__udivmodsi4_loop>
 a92:	60 95       	com	r22
 a94:	70 95       	com	r23
 a96:	80 95       	com	r24
 a98:	90 95       	com	r25
 a9a:	9b 01       	movw	r18, r22
 a9c:	ac 01       	movw	r20, r24
 a9e:	bd 01       	movw	r22, r26
 aa0:	cf 01       	movw	r24, r30
 aa2:	08 95       	ret

00000aa4 <__tablejump2__>:
 aa4:	ee 0f       	add	r30, r30
 aa6:	ff 1f       	adc	r31, r31
 aa8:	05 90       	lpm	r0, Z+
 aaa:	f4 91       	lpm	r31, Z
 aac:	e0 2d       	mov	r30, r0
 aae:	09 94       	ijmp

00000ab0 <_exit>:
 ab0:	f8 94       	cli

00000ab2 <__stop_program>:
 ab2:	ff cf       	rjmp	.-2      	; 0xab2 <__stop_program>
