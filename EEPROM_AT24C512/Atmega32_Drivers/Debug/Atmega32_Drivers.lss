
Atmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000866  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000866  000008fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800068  00800068  00000902  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000902  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000934  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002111  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000104a  00000000  00000000  00002cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001700  00000000  00000000  00003d13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008c4  00000000  00000000  00005414  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ce4  00000000  00000000  00005cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000175a  00000000  00000000  000069bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00008116  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_2>
   c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__vector_7>
  20:	0c 94 49 02 	jmp	0x492	; 0x492 <__vector_8>
  24:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__vector_9>
  28:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__vector_10>
  2c:	0c 94 c7 02 	jmp	0x58e	; 0x58e <__vector_11>
  30:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__vector_12>
  34:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__vector_13>
  38:	0c 94 18 03 	jmp	0x630	; 0x630 <__vector_14>
  3c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	03 01       	movw	r0, r6
  56:	08 01       	movw	r0, r16
  58:	0e 01       	movw	r0, r28
  5a:	26 01       	movw	r4, r12
  5c:	14 01       	movw	r2, r8
  5e:	1a 01       	movw	r2, r20
  60:	32 01       	movw	r6, r4
  62:	20 01       	movw	r4, r0
  64:	38 01       	movw	r6, r16
  66:	2c 01       	movw	r4, r24

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	10 e0       	ldi	r17, 0x00	; 0
  76:	a0 e6       	ldi	r26, 0x60	; 96
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 36       	cpi	r26, 0x68	; 104
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	a8 e6       	ldi	r26, 0x68	; 104
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 37       	cpi	r26, 0x7C	; 124
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <main>
  9e:	0c 94 31 04 	jmp	0x862	; 0x862 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:
 */


void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
	//Call function
	GP_IRQ_CALL[0]();
  c8:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <GP_IRQ_CALL>
  cc:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <GP_IRQ_CALL+0x1>
  d0:	09 95       	icall
}
  d2:	ff 91       	pop	r31
  d4:	ef 91       	pop	r30
  d6:	bf 91       	pop	r27
  d8:	af 91       	pop	r26
  da:	9f 91       	pop	r25
  dc:	8f 91       	pop	r24
  de:	7f 91       	pop	r23
  e0:	6f 91       	pop	r22
  e2:	5f 91       	pop	r21
  e4:	4f 91       	pop	r20
  e6:	3f 91       	pop	r19
  e8:	2f 91       	pop	r18
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <__vector_2>:


void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	2f 93       	push	r18
 100:	3f 93       	push	r19
 102:	4f 93       	push	r20
 104:	5f 93       	push	r21
 106:	6f 93       	push	r22
 108:	7f 93       	push	r23
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	af 93       	push	r26
 110:	bf 93       	push	r27
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
	//Call function
	GP_IRQ_CALL[1]();
 116:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <GP_IRQ_CALL+0x2>
 11a:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <GP_IRQ_CALL+0x3>
 11e:	09 95       	icall
}
 120:	ff 91       	pop	r31
 122:	ef 91       	pop	r30
 124:	bf 91       	pop	r27
 126:	af 91       	pop	r26
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	7f 91       	pop	r23
 12e:	6f 91       	pop	r22
 130:	5f 91       	pop	r21
 132:	4f 91       	pop	r20
 134:	3f 91       	pop	r19
 136:	2f 91       	pop	r18
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <__vector_3>:


void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	2f 93       	push	r18
 14e:	3f 93       	push	r19
 150:	4f 93       	push	r20
 152:	5f 93       	push	r21
 154:	6f 93       	push	r22
 156:	7f 93       	push	r23
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
 15c:	af 93       	push	r26
 15e:	bf 93       	push	r27
 160:	ef 93       	push	r30
 162:	ff 93       	push	r31
	//Call function
	GP_IRQ_CALL[2]();
 164:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <GP_IRQ_CALL+0x4>
 168:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <GP_IRQ_CALL+0x5>
 16c:	09 95       	icall
}
 16e:	ff 91       	pop	r31
 170:	ef 91       	pop	r30
 172:	bf 91       	pop	r27
 174:	af 91       	pop	r26
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	7f 91       	pop	r23
 17c:	6f 91       	pop	r22
 17e:	5f 91       	pop	r21
 180:	4f 91       	pop	r20
 182:	3f 91       	pop	r19
 184:	2f 91       	pop	r18
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <MCAL_I2C_Init>:
	{
		//ERROR
	}
	// return data
	return I2C->TWDR;
}
 190:	fc 01       	movw	r30, r24
 192:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__data_end+0x1>
 196:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
 19a:	80 81       	ld	r24, Z
 19c:	82 b9       	out	0x02, r24	; 2
 19e:	83 81       	ldd	r24, Z+3	; 0x03
 1a0:	81 b9       	out	0x01, r24	; 1
 1a2:	82 81       	ldd	r24, Z+2	; 0x02
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	39 f4       	brne	.+14     	; 0x1b6 <MCAL_I2C_Init+0x26>
 1a8:	96 b7       	in	r25, 0x36	; 54
 1aa:	89 2b       	or	r24, r25
 1ac:	86 bf       	out	0x36, r24	; 54
 1ae:	8f b7       	in	r24, 0x3f	; 63
 1b0:	80 68       	ori	r24, 0x80	; 128
 1b2:	8f bf       	out	0x3f, r24	; 63
 1b4:	06 c0       	rjmp	.+12     	; 0x1c2 <MCAL_I2C_Init+0x32>
 1b6:	96 b7       	in	r25, 0x36	; 54
 1b8:	89 23       	and	r24, r25
 1ba:	86 bf       	out	0x36, r24	; 54
 1bc:	8f b7       	in	r24, 0x3f	; 63
 1be:	8f 77       	andi	r24, 0x7F	; 127
 1c0:	8f bf       	out	0x3f, r24	; 63
 1c2:	21 81       	ldd	r18, Z+1	; 0x01
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	60 e4       	ldi	r22, 0x40	; 64
 1cc:	72 e4       	ldi	r23, 0x42	; 66
 1ce:	8f e0       	ldi	r24, 0x0F	; 15
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 09 04 	call	0x812	; 0x812 <__udivmodsi4>
 1d6:	da 01       	movw	r26, r20
 1d8:	c9 01       	movw	r24, r18
 1da:	40 97       	sbiw	r24, 0x10	; 16
 1dc:	a1 09       	sbc	r26, r1
 1de:	b1 09       	sbc	r27, r1
 1e0:	b6 95       	lsr	r27
 1e2:	a7 95       	ror	r26
 1e4:	97 95       	ror	r25
 1e6:	87 95       	ror	r24
 1e8:	80 b9       	out	0x00, r24	; 0
 1ea:	86 b7       	in	r24, 0x36	; 54
 1ec:	84 64       	ori	r24, 0x44	; 68
 1ee:	86 bf       	out	0x36, r24	; 54
 1f0:	08 95       	ret

000001f2 <Get_flag_stutus>:
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	8a 30       	cpi	r24, 0x0A	; 10
 1f6:	91 05       	cpc	r25, r1
 1f8:	08 f0       	brcs	.+2      	; 0x1fc <Get_flag_stutus+0xa>
 1fa:	53 c0       	rjmp	.+166    	; 0x2a2 <Get_flag_stutus+0xb0>
 1fc:	fc 01       	movw	r30, r24
 1fe:	e6 5d       	subi	r30, 0xD6	; 214
 200:	ff 4f       	sbci	r31, 0xFF	; 255
 202:	0c 94 2b 04 	jmp	0x856	; 0x856 <__tablejump2__>
 206:	06 b6       	in	r0, 0x36	; 54
 208:	07 fe       	sbrs	r0, 7
 20a:	38 c0       	rjmp	.+112    	; 0x27c <Get_flag_stutus+0x8a>
 20c:	21 e0       	ldi	r18, 0x01	; 1
 20e:	49 c0       	rjmp	.+146    	; 0x2a2 <Get_flag_stutus+0xb0>
 210:	81 b1       	in	r24, 0x01	; 1
 212:	88 7f       	andi	r24, 0xF8	; 248
 214:	88 30       	cpi	r24, 0x08	; 8
 216:	a1 f1       	breq	.+104    	; 0x280 <Get_flag_stutus+0x8e>
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	43 c0       	rjmp	.+134    	; 0x2a2 <Get_flag_stutus+0xb0>
 21c:	81 b1       	in	r24, 0x01	; 1
 21e:	88 7f       	andi	r24, 0xF8	; 248
 220:	88 31       	cpi	r24, 0x18	; 24
 222:	81 f1       	breq	.+96     	; 0x284 <Get_flag_stutus+0x92>
 224:	21 e0       	ldi	r18, 0x01	; 1
 226:	3d c0       	rjmp	.+122    	; 0x2a2 <Get_flag_stutus+0xb0>
 228:	81 b1       	in	r24, 0x01	; 1
 22a:	88 7f       	andi	r24, 0xF8	; 248
 22c:	88 32       	cpi	r24, 0x28	; 40
 22e:	61 f1       	breq	.+88     	; 0x288 <Get_flag_stutus+0x96>
 230:	21 e0       	ldi	r18, 0x01	; 1
 232:	37 c0       	rjmp	.+110    	; 0x2a2 <Get_flag_stutus+0xb0>
 234:	81 b1       	in	r24, 0x01	; 1
 236:	88 7f       	andi	r24, 0xF8	; 248
 238:	80 36       	cpi	r24, 0x60	; 96
 23a:	41 f1       	breq	.+80     	; 0x28c <Get_flag_stutus+0x9a>
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	31 c0       	rjmp	.+98     	; 0x2a2 <Get_flag_stutus+0xb0>
 240:	81 b1       	in	r24, 0x01	; 1
 242:	88 7f       	andi	r24, 0xF8	; 248
 244:	80 38       	cpi	r24, 0x80	; 128
 246:	21 f1       	breq	.+72     	; 0x290 <Get_flag_stutus+0x9e>
 248:	21 e0       	ldi	r18, 0x01	; 1
 24a:	2b c0       	rjmp	.+86     	; 0x2a2 <Get_flag_stutus+0xb0>
 24c:	81 b1       	in	r24, 0x01	; 1
 24e:	88 7f       	andi	r24, 0xF8	; 248
 250:	80 34       	cpi	r24, 0x40	; 64
 252:	01 f1       	breq	.+64     	; 0x294 <Get_flag_stutus+0xa2>
 254:	21 e0       	ldi	r18, 0x01	; 1
 256:	25 c0       	rjmp	.+74     	; 0x2a2 <Get_flag_stutus+0xb0>
 258:	81 b1       	in	r24, 0x01	; 1
 25a:	88 7f       	andi	r24, 0xF8	; 248
 25c:	80 35       	cpi	r24, 0x50	; 80
 25e:	e1 f0       	breq	.+56     	; 0x298 <Get_flag_stutus+0xa6>
 260:	21 e0       	ldi	r18, 0x01	; 1
 262:	1f c0       	rjmp	.+62     	; 0x2a2 <Get_flag_stutus+0xb0>
 264:	81 b1       	in	r24, 0x01	; 1
 266:	88 7f       	andi	r24, 0xF8	; 248
 268:	88 3a       	cpi	r24, 0xA8	; 168
 26a:	c1 f0       	breq	.+48     	; 0x29c <Get_flag_stutus+0xaa>
 26c:	21 e0       	ldi	r18, 0x01	; 1
 26e:	19 c0       	rjmp	.+50     	; 0x2a2 <Get_flag_stutus+0xb0>
 270:	81 b1       	in	r24, 0x01	; 1
 272:	88 7f       	andi	r24, 0xF8	; 248
 274:	88 3b       	cpi	r24, 0xB8	; 184
 276:	a1 f0       	breq	.+40     	; 0x2a0 <Get_flag_stutus+0xae>
 278:	21 e0       	ldi	r18, 0x01	; 1
 27a:	13 c0       	rjmp	.+38     	; 0x2a2 <Get_flag_stutus+0xb0>
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	11 c0       	rjmp	.+34     	; 0x2a2 <Get_flag_stutus+0xb0>
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	0f c0       	rjmp	.+30     	; 0x2a2 <Get_flag_stutus+0xb0>
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	0d c0       	rjmp	.+26     	; 0x2a2 <Get_flag_stutus+0xb0>
 288:	20 e0       	ldi	r18, 0x00	; 0
 28a:	0b c0       	rjmp	.+22     	; 0x2a2 <Get_flag_stutus+0xb0>
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	09 c0       	rjmp	.+18     	; 0x2a2 <Get_flag_stutus+0xb0>
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	07 c0       	rjmp	.+14     	; 0x2a2 <Get_flag_stutus+0xb0>
 294:	20 e0       	ldi	r18, 0x00	; 0
 296:	05 c0       	rjmp	.+10     	; 0x2a2 <Get_flag_stutus+0xb0>
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	03 c0       	rjmp	.+6      	; 0x2a2 <Get_flag_stutus+0xb0>
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	01 c0       	rjmp	.+2      	; 0x2a2 <Get_flag_stutus+0xb0>
 2a0:	20 e0       	ldi	r18, 0x00	; 0
 2a2:	82 2f       	mov	r24, r18
 2a4:	08 95       	ret

000002a6 <I2C_Generate_Start>:
 2a6:	84 ea       	ldi	r24, 0xA4	; 164
 2a8:	86 bf       	out	0x36, r24	; 54
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Get_flag_stutus>
 2b0:	88 23       	and	r24, r24
 2b2:	d9 f3       	breq	.-10     	; 0x2aa <I2C_Generate_Start+0x4>
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Get_flag_stutus>
 2ba:	86 b7       	in	r24, 0x36	; 54
 2bc:	8f 75       	andi	r24, 0x5F	; 95
 2be:	86 bf       	out	0x36, r24	; 54
 2c0:	08 95       	ret

000002c2 <I2C_Generate_Stop>:
 2c2:	84 e9       	ldi	r24, 0x94	; 148
 2c4:	86 bf       	out	0x36, r24	; 54
 2c6:	08 95       	ret

000002c8 <MCAL_I2C_Master_TX>:
 2c8:	ff 92       	push	r15
 2ca:	0f 93       	push	r16
 2cc:	1f 93       	push	r17
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	c8 2f       	mov	r28, r24
 2d4:	8b 01       	movw	r16, r22
 2d6:	d4 2f       	mov	r29, r20
 2d8:	f2 2e       	mov	r15, r18
 2da:	0e 94 53 01 	call	0x2a6	; 0x2a6 <I2C_Generate_Start>
 2de:	c3 b9       	out	0x03, r28	; 3
 2e0:	86 b7       	in	r24, 0x36	; 54
 2e2:	80 68       	ori	r24, 0x80	; 128
 2e4:	86 bf       	out	0x36, r24	; 54
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Get_flag_stutus>
 2ec:	88 23       	and	r24, r24
 2ee:	d9 f3       	breq	.-10     	; 0x2e6 <MCAL_I2C_Master_TX+0x1e>
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Get_flag_stutus>
 2f6:	c0 e0       	ldi	r28, 0x00	; 0
 2f8:	11 c0       	rjmp	.+34     	; 0x31c <MCAL_I2C_Master_TX+0x54>
 2fa:	f8 01       	movw	r30, r16
 2fc:	ec 0f       	add	r30, r28
 2fe:	f1 1d       	adc	r31, r1
 300:	80 81       	ld	r24, Z
 302:	83 b9       	out	0x03, r24	; 3
 304:	86 b7       	in	r24, 0x36	; 54
 306:	80 68       	ori	r24, 0x80	; 128
 308:	86 bf       	out	0x36, r24	; 54
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Get_flag_stutus>
 310:	88 23       	and	r24, r24
 312:	d9 f3       	breq	.-10     	; 0x30a <MCAL_I2C_Master_TX+0x42>
 314:	84 e0       	ldi	r24, 0x04	; 4
 316:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Get_flag_stutus>
 31a:	cf 5f       	subi	r28, 0xFF	; 255
 31c:	cd 17       	cp	r28, r29
 31e:	68 f3       	brcs	.-38     	; 0x2fa <MCAL_I2C_Master_TX+0x32>
 320:	f1 10       	cpse	r15, r1
 322:	02 c0       	rjmp	.+4      	; 0x328 <MCAL_I2C_Master_TX+0x60>
 324:	0e 94 61 01 	call	0x2c2	; 0x2c2 <I2C_Generate_Stop>
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	1f 91       	pop	r17
 32e:	0f 91       	pop	r16
 330:	ff 90       	pop	r15
 332:	08 95       	ret

00000334 <MCAL_I2C_Master_RX>:
 334:	0f 93       	push	r16
 336:	1f 93       	push	r17
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	c8 2f       	mov	r28, r24
 33e:	8b 01       	movw	r16, r22
 340:	d4 2f       	mov	r29, r20
 342:	0e 94 53 01 	call	0x2a6	; 0x2a6 <I2C_Generate_Start>
 346:	c3 b9       	out	0x03, r28	; 3
 348:	86 b7       	in	r24, 0x36	; 54
 34a:	80 6c       	ori	r24, 0xC0	; 192
 34c:	86 bf       	out	0x36, r24	; 54
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Get_flag_stutus>
 354:	88 23       	and	r24, r24
 356:	d9 f3       	breq	.-10     	; 0x34e <MCAL_I2C_Master_RX+0x1a>
 358:	83 e0       	ldi	r24, 0x03	; 3
 35a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Get_flag_stutus>
 35e:	c0 e0       	ldi	r28, 0x00	; 0
 360:	11 c0       	rjmp	.+34     	; 0x384 <MCAL_I2C_Master_RX+0x50>
 362:	86 b7       	in	r24, 0x36	; 54
 364:	80 68       	ori	r24, 0x80	; 128
 366:	86 bf       	out	0x36, r24	; 54
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Get_flag_stutus>
 36e:	88 23       	and	r24, r24
 370:	d9 f3       	breq	.-10     	; 0x368 <MCAL_I2C_Master_RX+0x34>
 372:	89 e0       	ldi	r24, 0x09	; 9
 374:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Get_flag_stutus>
 378:	f8 01       	movw	r30, r16
 37a:	ec 0f       	add	r30, r28
 37c:	f1 1d       	adc	r31, r1
 37e:	83 b1       	in	r24, 0x03	; 3
 380:	80 83       	st	Z, r24
 382:	cf 5f       	subi	r28, 0xFF	; 255
 384:	cd 17       	cp	r28, r29
 386:	68 f3       	brcs	.-38     	; 0x362 <MCAL_I2C_Master_RX+0x2e>
 388:	0e 94 61 01 	call	0x2c2	; 0x2c2 <I2C_Generate_Stop>
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	1f 91       	pop	r17
 392:	0f 91       	pop	r16
 394:	08 95       	ret

00000396 <__vector_19>:
 */


void __vector_19 (void) __attribute__((signal));
void __vector_19 (void)
{
 396:	1f 92       	push	r1
 398:	0f 92       	push	r0
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	0f 92       	push	r0
 39e:	11 24       	eor	r1, r1
 3a0:	2f 93       	push	r18
 3a2:	3f 93       	push	r19
 3a4:	4f 93       	push	r20
 3a6:	5f 93       	push	r21
 3a8:	6f 93       	push	r22
 3aa:	7f 93       	push	r23
 3ac:	8f 93       	push	r24
 3ae:	9f 93       	push	r25
 3b0:	af 93       	push	r26
 3b2:	bf 93       	push	r27
 3b4:	ef 93       	push	r30
 3b6:	ff 93       	push	r31
	g_I2C_Config->P_IRQ_CALL() ;
 3b8:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 3bc:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 3c0:	04 80       	ldd	r0, Z+4	; 0x04
 3c2:	f5 81       	ldd	r31, Z+5	; 0x05
 3c4:	e0 2d       	mov	r30, r0
 3c6:	09 95       	icall
}
 3c8:	ff 91       	pop	r31
 3ca:	ef 91       	pop	r30
 3cc:	bf 91       	pop	r27
 3ce:	af 91       	pop	r26
 3d0:	9f 91       	pop	r25
 3d2:	8f 91       	pop	r24
 3d4:	7f 91       	pop	r23
 3d6:	6f 91       	pop	r22
 3d8:	5f 91       	pop	r21
 3da:	4f 91       	pop	r20
 3dc:	3f 91       	pop	r19
 3de:	2f 91       	pop	r18
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti

000003ea <__vector_9>:
 * ===============================================================
 */

void __vector_9 (void) __attribute__((signal));
void __vector_9 (void)
{
 3ea:	1f 92       	push	r1
 3ec:	0f 92       	push	r0
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	0f 92       	push	r0
 3f2:	11 24       	eor	r1, r1
 3f4:	2f 93       	push	r18
 3f6:	3f 93       	push	r19
 3f8:	4f 93       	push	r20
 3fa:	5f 93       	push	r21
 3fc:	6f 93       	push	r22
 3fe:	7f 93       	push	r23
 400:	8f 93       	push	r24
 402:	9f 93       	push	r25
 404:	af 93       	push	r26
 406:	bf 93       	push	r27
 408:	ef 93       	push	r30
 40a:	ff 93       	push	r31
	g_PWM_Config->P_TOIE1_CALL();
 40c:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <g_PWM_Config>
 410:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <g_PWM_Config+0x1>
 414:	04 84       	ldd	r0, Z+12	; 0x0c
 416:	f5 85       	ldd	r31, Z+13	; 0x0d
 418:	e0 2d       	mov	r30, r0
 41a:	09 95       	icall
}
 41c:	ff 91       	pop	r31
 41e:	ef 91       	pop	r30
 420:	bf 91       	pop	r27
 422:	af 91       	pop	r26
 424:	9f 91       	pop	r25
 426:	8f 91       	pop	r24
 428:	7f 91       	pop	r23
 42a:	6f 91       	pop	r22
 42c:	5f 91       	pop	r21
 42e:	4f 91       	pop	r20
 430:	3f 91       	pop	r19
 432:	2f 91       	pop	r18
 434:	0f 90       	pop	r0
 436:	0f be       	out	0x3f, r0	; 63
 438:	0f 90       	pop	r0
 43a:	1f 90       	pop	r1
 43c:	18 95       	reti

0000043e <__vector_7>:

void __vector_7 (void) __attribute__((signal));
void __vector_7 (void)
{
 43e:	1f 92       	push	r1
 440:	0f 92       	push	r0
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	0f 92       	push	r0
 446:	11 24       	eor	r1, r1
 448:	2f 93       	push	r18
 44a:	3f 93       	push	r19
 44c:	4f 93       	push	r20
 44e:	5f 93       	push	r21
 450:	6f 93       	push	r22
 452:	7f 93       	push	r23
 454:	8f 93       	push	r24
 456:	9f 93       	push	r25
 458:	af 93       	push	r26
 45a:	bf 93       	push	r27
 45c:	ef 93       	push	r30
 45e:	ff 93       	push	r31
	g_PWM_Config->P_OCIE1A_CALL();
 460:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <g_PWM_Config>
 464:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <g_PWM_Config+0x1>
 468:	06 84       	ldd	r0, Z+14	; 0x0e
 46a:	f7 85       	ldd	r31, Z+15	; 0x0f
 46c:	e0 2d       	mov	r30, r0
 46e:	09 95       	icall
}
 470:	ff 91       	pop	r31
 472:	ef 91       	pop	r30
 474:	bf 91       	pop	r27
 476:	af 91       	pop	r26
 478:	9f 91       	pop	r25
 47a:	8f 91       	pop	r24
 47c:	7f 91       	pop	r23
 47e:	6f 91       	pop	r22
 480:	5f 91       	pop	r21
 482:	4f 91       	pop	r20
 484:	3f 91       	pop	r19
 486:	2f 91       	pop	r18
 488:	0f 90       	pop	r0
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	0f 90       	pop	r0
 48e:	1f 90       	pop	r1
 490:	18 95       	reti

00000492 <__vector_8>:

void __vector_8 (void) __attribute__((signal));
void __vector_8 (void)
{
 492:	1f 92       	push	r1
 494:	0f 92       	push	r0
 496:	0f b6       	in	r0, 0x3f	; 63
 498:	0f 92       	push	r0
 49a:	11 24       	eor	r1, r1
 49c:	2f 93       	push	r18
 49e:	3f 93       	push	r19
 4a0:	4f 93       	push	r20
 4a2:	5f 93       	push	r21
 4a4:	6f 93       	push	r22
 4a6:	7f 93       	push	r23
 4a8:	8f 93       	push	r24
 4aa:	9f 93       	push	r25
 4ac:	af 93       	push	r26
 4ae:	bf 93       	push	r27
 4b0:	ef 93       	push	r30
 4b2:	ff 93       	push	r31
	g_PWM_Config->P_OCIE1B_CALL();
 4b4:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <g_PWM_Config>
 4b8:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <g_PWM_Config+0x1>
 4bc:	00 88       	ldd	r0, Z+16	; 0x10
 4be:	f1 89       	ldd	r31, Z+17	; 0x11
 4c0:	e0 2d       	mov	r30, r0
 4c2:	09 95       	icall
}
 4c4:	ff 91       	pop	r31
 4c6:	ef 91       	pop	r30
 4c8:	bf 91       	pop	r27
 4ca:	af 91       	pop	r26
 4cc:	9f 91       	pop	r25
 4ce:	8f 91       	pop	r24
 4d0:	7f 91       	pop	r23
 4d2:	6f 91       	pop	r22
 4d4:	5f 91       	pop	r21
 4d6:	4f 91       	pop	r20
 4d8:	3f 91       	pop	r19
 4da:	2f 91       	pop	r18
 4dc:	0f 90       	pop	r0
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	0f 90       	pop	r0
 4e2:	1f 90       	pop	r1
 4e4:	18 95       	reti

000004e6 <__vector_12>:
 */


void __vector_12 (void) __attribute__((signal));
void __vector_12 (void)
{
 4e6:	1f 92       	push	r1
 4e8:	0f 92       	push	r0
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	0f 92       	push	r0
 4ee:	11 24       	eor	r1, r1
 4f0:	2f 93       	push	r18
 4f2:	3f 93       	push	r19
 4f4:	4f 93       	push	r20
 4f6:	5f 93       	push	r21
 4f8:	6f 93       	push	r22
 4fa:	7f 93       	push	r23
 4fc:	8f 93       	push	r24
 4fe:	9f 93       	push	r25
 500:	af 93       	push	r26
 502:	bf 93       	push	r27
 504:	ef 93       	push	r30
 506:	ff 93       	push	r31
	g_SPI_Config->P_IRQ_CALL() ;
 508:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <g_SPI_Config>
 50c:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <g_SPI_Config+0x1>
 510:	07 80       	ldd	r0, Z+7	; 0x07
 512:	f0 85       	ldd	r31, Z+8	; 0x08
 514:	e0 2d       	mov	r30, r0
 516:	09 95       	icall
}
 518:	ff 91       	pop	r31
 51a:	ef 91       	pop	r30
 51c:	bf 91       	pop	r27
 51e:	af 91       	pop	r26
 520:	9f 91       	pop	r25
 522:	8f 91       	pop	r24
 524:	7f 91       	pop	r23
 526:	6f 91       	pop	r22
 528:	5f 91       	pop	r21
 52a:	4f 91       	pop	r20
 52c:	3f 91       	pop	r19
 52e:	2f 91       	pop	r18
 530:	0f 90       	pop	r0
 532:	0f be       	out	0x3f, r0	; 63
 534:	0f 90       	pop	r0
 536:	1f 90       	pop	r1
 538:	18 95       	reti

0000053a <__vector_10>:
 * ===============================================================
 */

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
 53a:	1f 92       	push	r1
 53c:	0f 92       	push	r0
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	0f 92       	push	r0
 542:	11 24       	eor	r1, r1
 544:	2f 93       	push	r18
 546:	3f 93       	push	r19
 548:	4f 93       	push	r20
 54a:	5f 93       	push	r21
 54c:	6f 93       	push	r22
 54e:	7f 93       	push	r23
 550:	8f 93       	push	r24
 552:	9f 93       	push	r25
 554:	af 93       	push	r26
 556:	bf 93       	push	r27
 558:	ef 93       	push	r30
 55a:	ff 93       	push	r31
	g_TIM0_Config->P_OCIE0_CALL();
 55c:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <g_TIM0_Config>
 560:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <g_TIM0_Config+0x1>
 564:	00 84       	ldd	r0, Z+8	; 0x08
 566:	f1 85       	ldd	r31, Z+9	; 0x09
 568:	e0 2d       	mov	r30, r0
 56a:	09 95       	icall
}
 56c:	ff 91       	pop	r31
 56e:	ef 91       	pop	r30
 570:	bf 91       	pop	r27
 572:	af 91       	pop	r26
 574:	9f 91       	pop	r25
 576:	8f 91       	pop	r24
 578:	7f 91       	pop	r23
 57a:	6f 91       	pop	r22
 57c:	5f 91       	pop	r21
 57e:	4f 91       	pop	r20
 580:	3f 91       	pop	r19
 582:	2f 91       	pop	r18
 584:	0f 90       	pop	r0
 586:	0f be       	out	0x3f, r0	; 63
 588:	0f 90       	pop	r0
 58a:	1f 90       	pop	r1
 58c:	18 95       	reti

0000058e <__vector_11>:

void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
 58e:	1f 92       	push	r1
 590:	0f 92       	push	r0
 592:	0f b6       	in	r0, 0x3f	; 63
 594:	0f 92       	push	r0
 596:	11 24       	eor	r1, r1
 598:	2f 93       	push	r18
 59a:	3f 93       	push	r19
 59c:	4f 93       	push	r20
 59e:	5f 93       	push	r21
 5a0:	6f 93       	push	r22
 5a2:	7f 93       	push	r23
 5a4:	8f 93       	push	r24
 5a6:	9f 93       	push	r25
 5a8:	af 93       	push	r26
 5aa:	bf 93       	push	r27
 5ac:	ef 93       	push	r30
 5ae:	ff 93       	push	r31
	g_TIM0_Config->P_TOIE0_CALL();
 5b0:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <g_TIM0_Config>
 5b4:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <g_TIM0_Config+0x1>
 5b8:	06 80       	ldd	r0, Z+6	; 0x06
 5ba:	f7 81       	ldd	r31, Z+7	; 0x07
 5bc:	e0 2d       	mov	r30, r0
 5be:	09 95       	icall
}
 5c0:	ff 91       	pop	r31
 5c2:	ef 91       	pop	r30
 5c4:	bf 91       	pop	r27
 5c6:	af 91       	pop	r26
 5c8:	9f 91       	pop	r25
 5ca:	8f 91       	pop	r24
 5cc:	7f 91       	pop	r23
 5ce:	6f 91       	pop	r22
 5d0:	5f 91       	pop	r21
 5d2:	4f 91       	pop	r20
 5d4:	3f 91       	pop	r19
 5d6:	2f 91       	pop	r18
 5d8:	0f 90       	pop	r0
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	0f 90       	pop	r0
 5de:	1f 90       	pop	r1
 5e0:	18 95       	reti

000005e2 <__vector_13>:
 *
 * ===============================================================
 */
void __vector_13 (void) __attribute__((signal));
void __vector_13 (void)
{
 5e2:	1f 92       	push	r1
 5e4:	0f 92       	push	r0
 5e6:	0f b6       	in	r0, 0x3f	; 63
 5e8:	0f 92       	push	r0
 5ea:	11 24       	eor	r1, r1
 5ec:	2f 93       	push	r18
 5ee:	3f 93       	push	r19
 5f0:	4f 93       	push	r20
 5f2:	5f 93       	push	r21
 5f4:	6f 93       	push	r22
 5f6:	7f 93       	push	r23
 5f8:	8f 93       	push	r24
 5fa:	9f 93       	push	r25
 5fc:	af 93       	push	r26
 5fe:	bf 93       	push	r27
 600:	ef 93       	push	r30
 602:	ff 93       	push	r31
	//Call function
	GPU_IRQ_CALL[2]();
 604:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <GPU_IRQ_CALL+0x4>
 608:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <GPU_IRQ_CALL+0x5>
 60c:	09 95       	icall
}
 60e:	ff 91       	pop	r31
 610:	ef 91       	pop	r30
 612:	bf 91       	pop	r27
 614:	af 91       	pop	r26
 616:	9f 91       	pop	r25
 618:	8f 91       	pop	r24
 61a:	7f 91       	pop	r23
 61c:	6f 91       	pop	r22
 61e:	5f 91       	pop	r21
 620:	4f 91       	pop	r20
 622:	3f 91       	pop	r19
 624:	2f 91       	pop	r18
 626:	0f 90       	pop	r0
 628:	0f be       	out	0x3f, r0	; 63
 62a:	0f 90       	pop	r0
 62c:	1f 90       	pop	r1
 62e:	18 95       	reti

00000630 <__vector_14>:

void __vector_14 (void) __attribute__((signal));
void __vector_14 (void)
{
 630:	1f 92       	push	r1
 632:	0f 92       	push	r0
 634:	0f b6       	in	r0, 0x3f	; 63
 636:	0f 92       	push	r0
 638:	11 24       	eor	r1, r1
 63a:	2f 93       	push	r18
 63c:	3f 93       	push	r19
 63e:	4f 93       	push	r20
 640:	5f 93       	push	r21
 642:	6f 93       	push	r22
 644:	7f 93       	push	r23
 646:	8f 93       	push	r24
 648:	9f 93       	push	r25
 64a:	af 93       	push	r26
 64c:	bf 93       	push	r27
 64e:	ef 93       	push	r30
 650:	ff 93       	push	r31
	//Call function
	GPU_IRQ_CALL[1]();
 652:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <GPU_IRQ_CALL+0x2>
 656:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <GPU_IRQ_CALL+0x3>
 65a:	09 95       	icall
}
 65c:	ff 91       	pop	r31
 65e:	ef 91       	pop	r30
 660:	bf 91       	pop	r27
 662:	af 91       	pop	r26
 664:	9f 91       	pop	r25
 666:	8f 91       	pop	r24
 668:	7f 91       	pop	r23
 66a:	6f 91       	pop	r22
 66c:	5f 91       	pop	r21
 66e:	4f 91       	pop	r20
 670:	3f 91       	pop	r19
 672:	2f 91       	pop	r18
 674:	0f 90       	pop	r0
 676:	0f be       	out	0x3f, r0	; 63
 678:	0f 90       	pop	r0
 67a:	1f 90       	pop	r1
 67c:	18 95       	reti

0000067e <__vector_15>:

void __vector_15 (void) __attribute__((signal));
void __vector_15 (void)
{
 67e:	1f 92       	push	r1
 680:	0f 92       	push	r0
 682:	0f b6       	in	r0, 0x3f	; 63
 684:	0f 92       	push	r0
 686:	11 24       	eor	r1, r1
 688:	2f 93       	push	r18
 68a:	3f 93       	push	r19
 68c:	4f 93       	push	r20
 68e:	5f 93       	push	r21
 690:	6f 93       	push	r22
 692:	7f 93       	push	r23
 694:	8f 93       	push	r24
 696:	9f 93       	push	r25
 698:	af 93       	push	r26
 69a:	bf 93       	push	r27
 69c:	ef 93       	push	r30
 69e:	ff 93       	push	r31
	//Call function
	GPU_IRQ_CALL[0]();
 6a0:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <GPU_IRQ_CALL>
 6a4:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <GPU_IRQ_CALL+0x1>
 6a8:	09 95       	icall
}
 6aa:	ff 91       	pop	r31
 6ac:	ef 91       	pop	r30
 6ae:	bf 91       	pop	r27
 6b0:	af 91       	pop	r26
 6b2:	9f 91       	pop	r25
 6b4:	8f 91       	pop	r24
 6b6:	7f 91       	pop	r23
 6b8:	6f 91       	pop	r22
 6ba:	5f 91       	pop	r21
 6bc:	4f 91       	pop	r20
 6be:	3f 91       	pop	r19
 6c0:	2f 91       	pop	r18
 6c2:	0f 90       	pop	r0
 6c4:	0f be       	out	0x3f, r0	; 63
 6c6:	0f 90       	pop	r0
 6c8:	1f 90       	pop	r1
 6ca:	18 95       	reti

000006cc <EEPROM_Init>:

#include "EEPROM.h"


void EEPROM_Init(void)
{
 6cc:	cf 93       	push	r28
 6ce:	df 93       	push	r29
 6d0:	00 d0       	rcall	.+0      	; 0x6d2 <EEPROM_Init+0x6>
 6d2:	00 d0       	rcall	.+0      	; 0x6d4 <EEPROM_Init+0x8>
 6d4:	00 d0       	rcall	.+0      	; 0x6d6 <EEPROM_Init+0xa>
 6d6:	cd b7       	in	r28, 0x3d	; 61
 6d8:	de b7       	in	r29, 0x3e	; 62
	I2C_config_t I2C_Config ;
	I2C_Config.IRQ_EN =I2C_IRQ_ENABLE_Disable ;
 6da:	8e ef       	ldi	r24, 0xFE	; 254
 6dc:	8b 83       	std	Y+3, r24	; 0x03
	I2C_Config.P_IRQ_CALL = NULL ;
 6de:	1e 82       	std	Y+6, r1	; 0x06
 6e0:	1d 82       	std	Y+5, r1	; 0x05
	I2C_Config.Speed_MODE = I2C_Speed_MODE_100 ;
 6e2:	80 ea       	ldi	r24, 0xA0	; 160
 6e4:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Config.Prescaler = I2C_Prescaler_1     ;
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	8c 83       	std	Y+4, r24	; 0x04
	MCAL_I2C_Init(&I2C_Config) ;
 6ea:	ce 01       	movw	r24, r28
 6ec:	01 96       	adiw	r24, 0x01	; 1
 6ee:	0e 94 c8 00 	call	0x190	; 0x190 <MCAL_I2C_Init>
}
 6f2:	26 96       	adiw	r28, 0x06	; 6
 6f4:	0f b6       	in	r0, 0x3f	; 63
 6f6:	f8 94       	cli
 6f8:	de bf       	out	0x3e, r29	; 62
 6fa:	0f be       	out	0x3f, r0	; 63
 6fc:	cd bf       	out	0x3d, r28	; 61
 6fe:	df 91       	pop	r29
 700:	cf 91       	pop	r28
 702:	08 95       	ret

00000704 <EEPROM_Write_Data>:


void EEPROM_Write_Data(uint16_t EEPROM_Address , uint8_t* PTXBuffer , uint8_t Dataln)
{
 704:	cf 93       	push	r28
 706:	df 93       	push	r29
 708:	cd b7       	in	r28, 0x3d	; 61
 70a:	de b7       	in	r29, 0x3e	; 62
 70c:	cf 5f       	subi	r28, 0xFF	; 255
 70e:	d1 09       	sbc	r29, r1
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	f8 94       	cli
 714:	de bf       	out	0x3e, r29	; 62
 716:	0f be       	out	0x3f, r0	; 63
 718:	cd bf       	out	0x3d, r28	; 61
 71a:	fb 01       	movw	r30, r22
	uint8_t i=0;
	uint8_t buffer[255];
	buffer[0] = (uint8_t)(EEPROM_Address>>8);   // Send Upper Byte
 71c:	99 83       	std	Y+1, r25	; 0x01
	buffer[1] = (uint8_t)(EEPROM_Address);		// Send Lower Byte
 71e:	8a 83       	std	Y+2, r24	; 0x02
	for (i=2 ; i< Dataln+2 ; i++)
 720:	52 e0       	ldi	r21, 0x02	; 2
 722:	09 c0       	rjmp	.+18     	; 0x736 <EEPROM_Write_Data+0x32>
	{
		buffer[i]= *PTXBuffer;
 724:	21 91       	ld	r18, Z+
 726:	a1 e0       	ldi	r26, 0x01	; 1
 728:	b0 e0       	ldi	r27, 0x00	; 0
 72a:	ac 0f       	add	r26, r28
 72c:	bd 1f       	adc	r27, r29
 72e:	a8 0f       	add	r26, r24
 730:	b9 1f       	adc	r27, r25
 732:	2c 93       	st	X, r18
{
	uint8_t i=0;
	uint8_t buffer[255];
	buffer[0] = (uint8_t)(EEPROM_Address>>8);   // Send Upper Byte
	buffer[1] = (uint8_t)(EEPROM_Address);		// Send Lower Byte
	for (i=2 ; i< Dataln+2 ; i++)
 734:	5f 5f       	subi	r21, 0xFF	; 255
 736:	85 2f       	mov	r24, r21
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	24 2f       	mov	r18, r20
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	2e 5f       	subi	r18, 0xFE	; 254
 740:	3f 4f       	sbci	r19, 0xFF	; 255
 742:	82 17       	cp	r24, r18
 744:	93 07       	cpc	r25, r19
 746:	74 f3       	brlt	.-36     	; 0x724 <EEPROM_Write_Data+0x20>
	{
		buffer[i]= *PTXBuffer;
		PTXBuffer++;
	}
	
	MCAL_I2C_Master_TX(EEPROM_Slave_Address_Write, buffer, Dataln+2 ,With_Stop);
 748:	4e 5f       	subi	r20, 0xFE	; 254
 74a:	20 e0       	ldi	r18, 0x00	; 0
 74c:	be 01       	movw	r22, r28
 74e:	6f 5f       	subi	r22, 0xFF	; 255
 750:	7f 4f       	sbci	r23, 0xFF	; 255
 752:	86 ea       	ldi	r24, 0xA6	; 166
 754:	0e 94 64 01 	call	0x2c8	; 0x2c8 <MCAL_I2C_Master_TX>
	return 0;
}
 758:	c1 50       	subi	r28, 0x01	; 1
 75a:	df 4f       	sbci	r29, 0xFF	; 255
 75c:	0f b6       	in	r0, 0x3f	; 63
 75e:	f8 94       	cli
 760:	de bf       	out	0x3e, r29	; 62
 762:	0f be       	out	0x3f, r0	; 63
 764:	cd bf       	out	0x3d, r28	; 61
 766:	df 91       	pop	r29
 768:	cf 91       	pop	r28
 76a:	08 95       	ret

0000076c <EEPROM_Read_Data>:


void EEPROM_Read_Data( uint16_t EEPROM_Address , uint8_t* PRXBuffer , uint8_t Dataln )
{
 76c:	ff 92       	push	r15
 76e:	0f 93       	push	r16
 770:	1f 93       	push	r17
 772:	cf 93       	push	r28
 774:	df 93       	push	r29
 776:	00 d0       	rcall	.+0      	; 0x778 <EEPROM_Read_Data+0xc>
 778:	cd b7       	in	r28, 0x3d	; 61
 77a:	de b7       	in	r29, 0x3e	; 62
 77c:	8b 01       	movw	r16, r22
 77e:	f4 2e       	mov	r15, r20
	uint8_t i=0  ;

	uint8_t buffer[2];
	buffer[0] = (uint8_t)(EEPROM_Address>>8);   // Send Upper Byte
 780:	99 83       	std	Y+1, r25	; 0x01
	buffer[1] = (uint8_t)(EEPROM_Address);		 // Send Lower Byte
 782:	8a 83       	std	Y+2, r24	; 0x02
	//send address
	MCAL_I2C_Master_TX(EEPROM_Slave_Address_Write, buffer, 2 , Without_Stop);
 784:	21 e0       	ldi	r18, 0x01	; 1
 786:	42 e0       	ldi	r20, 0x02	; 2
 788:	be 01       	movw	r22, r28
 78a:	6f 5f       	subi	r22, 0xFF	; 255
 78c:	7f 4f       	sbci	r23, 0xFF	; 255
 78e:	86 ea       	ldi	r24, 0xA6	; 166
 790:	0e 94 64 01 	call	0x2c8	; 0x2c8 <MCAL_I2C_Master_TX>
	// Read Data
	MCAL_I2C_Master_RX( EEPROM_Slave_Address_Read , PRXBuffer , Dataln );
 794:	4f 2d       	mov	r20, r15
 796:	b8 01       	movw	r22, r16
 798:	87 ea       	ldi	r24, 0xA7	; 167
 79a:	0e 94 9a 01 	call	0x334	; 0x334 <MCAL_I2C_Master_RX>
 79e:	0f 90       	pop	r0
 7a0:	0f 90       	pop	r0
 7a2:	df 91       	pop	r29
 7a4:	cf 91       	pop	r28
 7a6:	1f 91       	pop	r17
 7a8:	0f 91       	pop	r16
 7aa:	ff 90       	pop	r15
 7ac:	08 95       	ret

000007ae <main>:
void TIMER0_CALL(void)
{
	MCAL_GPIO_TogglePin(GPIOA , GPIO_PIN_0 );
}
int main(void)
{	
 7ae:	cf 93       	push	r28
 7b0:	df 93       	push	r29
 7b2:	cd b7       	in	r28, 0x3d	; 61
 7b4:	de b7       	in	r29, 0x3e	; 62
 7b6:	2e 97       	sbiw	r28, 0x0e	; 14
 7b8:	0f b6       	in	r0, 0x3f	; 63
 7ba:	f8 94       	cli
 7bc:	de bf       	out	0x3e, r29	; 62
 7be:	0f be       	out	0x3f, r0	; 63
 7c0:	cd bf       	out	0x3d, r28	; 61
	uint8_t Data1[] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 7c2:	87 e0       	ldi	r24, 0x07	; 7
 7c4:	e0 e6       	ldi	r30, 0x60	; 96
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	de 01       	movw	r26, r28
 7ca:	11 96       	adiw	r26, 0x01	; 1
 7cc:	01 90       	ld	r0, Z+
 7ce:	0d 92       	st	X+, r0
 7d0:	8a 95       	dec	r24
 7d2:	e1 f7       	brne	.-8      	; 0x7cc <main+0x1e>
	uint8_t Data2[7]= {0};
 7d4:	8e 01       	movw	r16, r28
 7d6:	08 5f       	subi	r16, 0xF8	; 248
 7d8:	1f 4f       	sbci	r17, 0xFF	; 255
 7da:	87 e0       	ldi	r24, 0x07	; 7
 7dc:	f8 01       	movw	r30, r16
 7de:	11 92       	st	Z+, r1
 7e0:	8a 95       	dec	r24
 7e2:	e9 f7       	brne	.-6      	; 0x7de <main+0x30>

	EEPROM_Init();
 7e4:	0e 94 66 03 	call	0x6cc	; 0x6cc <EEPROM_Init>
	EEPROM_Write_Data(0xAF, Data1, 7);
 7e8:	47 e0       	ldi	r20, 0x07	; 7
 7ea:	be 01       	movw	r22, r28
 7ec:	6f 5f       	subi	r22, 0xFF	; 255
 7ee:	7f 4f       	sbci	r23, 0xFF	; 255
 7f0:	8f ea       	ldi	r24, 0xAF	; 175
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	0e 94 82 03 	call	0x704	; 0x704 <EEPROM_Write_Data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7f8:	87 ea       	ldi	r24, 0xA7	; 167
 7fa:	91 e6       	ldi	r25, 0x61	; 97
 7fc:	01 97       	sbiw	r24, 0x01	; 1
 7fe:	f1 f7       	brne	.-4      	; 0x7fc <main+0x4e>
 800:	00 c0       	rjmp	.+0      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 802:	00 00       	nop
	_delay_ms(100);
	EEPROM_Read_Data(0xAF, Data2, 7);
 804:	47 e0       	ldi	r20, 0x07	; 7
 806:	b8 01       	movw	r22, r16
 808:	8f ea       	ldi	r24, 0xAF	; 175
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	0e 94 b6 03 	call	0x76c	; 0x76c <EEPROM_Read_Data>
 810:	ff cf       	rjmp	.-2      	; 0x810 <__DATA_REGION_LENGTH__+0x10>

00000812 <__udivmodsi4>:
 812:	a1 e2       	ldi	r26, 0x21	; 33
 814:	1a 2e       	mov	r1, r26
 816:	aa 1b       	sub	r26, r26
 818:	bb 1b       	sub	r27, r27
 81a:	fd 01       	movw	r30, r26
 81c:	0d c0       	rjmp	.+26     	; 0x838 <__udivmodsi4_ep>

0000081e <__udivmodsi4_loop>:
 81e:	aa 1f       	adc	r26, r26
 820:	bb 1f       	adc	r27, r27
 822:	ee 1f       	adc	r30, r30
 824:	ff 1f       	adc	r31, r31
 826:	a2 17       	cp	r26, r18
 828:	b3 07       	cpc	r27, r19
 82a:	e4 07       	cpc	r30, r20
 82c:	f5 07       	cpc	r31, r21
 82e:	20 f0       	brcs	.+8      	; 0x838 <__udivmodsi4_ep>
 830:	a2 1b       	sub	r26, r18
 832:	b3 0b       	sbc	r27, r19
 834:	e4 0b       	sbc	r30, r20
 836:	f5 0b       	sbc	r31, r21

00000838 <__udivmodsi4_ep>:
 838:	66 1f       	adc	r22, r22
 83a:	77 1f       	adc	r23, r23
 83c:	88 1f       	adc	r24, r24
 83e:	99 1f       	adc	r25, r25
 840:	1a 94       	dec	r1
 842:	69 f7       	brne	.-38     	; 0x81e <__udivmodsi4_loop>
 844:	60 95       	com	r22
 846:	70 95       	com	r23
 848:	80 95       	com	r24
 84a:	90 95       	com	r25
 84c:	9b 01       	movw	r18, r22
 84e:	ac 01       	movw	r20, r24
 850:	bd 01       	movw	r22, r26
 852:	cf 01       	movw	r24, r30
 854:	08 95       	ret

00000856 <__tablejump2__>:
 856:	ee 0f       	add	r30, r30
 858:	ff 1f       	adc	r31, r31
 85a:	05 90       	lpm	r0, Z+
 85c:	f4 91       	lpm	r31, Z
 85e:	e0 2d       	mov	r30, r0
 860:	09 94       	ijmp

00000862 <_exit>:
 862:	f8 94       	cli

00000864 <__stop_program>:
 864:	ff cf       	rjmp	.-2      	; 0x864 <__stop_program>
