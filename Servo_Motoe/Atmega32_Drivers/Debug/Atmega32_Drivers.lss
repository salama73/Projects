
Atmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b04  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000b78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800060  00800060  00000b78  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ba8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00000be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002288  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001123  00000000  00000000  000030fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000187b  00000000  00000000  0000421f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008e8  00000000  00000000  00005a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cfa  00000000  00000000  00006384  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000160e  00000000  00000000  0000707e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000868c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_2>
   c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__vector_7>
  20:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_8>
  24:	0c 94 8c 01 	jmp	0x318	; 0x318 <__vector_9>
  28:	0c 94 34 02 	jmp	0x468	; 0x468 <__vector_10>
  2c:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__vector_11>
  30:	0c 94 0a 02 	jmp	0x414	; 0x414 <__vector_12>
  34:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_13>
  38:	0c 94 af 02 	jmp	0x55e	; 0x55e <__vector_14>
  3c:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__vector_15>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 37       	cpi	r26, 0x74	; 116
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 50 03 	call	0x6a0	; 0x6a0 <main>
  74:	0c 94 80 05 	jmp	0xb00	; 0xb00 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:
 */


void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	3f 93       	push	r19
  8a:	4f 93       	push	r20
  8c:	5f 93       	push	r21
  8e:	6f 93       	push	r22
  90:	7f 93       	push	r23
  92:	8f 93       	push	r24
  94:	9f 93       	push	r25
  96:	af 93       	push	r26
  98:	bf 93       	push	r27
  9a:	ef 93       	push	r30
  9c:	ff 93       	push	r31
	//Call function
	GP_IRQ_CALL[0]();
  9e:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <GP_IRQ_CALL>
  a2:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <GP_IRQ_CALL+0x1>
  a6:	09 95       	icall
}
  a8:	ff 91       	pop	r31
  aa:	ef 91       	pop	r30
  ac:	bf 91       	pop	r27
  ae:	af 91       	pop	r26
  b0:	9f 91       	pop	r25
  b2:	8f 91       	pop	r24
  b4:	7f 91       	pop	r23
  b6:	6f 91       	pop	r22
  b8:	5f 91       	pop	r21
  ba:	4f 91       	pop	r20
  bc:	3f 91       	pop	r19
  be:	2f 91       	pop	r18
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <__vector_2>:


void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	3f 93       	push	r19
  d8:	4f 93       	push	r20
  da:	5f 93       	push	r21
  dc:	6f 93       	push	r22
  de:	7f 93       	push	r23
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	af 93       	push	r26
  e6:	bf 93       	push	r27
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
	//Call function
	GP_IRQ_CALL[1]();
  ec:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <GP_IRQ_CALL+0x2>
  f0:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <GP_IRQ_CALL+0x3>
  f4:	09 95       	icall
}
  f6:	ff 91       	pop	r31
  f8:	ef 91       	pop	r30
  fa:	bf 91       	pop	r27
  fc:	af 91       	pop	r26
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	7f 91       	pop	r23
 104:	6f 91       	pop	r22
 106:	5f 91       	pop	r21
 108:	4f 91       	pop	r20
 10a:	3f 91       	pop	r19
 10c:	2f 91       	pop	r18
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <__vector_3>:


void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	2f 93       	push	r18
 124:	3f 93       	push	r19
 126:	4f 93       	push	r20
 128:	5f 93       	push	r21
 12a:	6f 93       	push	r22
 12c:	7f 93       	push	r23
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
 132:	af 93       	push	r26
 134:	bf 93       	push	r27
 136:	ef 93       	push	r30
 138:	ff 93       	push	r31
	//Call function
	GP_IRQ_CALL[2]();
 13a:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <GP_IRQ_CALL+0x4>
 13e:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <GP_IRQ_CALL+0x5>
 142:	09 95       	icall
}
 144:	ff 91       	pop	r31
 146:	ef 91       	pop	r30
 148:	bf 91       	pop	r27
 14a:	af 91       	pop	r26
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	7f 91       	pop	r23
 152:	6f 91       	pop	r22
 154:	5f 91       	pop	r21
 156:	4f 91       	pop	r20
 158:	3f 91       	pop	r19
 15a:	2f 91       	pop	r18
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <MCAL_GPIO_Init>:
* @param [in] 		-configuration information for the specified pin
* @retval 			-none
* Note				-none
*/
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_Pinconfig_t *pinconfig )
{
 166:	fc 01       	movw	r30, r24
 168:	db 01       	movw	r26, r22
	if ( pinconfig->GPIO_MODE == GPIO_MODE_INPUT_FLO )
 16a:	11 96       	adiw	r26, 0x01	; 1
 16c:	8c 91       	ld	r24, X
 16e:	11 97       	sbiw	r26, 0x01	; 1
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	59 f4       	brne	.+22     	; 0x18a <MCAL_GPIO_Init+0x24>
	{
		GPIOx->DDR &= ~(pinconfig->pinNumber);
 174:	8c 91       	ld	r24, X
 176:	80 95       	com	r24
 178:	91 81       	ldd	r25, Z+1	; 0x01
 17a:	89 23       	and	r24, r25
 17c:	81 83       	std	Z+1, r24	; 0x01
		GPIOx->PORT &= ~(pinconfig->pinNumber);
 17e:	8c 91       	ld	r24, X
 180:	80 95       	com	r24
 182:	92 81       	ldd	r25, Z+2	; 0x02
 184:	89 23       	and	r24, r25
 186:	82 83       	std	Z+2, r24	; 0x02
 188:	08 95       	ret
	}
	else if ( pinconfig->GPIO_MODE == GPIO_MODE_INPUT_PU )
 18a:	82 30       	cpi	r24, 0x02	; 2
 18c:	51 f4       	brne	.+20     	; 0x1a2 <MCAL_GPIO_Init+0x3c>
	{
		GPIOx->DDR &= ~(pinconfig->pinNumber);
 18e:	8c 91       	ld	r24, X
 190:	80 95       	com	r24
 192:	91 81       	ldd	r25, Z+1	; 0x01
 194:	89 23       	and	r24, r25
 196:	81 83       	std	Z+1, r24	; 0x01
		GPIOx->PORT |= pinconfig->pinNumber;
 198:	8c 91       	ld	r24, X
 19a:	92 81       	ldd	r25, Z+2	; 0x02
 19c:	89 2b       	or	r24, r25
 19e:	82 83       	std	Z+2, r24	; 0x02
 1a0:	08 95       	ret
	}
	else
	{
		GPIOx->DDR |= pinconfig->pinNumber;
 1a2:	8c 91       	ld	r24, X
 1a4:	91 81       	ldd	r25, Z+1	; 0x01
 1a6:	89 2b       	or	r24, r25
 1a8:	81 83       	std	Z+1, r24	; 0x01
		GPIOx->PORT &= ~(pinconfig->pinNumber);
 1aa:	8c 91       	ld	r24, X
 1ac:	80 95       	com	r24
 1ae:	92 81       	ldd	r25, Z+2	; 0x02
 1b0:	89 23       	and	r24, r25
 1b2:	82 83       	std	Z+2, r24	; 0x02
 1b4:	08 95       	ret

000001b6 <__vector_19>:
 */


void __vector_19 (void) __attribute__((signal));
void __vector_19 (void)
{
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	2f 93       	push	r18
 1c2:	3f 93       	push	r19
 1c4:	4f 93       	push	r20
 1c6:	5f 93       	push	r21
 1c8:	6f 93       	push	r22
 1ca:	7f 93       	push	r23
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	af 93       	push	r26
 1d2:	bf 93       	push	r27
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
	g_I2C_Config->P_IRQ_CALL() ;
 1d8:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1dc:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1e0:	04 80       	ldd	r0, Z+4	; 0x04
 1e2:	f5 81       	ldd	r31, Z+5	; 0x05
 1e4:	e0 2d       	mov	r30, r0
 1e6:	09 95       	icall
}
 1e8:	ff 91       	pop	r31
 1ea:	ef 91       	pop	r30
 1ec:	bf 91       	pop	r27
 1ee:	af 91       	pop	r26
 1f0:	9f 91       	pop	r25
 1f2:	8f 91       	pop	r24
 1f4:	7f 91       	pop	r23
 1f6:	6f 91       	pop	r22
 1f8:	5f 91       	pop	r21
 1fa:	4f 91       	pop	r20
 1fc:	3f 91       	pop	r19
 1fe:	2f 91       	pop	r18
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <MCAL_PWM_Init>:
*/
void MCAL_PWM_Set_TOP_Value(uint16_t TOP_Value ) 
{
	//Set TOP Value
	TIMER1->ICR1H = (uint8_t)(TOP_Value>>8);
	TIMER1->ICR1L = (uint8_t)(TOP_Value);
 20a:	ef 92       	push	r14
 20c:	ff 92       	push	r15
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	00 d0       	rcall	.+0      	; 0x218 <MCAL_PWM_Init+0xe>
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
 21c:	8c 01       	movw	r16, r24
 21e:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <g_PWM_Config+0x1>
 222:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <g_PWM_Config>
 226:	fc 01       	movw	r30, r24
 228:	80 81       	ld	r24, Z
 22a:	f8 2f       	mov	r31, r24
 22c:	f2 60       	ori	r31, 0x02	; 2
 22e:	ff 2e       	mov	r15, r31
 230:	88 23       	and	r24, r24
 232:	59 f0       	breq	.+22     	; 0x24a <MCAL_PWM_Init+0x40>
 234:	80 e2       	ldi	r24, 0x20	; 32
 236:	89 83       	std	Y+1, r24	; 0x01
 238:	83 e0       	ldi	r24, 0x03	; 3
 23a:	8a 83       	std	Y+2, r24	; 0x02
 23c:	be 01       	movw	r22, r28
 23e:	6f 5f       	subi	r22, 0xFF	; 255
 240:	7f 4f       	sbci	r23, 0xFF	; 255
 242:	80 e3       	ldi	r24, 0x30	; 48
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 b3 00 	call	0x166	; 0x166 <MCAL_GPIO_Init>
 24a:	f8 01       	movw	r30, r16
 24c:	81 81       	ldd	r24, Z+1	; 0x01
 24e:	f8 2f       	mov	r31, r24
 250:	f8 61       	ori	r31, 0x18	; 24
 252:	ef 2e       	mov	r14, r31
 254:	88 23       	and	r24, r24
 256:	59 f0       	breq	.+22     	; 0x26e <MCAL_PWM_Init+0x64>
 258:	80 e1       	ldi	r24, 0x10	; 16
 25a:	89 83       	std	Y+1, r24	; 0x01
 25c:	83 e0       	ldi	r24, 0x03	; 3
 25e:	8a 83       	std	Y+2, r24	; 0x02
 260:	be 01       	movw	r22, r28
 262:	6f 5f       	subi	r22, 0xFF	; 255
 264:	7f 4f       	sbci	r23, 0xFF	; 255
 266:	80 e3       	ldi	r24, 0x30	; 48
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 b3 00 	call	0x166	; 0x166 <MCAL_GPIO_Init>
 26e:	f8 01       	movw	r30, r16
 270:	82 81       	ldd	r24, Z+2	; 0x02
 272:	8e 29       	or	r24, r14
 274:	93 81       	ldd	r25, Z+3	; 0x03
 276:	91 30       	cpi	r25, 0x01	; 1
 278:	39 f4       	brne	.+14     	; 0x288 <MCAL_PWM_Init+0x7e>
 27a:	99 b7       	in	r25, 0x39	; 57
 27c:	94 60       	ori	r25, 0x04	; 4
 27e:	99 bf       	out	0x39, r25	; 57
 280:	9f b7       	in	r25, 0x3f	; 63
 282:	90 68       	ori	r25, 0x80	; 128
 284:	9f bf       	out	0x3f, r25	; 63
 286:	06 c0       	rjmp	.+12     	; 0x294 <MCAL_PWM_Init+0x8a>
 288:	99 b7       	in	r25, 0x39	; 57
 28a:	9b 7f       	andi	r25, 0xFB	; 251
 28c:	99 bf       	out	0x39, r25	; 57
 28e:	9f b7       	in	r25, 0x3f	; 63
 290:	9f 77       	andi	r25, 0x7F	; 127
 292:	9f bf       	out	0x3f, r25	; 63
 294:	f8 01       	movw	r30, r16
 296:	94 81       	ldd	r25, Z+4	; 0x04
 298:	91 30       	cpi	r25, 0x01	; 1
 29a:	39 f4       	brne	.+14     	; 0x2aa <MCAL_PWM_Init+0xa0>
 29c:	99 b7       	in	r25, 0x39	; 57
 29e:	90 61       	ori	r25, 0x10	; 16
 2a0:	99 bf       	out	0x39, r25	; 57
 2a2:	9f b7       	in	r25, 0x3f	; 63
 2a4:	90 68       	ori	r25, 0x80	; 128
 2a6:	9f bf       	out	0x3f, r25	; 63
 2a8:	06 c0       	rjmp	.+12     	; 0x2b6 <MCAL_PWM_Init+0xac>
 2aa:	99 b7       	in	r25, 0x39	; 57
 2ac:	9f 7e       	andi	r25, 0xEF	; 239
 2ae:	99 bf       	out	0x39, r25	; 57
 2b0:	9f b7       	in	r25, 0x3f	; 63
 2b2:	9f 77       	andi	r25, 0x7F	; 127
 2b4:	9f bf       	out	0x3f, r25	; 63
 2b6:	f8 01       	movw	r30, r16
 2b8:	94 81       	ldd	r25, Z+4	; 0x04
 2ba:	91 30       	cpi	r25, 0x01	; 1
 2bc:	39 f4       	brne	.+14     	; 0x2cc <MCAL_PWM_Init+0xc2>
 2be:	99 b7       	in	r25, 0x39	; 57
 2c0:	90 61       	ori	r25, 0x10	; 16
 2c2:	99 bf       	out	0x39, r25	; 57
 2c4:	9f b7       	in	r25, 0x3f	; 63
 2c6:	90 68       	ori	r25, 0x80	; 128
 2c8:	9f bf       	out	0x3f, r25	; 63
 2ca:	06 c0       	rjmp	.+12     	; 0x2d8 <MCAL_PWM_Init+0xce>
 2cc:	99 b7       	in	r25, 0x39	; 57
 2ce:	97 7f       	andi	r25, 0xF7	; 247
 2d0:	99 bf       	out	0x39, r25	; 57
 2d2:	9f b7       	in	r25, 0x3f	; 63
 2d4:	9f 77       	andi	r25, 0x7F	; 127
 2d6:	9f bf       	out	0x3f, r25	; 63
 2d8:	f8 01       	movw	r30, r16
 2da:	93 85       	ldd	r25, Z+11	; 0x0b
 2dc:	97 bd       	out	0x27, r25	; 39
 2de:	92 85       	ldd	r25, Z+10	; 0x0a
 2e0:	96 bd       	out	0x26, r25	; 38
 2e2:	97 81       	ldd	r25, Z+7	; 0x07
 2e4:	9b bd       	out	0x2b, r25	; 43
 2e6:	96 81       	ldd	r25, Z+6	; 0x06
 2e8:	9a bd       	out	0x2a, r25	; 42
 2ea:	91 85       	ldd	r25, Z+9	; 0x09
 2ec:	99 bd       	out	0x29, r25	; 41
 2ee:	90 85       	ldd	r25, Z+8	; 0x08
 2f0:	98 bd       	out	0x28, r25	; 40
 2f2:	ff bc       	out	0x2f, r15	; 47
 2f4:	8e bd       	out	0x2e, r24	; 46
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	1f 91       	pop	r17
 300:	0f 91       	pop	r16
 302:	ff 90       	pop	r15
 304:	ef 90       	pop	r14
 306:	08 95       	ret

00000308 <MCAL_PWM_Set_Compare_Value>:
 308:	61 11       	cpse	r22, r1
 30a:	03 c0       	rjmp	.+6      	; 0x312 <MCAL_PWM_Set_Compare_Value+0xa>
 30c:	9b bd       	out	0x2b, r25	; 43
 30e:	8a bd       	out	0x2a, r24	; 42
 310:	08 95       	ret
 312:	99 bd       	out	0x29, r25	; 41
 314:	88 bd       	out	0x28, r24	; 40
 316:	08 95       	ret

00000318 <__vector_9>:
 * ===============================================================
 */

void __vector_9 (void) __attribute__((signal));
void __vector_9 (void)
{
 318:	1f 92       	push	r1
 31a:	0f 92       	push	r0
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	0f 92       	push	r0
 320:	11 24       	eor	r1, r1
 322:	2f 93       	push	r18
 324:	3f 93       	push	r19
 326:	4f 93       	push	r20
 328:	5f 93       	push	r21
 32a:	6f 93       	push	r22
 32c:	7f 93       	push	r23
 32e:	8f 93       	push	r24
 330:	9f 93       	push	r25
 332:	af 93       	push	r26
 334:	bf 93       	push	r27
 336:	ef 93       	push	r30
 338:	ff 93       	push	r31
	g_PWM_Config->P_TOIE1_CALL();
 33a:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <g_PWM_Config>
 33e:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <g_PWM_Config+0x1>
 342:	04 84       	ldd	r0, Z+12	; 0x0c
 344:	f5 85       	ldd	r31, Z+13	; 0x0d
 346:	e0 2d       	mov	r30, r0
 348:	09 95       	icall
}
 34a:	ff 91       	pop	r31
 34c:	ef 91       	pop	r30
 34e:	bf 91       	pop	r27
 350:	af 91       	pop	r26
 352:	9f 91       	pop	r25
 354:	8f 91       	pop	r24
 356:	7f 91       	pop	r23
 358:	6f 91       	pop	r22
 35a:	5f 91       	pop	r21
 35c:	4f 91       	pop	r20
 35e:	3f 91       	pop	r19
 360:	2f 91       	pop	r18
 362:	0f 90       	pop	r0
 364:	0f be       	out	0x3f, r0	; 63
 366:	0f 90       	pop	r0
 368:	1f 90       	pop	r1
 36a:	18 95       	reti

0000036c <__vector_7>:

void __vector_7 (void) __attribute__((signal));
void __vector_7 (void)
{
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	0f 92       	push	r0
 374:	11 24       	eor	r1, r1
 376:	2f 93       	push	r18
 378:	3f 93       	push	r19
 37a:	4f 93       	push	r20
 37c:	5f 93       	push	r21
 37e:	6f 93       	push	r22
 380:	7f 93       	push	r23
 382:	8f 93       	push	r24
 384:	9f 93       	push	r25
 386:	af 93       	push	r26
 388:	bf 93       	push	r27
 38a:	ef 93       	push	r30
 38c:	ff 93       	push	r31
	g_PWM_Config->P_OCIE1A_CALL();
 38e:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <g_PWM_Config>
 392:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <g_PWM_Config+0x1>
 396:	06 84       	ldd	r0, Z+14	; 0x0e
 398:	f7 85       	ldd	r31, Z+15	; 0x0f
 39a:	e0 2d       	mov	r30, r0
 39c:	09 95       	icall
}
 39e:	ff 91       	pop	r31
 3a0:	ef 91       	pop	r30
 3a2:	bf 91       	pop	r27
 3a4:	af 91       	pop	r26
 3a6:	9f 91       	pop	r25
 3a8:	8f 91       	pop	r24
 3aa:	7f 91       	pop	r23
 3ac:	6f 91       	pop	r22
 3ae:	5f 91       	pop	r21
 3b0:	4f 91       	pop	r20
 3b2:	3f 91       	pop	r19
 3b4:	2f 91       	pop	r18
 3b6:	0f 90       	pop	r0
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	0f 90       	pop	r0
 3bc:	1f 90       	pop	r1
 3be:	18 95       	reti

000003c0 <__vector_8>:

void __vector_8 (void) __attribute__((signal));
void __vector_8 (void)
{
 3c0:	1f 92       	push	r1
 3c2:	0f 92       	push	r0
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	0f 92       	push	r0
 3c8:	11 24       	eor	r1, r1
 3ca:	2f 93       	push	r18
 3cc:	3f 93       	push	r19
 3ce:	4f 93       	push	r20
 3d0:	5f 93       	push	r21
 3d2:	6f 93       	push	r22
 3d4:	7f 93       	push	r23
 3d6:	8f 93       	push	r24
 3d8:	9f 93       	push	r25
 3da:	af 93       	push	r26
 3dc:	bf 93       	push	r27
 3de:	ef 93       	push	r30
 3e0:	ff 93       	push	r31
	g_PWM_Config->P_OCIE1B_CALL();
 3e2:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <g_PWM_Config>
 3e6:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <g_PWM_Config+0x1>
 3ea:	00 88       	ldd	r0, Z+16	; 0x10
 3ec:	f1 89       	ldd	r31, Z+17	; 0x11
 3ee:	e0 2d       	mov	r30, r0
 3f0:	09 95       	icall
}
 3f2:	ff 91       	pop	r31
 3f4:	ef 91       	pop	r30
 3f6:	bf 91       	pop	r27
 3f8:	af 91       	pop	r26
 3fa:	9f 91       	pop	r25
 3fc:	8f 91       	pop	r24
 3fe:	7f 91       	pop	r23
 400:	6f 91       	pop	r22
 402:	5f 91       	pop	r21
 404:	4f 91       	pop	r20
 406:	3f 91       	pop	r19
 408:	2f 91       	pop	r18
 40a:	0f 90       	pop	r0
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	0f 90       	pop	r0
 410:	1f 90       	pop	r1
 412:	18 95       	reti

00000414 <__vector_12>:
 */


void __vector_12 (void) __attribute__((signal));
void __vector_12 (void)
{
 414:	1f 92       	push	r1
 416:	0f 92       	push	r0
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	0f 92       	push	r0
 41c:	11 24       	eor	r1, r1
 41e:	2f 93       	push	r18
 420:	3f 93       	push	r19
 422:	4f 93       	push	r20
 424:	5f 93       	push	r21
 426:	6f 93       	push	r22
 428:	7f 93       	push	r23
 42a:	8f 93       	push	r24
 42c:	9f 93       	push	r25
 42e:	af 93       	push	r26
 430:	bf 93       	push	r27
 432:	ef 93       	push	r30
 434:	ff 93       	push	r31
	g_SPI_Config->P_IRQ_CALL() ;
 436:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <g_SPI_Config>
 43a:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <g_SPI_Config+0x1>
 43e:	07 80       	ldd	r0, Z+7	; 0x07
 440:	f0 85       	ldd	r31, Z+8	; 0x08
 442:	e0 2d       	mov	r30, r0
 444:	09 95       	icall
}
 446:	ff 91       	pop	r31
 448:	ef 91       	pop	r30
 44a:	bf 91       	pop	r27
 44c:	af 91       	pop	r26
 44e:	9f 91       	pop	r25
 450:	8f 91       	pop	r24
 452:	7f 91       	pop	r23
 454:	6f 91       	pop	r22
 456:	5f 91       	pop	r21
 458:	4f 91       	pop	r20
 45a:	3f 91       	pop	r19
 45c:	2f 91       	pop	r18
 45e:	0f 90       	pop	r0
 460:	0f be       	out	0x3f, r0	; 63
 462:	0f 90       	pop	r0
 464:	1f 90       	pop	r1
 466:	18 95       	reti

00000468 <__vector_10>:
 * ===============================================================
 */

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
 468:	1f 92       	push	r1
 46a:	0f 92       	push	r0
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	0f 92       	push	r0
 470:	11 24       	eor	r1, r1
 472:	2f 93       	push	r18
 474:	3f 93       	push	r19
 476:	4f 93       	push	r20
 478:	5f 93       	push	r21
 47a:	6f 93       	push	r22
 47c:	7f 93       	push	r23
 47e:	8f 93       	push	r24
 480:	9f 93       	push	r25
 482:	af 93       	push	r26
 484:	bf 93       	push	r27
 486:	ef 93       	push	r30
 488:	ff 93       	push	r31
	g_TIM0_Config->P_OCIE0_CALL();
 48a:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <g_TIM0_Config>
 48e:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <g_TIM0_Config+0x1>
 492:	00 84       	ldd	r0, Z+8	; 0x08
 494:	f1 85       	ldd	r31, Z+9	; 0x09
 496:	e0 2d       	mov	r30, r0
 498:	09 95       	icall
}
 49a:	ff 91       	pop	r31
 49c:	ef 91       	pop	r30
 49e:	bf 91       	pop	r27
 4a0:	af 91       	pop	r26
 4a2:	9f 91       	pop	r25
 4a4:	8f 91       	pop	r24
 4a6:	7f 91       	pop	r23
 4a8:	6f 91       	pop	r22
 4aa:	5f 91       	pop	r21
 4ac:	4f 91       	pop	r20
 4ae:	3f 91       	pop	r19
 4b0:	2f 91       	pop	r18
 4b2:	0f 90       	pop	r0
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	0f 90       	pop	r0
 4b8:	1f 90       	pop	r1
 4ba:	18 95       	reti

000004bc <__vector_11>:

void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
 4bc:	1f 92       	push	r1
 4be:	0f 92       	push	r0
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	0f 92       	push	r0
 4c4:	11 24       	eor	r1, r1
 4c6:	2f 93       	push	r18
 4c8:	3f 93       	push	r19
 4ca:	4f 93       	push	r20
 4cc:	5f 93       	push	r21
 4ce:	6f 93       	push	r22
 4d0:	7f 93       	push	r23
 4d2:	8f 93       	push	r24
 4d4:	9f 93       	push	r25
 4d6:	af 93       	push	r26
 4d8:	bf 93       	push	r27
 4da:	ef 93       	push	r30
 4dc:	ff 93       	push	r31
	g_TIM0_Config->P_TOIE0_CALL();
 4de:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <g_TIM0_Config>
 4e2:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <g_TIM0_Config+0x1>
 4e6:	06 80       	ldd	r0, Z+6	; 0x06
 4e8:	f7 81       	ldd	r31, Z+7	; 0x07
 4ea:	e0 2d       	mov	r30, r0
 4ec:	09 95       	icall
}
 4ee:	ff 91       	pop	r31
 4f0:	ef 91       	pop	r30
 4f2:	bf 91       	pop	r27
 4f4:	af 91       	pop	r26
 4f6:	9f 91       	pop	r25
 4f8:	8f 91       	pop	r24
 4fa:	7f 91       	pop	r23
 4fc:	6f 91       	pop	r22
 4fe:	5f 91       	pop	r21
 500:	4f 91       	pop	r20
 502:	3f 91       	pop	r19
 504:	2f 91       	pop	r18
 506:	0f 90       	pop	r0
 508:	0f be       	out	0x3f, r0	; 63
 50a:	0f 90       	pop	r0
 50c:	1f 90       	pop	r1
 50e:	18 95       	reti

00000510 <__vector_13>:
 *
 * ===============================================================
 */
void __vector_13 (void) __attribute__((signal));
void __vector_13 (void)
{
 510:	1f 92       	push	r1
 512:	0f 92       	push	r0
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	0f 92       	push	r0
 518:	11 24       	eor	r1, r1
 51a:	2f 93       	push	r18
 51c:	3f 93       	push	r19
 51e:	4f 93       	push	r20
 520:	5f 93       	push	r21
 522:	6f 93       	push	r22
 524:	7f 93       	push	r23
 526:	8f 93       	push	r24
 528:	9f 93       	push	r25
 52a:	af 93       	push	r26
 52c:	bf 93       	push	r27
 52e:	ef 93       	push	r30
 530:	ff 93       	push	r31
	//Call function
	GPU_IRQ_CALL[2]();
 532:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <GPU_IRQ_CALL+0x4>
 536:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <GPU_IRQ_CALL+0x5>
 53a:	09 95       	icall
}
 53c:	ff 91       	pop	r31
 53e:	ef 91       	pop	r30
 540:	bf 91       	pop	r27
 542:	af 91       	pop	r26
 544:	9f 91       	pop	r25
 546:	8f 91       	pop	r24
 548:	7f 91       	pop	r23
 54a:	6f 91       	pop	r22
 54c:	5f 91       	pop	r21
 54e:	4f 91       	pop	r20
 550:	3f 91       	pop	r19
 552:	2f 91       	pop	r18
 554:	0f 90       	pop	r0
 556:	0f be       	out	0x3f, r0	; 63
 558:	0f 90       	pop	r0
 55a:	1f 90       	pop	r1
 55c:	18 95       	reti

0000055e <__vector_14>:

void __vector_14 (void) __attribute__((signal));
void __vector_14 (void)
{
 55e:	1f 92       	push	r1
 560:	0f 92       	push	r0
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	0f 92       	push	r0
 566:	11 24       	eor	r1, r1
 568:	2f 93       	push	r18
 56a:	3f 93       	push	r19
 56c:	4f 93       	push	r20
 56e:	5f 93       	push	r21
 570:	6f 93       	push	r22
 572:	7f 93       	push	r23
 574:	8f 93       	push	r24
 576:	9f 93       	push	r25
 578:	af 93       	push	r26
 57a:	bf 93       	push	r27
 57c:	ef 93       	push	r30
 57e:	ff 93       	push	r31
	//Call function
	GPU_IRQ_CALL[1]();
 580:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <GPU_IRQ_CALL+0x2>
 584:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <GPU_IRQ_CALL+0x3>
 588:	09 95       	icall
}
 58a:	ff 91       	pop	r31
 58c:	ef 91       	pop	r30
 58e:	bf 91       	pop	r27
 590:	af 91       	pop	r26
 592:	9f 91       	pop	r25
 594:	8f 91       	pop	r24
 596:	7f 91       	pop	r23
 598:	6f 91       	pop	r22
 59a:	5f 91       	pop	r21
 59c:	4f 91       	pop	r20
 59e:	3f 91       	pop	r19
 5a0:	2f 91       	pop	r18
 5a2:	0f 90       	pop	r0
 5a4:	0f be       	out	0x3f, r0	; 63
 5a6:	0f 90       	pop	r0
 5a8:	1f 90       	pop	r1
 5aa:	18 95       	reti

000005ac <__vector_15>:

void __vector_15 (void) __attribute__((signal));
void __vector_15 (void)
{
 5ac:	1f 92       	push	r1
 5ae:	0f 92       	push	r0
 5b0:	0f b6       	in	r0, 0x3f	; 63
 5b2:	0f 92       	push	r0
 5b4:	11 24       	eor	r1, r1
 5b6:	2f 93       	push	r18
 5b8:	3f 93       	push	r19
 5ba:	4f 93       	push	r20
 5bc:	5f 93       	push	r21
 5be:	6f 93       	push	r22
 5c0:	7f 93       	push	r23
 5c2:	8f 93       	push	r24
 5c4:	9f 93       	push	r25
 5c6:	af 93       	push	r26
 5c8:	bf 93       	push	r27
 5ca:	ef 93       	push	r30
 5cc:	ff 93       	push	r31
	//Call function
	GPU_IRQ_CALL[0]();
 5ce:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <GPU_IRQ_CALL>
 5d2:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <GPU_IRQ_CALL+0x1>
 5d6:	09 95       	icall
}
 5d8:	ff 91       	pop	r31
 5da:	ef 91       	pop	r30
 5dc:	bf 91       	pop	r27
 5de:	af 91       	pop	r26
 5e0:	9f 91       	pop	r25
 5e2:	8f 91       	pop	r24
 5e4:	7f 91       	pop	r23
 5e6:	6f 91       	pop	r22
 5e8:	5f 91       	pop	r21
 5ea:	4f 91       	pop	r20
 5ec:	3f 91       	pop	r19
 5ee:	2f 91       	pop	r18
 5f0:	0f 90       	pop	r0
 5f2:	0f be       	out	0x3f, r0	; 63
 5f4:	0f 90       	pop	r0
 5f6:	1f 90       	pop	r1
 5f8:	18 95       	reti

000005fa <Servo_Init>:
* @brief		  	-Initializes the TIMER1  to act in mode Fast PWM at 50HZ Output and F_CPU / 64 Input 
* @retval 			-none
* Note				-Disable all pointers
*/
void Servo_Init(void) 
{
 5fa:	cf 93       	push	r28
 5fc:	df 93       	push	r29
 5fe:	cd b7       	in	r28, 0x3d	; 61
 600:	de b7       	in	r29, 0x3e	; 62
 602:	62 97       	sbiw	r28, 0x12	; 18
 604:	0f b6       	in	r0, 0x3f	; 63
 606:	f8 94       	cli
 608:	de bf       	out	0x3e, r29	; 62
 60a:	0f be       	out	0x3f, r0	; 63
 60c:	cd bf       	out	0x3d, r28	; 61
	PWM_config_t PWM_Config ;
	PWM_Config.Compare_Value_CH_B = 0 ;
 60e:	1a 86       	std	Y+10, r1	; 0x0a
 610:	19 86       	std	Y+9, r1	; 0x09
	PWM_Config.Compare_Value_CH_A = 0 ;
 612:	18 86       	std	Y+8, r1	; 0x08
 614:	1f 82       	std	Y+7, r1	; 0x07
	PWM_Config.Output_Compare_pin_B = PWM_Output_Compare_pin_B_Disable ;
 616:	1a 82       	std	Y+2, r1	; 0x02
	PWM_Config.Output_Compare_pin_A = PWM_Output_Compare_pin_A_Clear_At_Compare_Value_Set_At_TOP ;
 618:	80 e8       	ldi	r24, 0x80	; 128
 61a:	89 83       	std	Y+1, r24	; 0x01
	PWM_Config.Clock_Source = PWM_Clock_Source_clk_64 ;
 61c:	83 e0       	ldi	r24, 0x03	; 3
 61e:	8b 83       	std	Y+3, r24	; 0x03
	PWM_Config.TOP_Value = (uint16_t)((F_CPU/(64*50))-1) ;
 620:	83 ec       	ldi	r24, 0xC3	; 195
 622:	99 e0       	ldi	r25, 0x09	; 9
 624:	9c 87       	std	Y+12, r25	; 0x0c
 626:	8b 87       	std	Y+11, r24	; 0x0b
	PWM_Config.OCIE1A_EN = PWM_OCIE1A_ENABLE_Disable ;
 628:	1d 82       	std	Y+5, r1	; 0x05
	PWM_Config.OCIE1B_EN = PWM_OCIE1B_ENABLE_Disable ;
 62a:	1e 82       	std	Y+6, r1	; 0x06
	PWM_Config.TOIE1_EN = PWM_TOIE1_ENABLE_Disable ;
 62c:	1c 82       	std	Y+4, r1	; 0x04
	PWM_Config.P_OCIE1A_CALL = NULL ;
 62e:	18 8a       	std	Y+16, r1	; 0x10
 630:	1f 86       	std	Y+15, r1	; 0x0f
	PWM_Config.P_OCIE1B_CALL = NULL ;
 632:	1a 8a       	std	Y+18, r1	; 0x12
 634:	19 8a       	std	Y+17, r1	; 0x11
	PWM_Config.P_TOIE1_CALL = NULL ;
 636:	1e 86       	std	Y+14, r1	; 0x0e
 638:	1d 86       	std	Y+13, r1	; 0x0d
	MCAL_PWM_Init(&PWM_Config) ;
 63a:	ce 01       	movw	r24, r28
 63c:	01 96       	adiw	r24, 0x01	; 1
 63e:	0e 94 05 01 	call	0x20a	; 0x20a <MCAL_PWM_Init>
}
 642:	62 96       	adiw	r28, 0x12	; 18
 644:	0f b6       	in	r0, 0x3f	; 63
 646:	f8 94       	cli
 648:	de bf       	out	0x3e, r29	; 62
 64a:	0f be       	out	0x3f, r0	; 63
 64c:	cd bf       	out	0x3d, r28	; 61
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	08 95       	ret

00000654 <My_Servo>:
* Note				-none
*/
void My_Servo(uint8_t angle) 
{
	uint16_t Compare_Value = 0;
	Compare_Value = Get_Compare_Value(angle) ;
 654:	68 2f       	mov	r22, r24
 656:	70 e0       	ldi	r23, 0x00	; 0
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	0e 94 87 04 	call	0x90e	; 0x90e <__floatsisf>
 660:	2c ed       	ldi	r18, 0xDC	; 220
 662:	39 e6       	ldi	r19, 0x69	; 105
 664:	4a eb       	ldi	r20, 0xBA	; 186
 666:	56 e3       	ldi	r21, 0x36	; 54
 668:	0e 94 13 05 	call	0xa26	; 0xa26 <__mulsf3>
 66c:	2f e6       	ldi	r18, 0x6F	; 111
 66e:	32 e1       	ldi	r19, 0x12	; 18
 670:	43 e8       	ldi	r20, 0x83	; 131
 672:	5a e3       	ldi	r21, 0x3A	; 58
 674:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__addsf3>
 678:	2d eb       	ldi	r18, 0xBD	; 189
 67a:	37 e3       	ldi	r19, 0x37	; 55
 67c:	46 e0       	ldi	r20, 0x06	; 6
 67e:	57 e3       	ldi	r21, 0x37	; 55
 680:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__divsf3>
 684:	20 e0       	ldi	r18, 0x00	; 0
 686:	30 e0       	ldi	r19, 0x00	; 0
 688:	40 e0       	ldi	r20, 0x00	; 0
 68a:	5f e3       	ldi	r21, 0x3F	; 63
 68c:	0e 94 77 03 	call	0x6ee	; 0x6ee <__subsf3>
 690:	0e 94 56 04 	call	0x8ac	; 0x8ac <__fixunssfsi>
 694:	dc 01       	movw	r26, r24
 696:	cb 01       	movw	r24, r22
	MCAL_PWM_Set_Compare_Value(Compare_Value,A) ;
 698:	60 e0       	ldi	r22, 0x00	; 0
 69a:	0e 94 84 01 	call	0x308	; 0x308 <MCAL_PWM_Set_Compare_Value>
 69e:	08 95       	ret

000006a0 <main>:
#include "PWM_Driver.h"
#include "Servo_Motor.h"

int main(void)
{
	Servo_Init();
 6a0:	0e 94 fd 02 	call	0x5fa	; 0x5fa <Servo_Init>
    while (1) 
    {
		My_Servo(0) ;
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	0e 94 2a 03 	call	0x654	; 0x654 <My_Servo>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6aa:	2f ef       	ldi	r18, 0xFF	; 255
 6ac:	8e e9       	ldi	r24, 0x9E	; 158
 6ae:	94 e2       	ldi	r25, 0x24	; 36
 6b0:	21 50       	subi	r18, 0x01	; 1
 6b2:	80 40       	sbci	r24, 0x00	; 0
 6b4:	90 40       	sbci	r25, 0x00	; 0
 6b6:	e1 f7       	brne	.-8      	; 0x6b0 <main+0x10>
 6b8:	00 c0       	rjmp	.+0      	; 0x6ba <main+0x1a>
 6ba:	00 00       	nop
		_delay_ms(1500);
		My_Servo(90)  ;
 6bc:	8a e5       	ldi	r24, 0x5A	; 90
 6be:	0e 94 2a 03 	call	0x654	; 0x654 <My_Servo>
 6c2:	2f ef       	ldi	r18, 0xFF	; 255
 6c4:	8e e9       	ldi	r24, 0x9E	; 158
 6c6:	94 e2       	ldi	r25, 0x24	; 36
 6c8:	21 50       	subi	r18, 0x01	; 1
 6ca:	80 40       	sbci	r24, 0x00	; 0
 6cc:	90 40       	sbci	r25, 0x00	; 0
 6ce:	e1 f7       	brne	.-8      	; 0x6c8 <main+0x28>
 6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <main+0x32>
 6d2:	00 00       	nop
		_delay_ms(1500);
		My_Servo(180)  ;
 6d4:	84 eb       	ldi	r24, 0xB4	; 180
 6d6:	0e 94 2a 03 	call	0x654	; 0x654 <My_Servo>
 6da:	2f ef       	ldi	r18, 0xFF	; 255
 6dc:	8e e9       	ldi	r24, 0x9E	; 158
 6de:	94 e2       	ldi	r25, 0x24	; 36
 6e0:	21 50       	subi	r18, 0x01	; 1
 6e2:	80 40       	sbci	r24, 0x00	; 0
 6e4:	90 40       	sbci	r25, 0x00	; 0
 6e6:	e1 f7       	brne	.-8      	; 0x6e0 <main+0x40>
 6e8:	00 c0       	rjmp	.+0      	; 0x6ea <main+0x4a>
 6ea:	00 00       	nop
 6ec:	db cf       	rjmp	.-74     	; 0x6a4 <main+0x4>

000006ee <__subsf3>:
 6ee:	50 58       	subi	r21, 0x80	; 128

000006f0 <__addsf3>:
 6f0:	bb 27       	eor	r27, r27
 6f2:	aa 27       	eor	r26, r26
 6f4:	0e 94 8f 03 	call	0x71e	; 0x71e <__addsf3x>
 6f8:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__fp_round>
 6fc:	0e 94 cb 04 	call	0x996	; 0x996 <__fp_pscA>
 700:	38 f0       	brcs	.+14     	; 0x710 <__addsf3+0x20>
 702:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fp_pscB>
 706:	20 f0       	brcs	.+8      	; 0x710 <__addsf3+0x20>
 708:	39 f4       	brne	.+14     	; 0x718 <__addsf3+0x28>
 70a:	9f 3f       	cpi	r25, 0xFF	; 255
 70c:	19 f4       	brne	.+6      	; 0x714 <__addsf3+0x24>
 70e:	26 f4       	brtc	.+8      	; 0x718 <__addsf3+0x28>
 710:	0c 94 c8 04 	jmp	0x990	; 0x990 <__fp_nan>
 714:	0e f4       	brtc	.+2      	; 0x718 <__addsf3+0x28>
 716:	e0 95       	com	r30
 718:	e7 fb       	bst	r30, 7
 71a:	0c 94 c2 04 	jmp	0x984	; 0x984 <__fp_inf>

0000071e <__addsf3x>:
 71e:	e9 2f       	mov	r30, r25
 720:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__fp_split3>
 724:	58 f3       	brcs	.-42     	; 0x6fc <__addsf3+0xc>
 726:	ba 17       	cp	r27, r26
 728:	62 07       	cpc	r22, r18
 72a:	73 07       	cpc	r23, r19
 72c:	84 07       	cpc	r24, r20
 72e:	95 07       	cpc	r25, r21
 730:	20 f0       	brcs	.+8      	; 0x73a <__addsf3x+0x1c>
 732:	79 f4       	brne	.+30     	; 0x752 <__addsf3x+0x34>
 734:	a6 f5       	brtc	.+104    	; 0x79e <__addsf3x+0x80>
 736:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__fp_zero>
 73a:	0e f4       	brtc	.+2      	; 0x73e <__addsf3x+0x20>
 73c:	e0 95       	com	r30
 73e:	0b 2e       	mov	r0, r27
 740:	ba 2f       	mov	r27, r26
 742:	a0 2d       	mov	r26, r0
 744:	0b 01       	movw	r0, r22
 746:	b9 01       	movw	r22, r18
 748:	90 01       	movw	r18, r0
 74a:	0c 01       	movw	r0, r24
 74c:	ca 01       	movw	r24, r20
 74e:	a0 01       	movw	r20, r0
 750:	11 24       	eor	r1, r1
 752:	ff 27       	eor	r31, r31
 754:	59 1b       	sub	r21, r25
 756:	99 f0       	breq	.+38     	; 0x77e <__addsf3x+0x60>
 758:	59 3f       	cpi	r21, 0xF9	; 249
 75a:	50 f4       	brcc	.+20     	; 0x770 <__addsf3x+0x52>
 75c:	50 3e       	cpi	r21, 0xE0	; 224
 75e:	68 f1       	brcs	.+90     	; 0x7ba <__addsf3x+0x9c>
 760:	1a 16       	cp	r1, r26
 762:	f0 40       	sbci	r31, 0x00	; 0
 764:	a2 2f       	mov	r26, r18
 766:	23 2f       	mov	r18, r19
 768:	34 2f       	mov	r19, r20
 76a:	44 27       	eor	r20, r20
 76c:	58 5f       	subi	r21, 0xF8	; 248
 76e:	f3 cf       	rjmp	.-26     	; 0x756 <__addsf3x+0x38>
 770:	46 95       	lsr	r20
 772:	37 95       	ror	r19
 774:	27 95       	ror	r18
 776:	a7 95       	ror	r26
 778:	f0 40       	sbci	r31, 0x00	; 0
 77a:	53 95       	inc	r21
 77c:	c9 f7       	brne	.-14     	; 0x770 <__addsf3x+0x52>
 77e:	7e f4       	brtc	.+30     	; 0x79e <__addsf3x+0x80>
 780:	1f 16       	cp	r1, r31
 782:	ba 0b       	sbc	r27, r26
 784:	62 0b       	sbc	r22, r18
 786:	73 0b       	sbc	r23, r19
 788:	84 0b       	sbc	r24, r20
 78a:	ba f0       	brmi	.+46     	; 0x7ba <__addsf3x+0x9c>
 78c:	91 50       	subi	r25, 0x01	; 1
 78e:	a1 f0       	breq	.+40     	; 0x7b8 <__addsf3x+0x9a>
 790:	ff 0f       	add	r31, r31
 792:	bb 1f       	adc	r27, r27
 794:	66 1f       	adc	r22, r22
 796:	77 1f       	adc	r23, r23
 798:	88 1f       	adc	r24, r24
 79a:	c2 f7       	brpl	.-16     	; 0x78c <__addsf3x+0x6e>
 79c:	0e c0       	rjmp	.+28     	; 0x7ba <__addsf3x+0x9c>
 79e:	ba 0f       	add	r27, r26
 7a0:	62 1f       	adc	r22, r18
 7a2:	73 1f       	adc	r23, r19
 7a4:	84 1f       	adc	r24, r20
 7a6:	48 f4       	brcc	.+18     	; 0x7ba <__addsf3x+0x9c>
 7a8:	87 95       	ror	r24
 7aa:	77 95       	ror	r23
 7ac:	67 95       	ror	r22
 7ae:	b7 95       	ror	r27
 7b0:	f7 95       	ror	r31
 7b2:	9e 3f       	cpi	r25, 0xFE	; 254
 7b4:	08 f0       	brcs	.+2      	; 0x7b8 <__addsf3x+0x9a>
 7b6:	b0 cf       	rjmp	.-160    	; 0x718 <__addsf3+0x28>
 7b8:	93 95       	inc	r25
 7ba:	88 0f       	add	r24, r24
 7bc:	08 f0       	brcs	.+2      	; 0x7c0 <__addsf3x+0xa2>
 7be:	99 27       	eor	r25, r25
 7c0:	ee 0f       	add	r30, r30
 7c2:	97 95       	ror	r25
 7c4:	87 95       	ror	r24
 7c6:	08 95       	ret

000007c8 <__divsf3>:
 7c8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__divsf3x>
 7cc:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__fp_round>
 7d0:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fp_pscB>
 7d4:	58 f0       	brcs	.+22     	; 0x7ec <__divsf3+0x24>
 7d6:	0e 94 cb 04 	call	0x996	; 0x996 <__fp_pscA>
 7da:	40 f0       	brcs	.+16     	; 0x7ec <__divsf3+0x24>
 7dc:	29 f4       	brne	.+10     	; 0x7e8 <__divsf3+0x20>
 7de:	5f 3f       	cpi	r21, 0xFF	; 255
 7e0:	29 f0       	breq	.+10     	; 0x7ec <__divsf3+0x24>
 7e2:	0c 94 c2 04 	jmp	0x984	; 0x984 <__fp_inf>
 7e6:	51 11       	cpse	r21, r1
 7e8:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__fp_szero>
 7ec:	0c 94 c8 04 	jmp	0x990	; 0x990 <__fp_nan>

000007f0 <__divsf3x>:
 7f0:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__fp_split3>
 7f4:	68 f3       	brcs	.-38     	; 0x7d0 <__divsf3+0x8>

000007f6 <__divsf3_pse>:
 7f6:	99 23       	and	r25, r25
 7f8:	b1 f3       	breq	.-20     	; 0x7e6 <__divsf3+0x1e>
 7fa:	55 23       	and	r21, r21
 7fc:	91 f3       	breq	.-28     	; 0x7e2 <__divsf3+0x1a>
 7fe:	95 1b       	sub	r25, r21
 800:	55 0b       	sbc	r21, r21
 802:	bb 27       	eor	r27, r27
 804:	aa 27       	eor	r26, r26
 806:	62 17       	cp	r22, r18
 808:	73 07       	cpc	r23, r19
 80a:	84 07       	cpc	r24, r20
 80c:	38 f0       	brcs	.+14     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 80e:	9f 5f       	subi	r25, 0xFF	; 255
 810:	5f 4f       	sbci	r21, 0xFF	; 255
 812:	22 0f       	add	r18, r18
 814:	33 1f       	adc	r19, r19
 816:	44 1f       	adc	r20, r20
 818:	aa 1f       	adc	r26, r26
 81a:	a9 f3       	breq	.-22     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 81c:	35 d0       	rcall	.+106    	; 0x888 <__stack+0x29>
 81e:	0e 2e       	mov	r0, r30
 820:	3a f0       	brmi	.+14     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 822:	e0 e8       	ldi	r30, 0x80	; 128
 824:	32 d0       	rcall	.+100    	; 0x88a <__stack+0x2b>
 826:	91 50       	subi	r25, 0x01	; 1
 828:	50 40       	sbci	r21, 0x00	; 0
 82a:	e6 95       	lsr	r30
 82c:	00 1c       	adc	r0, r0
 82e:	ca f7       	brpl	.-14     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 830:	2b d0       	rcall	.+86     	; 0x888 <__stack+0x29>
 832:	fe 2f       	mov	r31, r30
 834:	29 d0       	rcall	.+82     	; 0x888 <__stack+0x29>
 836:	66 0f       	add	r22, r22
 838:	77 1f       	adc	r23, r23
 83a:	88 1f       	adc	r24, r24
 83c:	bb 1f       	adc	r27, r27
 83e:	26 17       	cp	r18, r22
 840:	37 07       	cpc	r19, r23
 842:	48 07       	cpc	r20, r24
 844:	ab 07       	cpc	r26, r27
 846:	b0 e8       	ldi	r27, 0x80	; 128
 848:	09 f0       	breq	.+2      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 84a:	bb 0b       	sbc	r27, r27
 84c:	80 2d       	mov	r24, r0
 84e:	bf 01       	movw	r22, r30
 850:	ff 27       	eor	r31, r31
 852:	93 58       	subi	r25, 0x83	; 131
 854:	5f 4f       	sbci	r21, 0xFF	; 255
 856:	3a f0       	brmi	.+14     	; 0x866 <__stack+0x7>
 858:	9e 3f       	cpi	r25, 0xFE	; 254
 85a:	51 05       	cpc	r21, r1
 85c:	78 f0       	brcs	.+30     	; 0x87c <__stack+0x1d>
 85e:	0c 94 c2 04 	jmp	0x984	; 0x984 <__fp_inf>
 862:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__fp_szero>
 866:	5f 3f       	cpi	r21, 0xFF	; 255
 868:	e4 f3       	brlt	.-8      	; 0x862 <__stack+0x3>
 86a:	98 3e       	cpi	r25, 0xE8	; 232
 86c:	d4 f3       	brlt	.-12     	; 0x862 <__stack+0x3>
 86e:	86 95       	lsr	r24
 870:	77 95       	ror	r23
 872:	67 95       	ror	r22
 874:	b7 95       	ror	r27
 876:	f7 95       	ror	r31
 878:	9f 5f       	subi	r25, 0xFF	; 255
 87a:	c9 f7       	brne	.-14     	; 0x86e <__stack+0xf>
 87c:	88 0f       	add	r24, r24
 87e:	91 1d       	adc	r25, r1
 880:	96 95       	lsr	r25
 882:	87 95       	ror	r24
 884:	97 f9       	bld	r25, 7
 886:	08 95       	ret
 888:	e1 e0       	ldi	r30, 0x01	; 1
 88a:	66 0f       	add	r22, r22
 88c:	77 1f       	adc	r23, r23
 88e:	88 1f       	adc	r24, r24
 890:	bb 1f       	adc	r27, r27
 892:	62 17       	cp	r22, r18
 894:	73 07       	cpc	r23, r19
 896:	84 07       	cpc	r24, r20
 898:	ba 07       	cpc	r27, r26
 89a:	20 f0       	brcs	.+8      	; 0x8a4 <__stack+0x45>
 89c:	62 1b       	sub	r22, r18
 89e:	73 0b       	sbc	r23, r19
 8a0:	84 0b       	sbc	r24, r20
 8a2:	ba 0b       	sbc	r27, r26
 8a4:	ee 1f       	adc	r30, r30
 8a6:	88 f7       	brcc	.-30     	; 0x88a <__stack+0x2b>
 8a8:	e0 95       	com	r30
 8aa:	08 95       	ret

000008ac <__fixunssfsi>:
 8ac:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__fp_splitA>
 8b0:	88 f0       	brcs	.+34     	; 0x8d4 <__fixunssfsi+0x28>
 8b2:	9f 57       	subi	r25, 0x7F	; 127
 8b4:	98 f0       	brcs	.+38     	; 0x8dc <__fixunssfsi+0x30>
 8b6:	b9 2f       	mov	r27, r25
 8b8:	99 27       	eor	r25, r25
 8ba:	b7 51       	subi	r27, 0x17	; 23
 8bc:	b0 f0       	brcs	.+44     	; 0x8ea <__fixunssfsi+0x3e>
 8be:	e1 f0       	breq	.+56     	; 0x8f8 <__fixunssfsi+0x4c>
 8c0:	66 0f       	add	r22, r22
 8c2:	77 1f       	adc	r23, r23
 8c4:	88 1f       	adc	r24, r24
 8c6:	99 1f       	adc	r25, r25
 8c8:	1a f0       	brmi	.+6      	; 0x8d0 <__fixunssfsi+0x24>
 8ca:	ba 95       	dec	r27
 8cc:	c9 f7       	brne	.-14     	; 0x8c0 <__fixunssfsi+0x14>
 8ce:	14 c0       	rjmp	.+40     	; 0x8f8 <__fixunssfsi+0x4c>
 8d0:	b1 30       	cpi	r27, 0x01	; 1
 8d2:	91 f0       	breq	.+36     	; 0x8f8 <__fixunssfsi+0x4c>
 8d4:	0e 94 0c 05 	call	0xa18	; 0xa18 <__fp_zero>
 8d8:	b1 e0       	ldi	r27, 0x01	; 1
 8da:	08 95       	ret
 8dc:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__fp_zero>
 8e0:	67 2f       	mov	r22, r23
 8e2:	78 2f       	mov	r23, r24
 8e4:	88 27       	eor	r24, r24
 8e6:	b8 5f       	subi	r27, 0xF8	; 248
 8e8:	39 f0       	breq	.+14     	; 0x8f8 <__fixunssfsi+0x4c>
 8ea:	b9 3f       	cpi	r27, 0xF9	; 249
 8ec:	cc f3       	brlt	.-14     	; 0x8e0 <__fixunssfsi+0x34>
 8ee:	86 95       	lsr	r24
 8f0:	77 95       	ror	r23
 8f2:	67 95       	ror	r22
 8f4:	b3 95       	inc	r27
 8f6:	d9 f7       	brne	.-10     	; 0x8ee <__fixunssfsi+0x42>
 8f8:	3e f4       	brtc	.+14     	; 0x908 <__fixunssfsi+0x5c>
 8fa:	90 95       	com	r25
 8fc:	80 95       	com	r24
 8fe:	70 95       	com	r23
 900:	61 95       	neg	r22
 902:	7f 4f       	sbci	r23, 0xFF	; 255
 904:	8f 4f       	sbci	r24, 0xFF	; 255
 906:	9f 4f       	sbci	r25, 0xFF	; 255
 908:	08 95       	ret

0000090a <__floatunsisf>:
 90a:	e8 94       	clt
 90c:	09 c0       	rjmp	.+18     	; 0x920 <__floatsisf+0x12>

0000090e <__floatsisf>:
 90e:	97 fb       	bst	r25, 7
 910:	3e f4       	brtc	.+14     	; 0x920 <__floatsisf+0x12>
 912:	90 95       	com	r25
 914:	80 95       	com	r24
 916:	70 95       	com	r23
 918:	61 95       	neg	r22
 91a:	7f 4f       	sbci	r23, 0xFF	; 255
 91c:	8f 4f       	sbci	r24, 0xFF	; 255
 91e:	9f 4f       	sbci	r25, 0xFF	; 255
 920:	99 23       	and	r25, r25
 922:	a9 f0       	breq	.+42     	; 0x94e <__floatsisf+0x40>
 924:	f9 2f       	mov	r31, r25
 926:	96 e9       	ldi	r25, 0x96	; 150
 928:	bb 27       	eor	r27, r27
 92a:	93 95       	inc	r25
 92c:	f6 95       	lsr	r31
 92e:	87 95       	ror	r24
 930:	77 95       	ror	r23
 932:	67 95       	ror	r22
 934:	b7 95       	ror	r27
 936:	f1 11       	cpse	r31, r1
 938:	f8 cf       	rjmp	.-16     	; 0x92a <__floatsisf+0x1c>
 93a:	fa f4       	brpl	.+62     	; 0x97a <__floatsisf+0x6c>
 93c:	bb 0f       	add	r27, r27
 93e:	11 f4       	brne	.+4      	; 0x944 <__floatsisf+0x36>
 940:	60 ff       	sbrs	r22, 0
 942:	1b c0       	rjmp	.+54     	; 0x97a <__floatsisf+0x6c>
 944:	6f 5f       	subi	r22, 0xFF	; 255
 946:	7f 4f       	sbci	r23, 0xFF	; 255
 948:	8f 4f       	sbci	r24, 0xFF	; 255
 94a:	9f 4f       	sbci	r25, 0xFF	; 255
 94c:	16 c0       	rjmp	.+44     	; 0x97a <__floatsisf+0x6c>
 94e:	88 23       	and	r24, r24
 950:	11 f0       	breq	.+4      	; 0x956 <__floatsisf+0x48>
 952:	96 e9       	ldi	r25, 0x96	; 150
 954:	11 c0       	rjmp	.+34     	; 0x978 <__floatsisf+0x6a>
 956:	77 23       	and	r23, r23
 958:	21 f0       	breq	.+8      	; 0x962 <__floatsisf+0x54>
 95a:	9e e8       	ldi	r25, 0x8E	; 142
 95c:	87 2f       	mov	r24, r23
 95e:	76 2f       	mov	r23, r22
 960:	05 c0       	rjmp	.+10     	; 0x96c <__floatsisf+0x5e>
 962:	66 23       	and	r22, r22
 964:	71 f0       	breq	.+28     	; 0x982 <__floatsisf+0x74>
 966:	96 e8       	ldi	r25, 0x86	; 134
 968:	86 2f       	mov	r24, r22
 96a:	70 e0       	ldi	r23, 0x00	; 0
 96c:	60 e0       	ldi	r22, 0x00	; 0
 96e:	2a f0       	brmi	.+10     	; 0x97a <__floatsisf+0x6c>
 970:	9a 95       	dec	r25
 972:	66 0f       	add	r22, r22
 974:	77 1f       	adc	r23, r23
 976:	88 1f       	adc	r24, r24
 978:	da f7       	brpl	.-10     	; 0x970 <__floatsisf+0x62>
 97a:	88 0f       	add	r24, r24
 97c:	96 95       	lsr	r25
 97e:	87 95       	ror	r24
 980:	97 f9       	bld	r25, 7
 982:	08 95       	ret

00000984 <__fp_inf>:
 984:	97 f9       	bld	r25, 7
 986:	9f 67       	ori	r25, 0x7F	; 127
 988:	80 e8       	ldi	r24, 0x80	; 128
 98a:	70 e0       	ldi	r23, 0x00	; 0
 98c:	60 e0       	ldi	r22, 0x00	; 0
 98e:	08 95       	ret

00000990 <__fp_nan>:
 990:	9f ef       	ldi	r25, 0xFF	; 255
 992:	80 ec       	ldi	r24, 0xC0	; 192
 994:	08 95       	ret

00000996 <__fp_pscA>:
 996:	00 24       	eor	r0, r0
 998:	0a 94       	dec	r0
 99a:	16 16       	cp	r1, r22
 99c:	17 06       	cpc	r1, r23
 99e:	18 06       	cpc	r1, r24
 9a0:	09 06       	cpc	r0, r25
 9a2:	08 95       	ret

000009a4 <__fp_pscB>:
 9a4:	00 24       	eor	r0, r0
 9a6:	0a 94       	dec	r0
 9a8:	12 16       	cp	r1, r18
 9aa:	13 06       	cpc	r1, r19
 9ac:	14 06       	cpc	r1, r20
 9ae:	05 06       	cpc	r0, r21
 9b0:	08 95       	ret

000009b2 <__fp_round>:
 9b2:	09 2e       	mov	r0, r25
 9b4:	03 94       	inc	r0
 9b6:	00 0c       	add	r0, r0
 9b8:	11 f4       	brne	.+4      	; 0x9be <__fp_round+0xc>
 9ba:	88 23       	and	r24, r24
 9bc:	52 f0       	brmi	.+20     	; 0x9d2 <__fp_round+0x20>
 9be:	bb 0f       	add	r27, r27
 9c0:	40 f4       	brcc	.+16     	; 0x9d2 <__fp_round+0x20>
 9c2:	bf 2b       	or	r27, r31
 9c4:	11 f4       	brne	.+4      	; 0x9ca <__fp_round+0x18>
 9c6:	60 ff       	sbrs	r22, 0
 9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <__fp_round+0x20>
 9ca:	6f 5f       	subi	r22, 0xFF	; 255
 9cc:	7f 4f       	sbci	r23, 0xFF	; 255
 9ce:	8f 4f       	sbci	r24, 0xFF	; 255
 9d0:	9f 4f       	sbci	r25, 0xFF	; 255
 9d2:	08 95       	ret

000009d4 <__fp_split3>:
 9d4:	57 fd       	sbrc	r21, 7
 9d6:	90 58       	subi	r25, 0x80	; 128
 9d8:	44 0f       	add	r20, r20
 9da:	55 1f       	adc	r21, r21
 9dc:	59 f0       	breq	.+22     	; 0x9f4 <__fp_splitA+0x10>
 9de:	5f 3f       	cpi	r21, 0xFF	; 255
 9e0:	71 f0       	breq	.+28     	; 0x9fe <__fp_splitA+0x1a>
 9e2:	47 95       	ror	r20

000009e4 <__fp_splitA>:
 9e4:	88 0f       	add	r24, r24
 9e6:	97 fb       	bst	r25, 7
 9e8:	99 1f       	adc	r25, r25
 9ea:	61 f0       	breq	.+24     	; 0xa04 <__fp_splitA+0x20>
 9ec:	9f 3f       	cpi	r25, 0xFF	; 255
 9ee:	79 f0       	breq	.+30     	; 0xa0e <__fp_splitA+0x2a>
 9f0:	87 95       	ror	r24
 9f2:	08 95       	ret
 9f4:	12 16       	cp	r1, r18
 9f6:	13 06       	cpc	r1, r19
 9f8:	14 06       	cpc	r1, r20
 9fa:	55 1f       	adc	r21, r21
 9fc:	f2 cf       	rjmp	.-28     	; 0x9e2 <__fp_split3+0xe>
 9fe:	46 95       	lsr	r20
 a00:	f1 df       	rcall	.-30     	; 0x9e4 <__fp_splitA>
 a02:	08 c0       	rjmp	.+16     	; 0xa14 <__fp_splitA+0x30>
 a04:	16 16       	cp	r1, r22
 a06:	17 06       	cpc	r1, r23
 a08:	18 06       	cpc	r1, r24
 a0a:	99 1f       	adc	r25, r25
 a0c:	f1 cf       	rjmp	.-30     	; 0x9f0 <__fp_splitA+0xc>
 a0e:	86 95       	lsr	r24
 a10:	71 05       	cpc	r23, r1
 a12:	61 05       	cpc	r22, r1
 a14:	08 94       	sec
 a16:	08 95       	ret

00000a18 <__fp_zero>:
 a18:	e8 94       	clt

00000a1a <__fp_szero>:
 a1a:	bb 27       	eor	r27, r27
 a1c:	66 27       	eor	r22, r22
 a1e:	77 27       	eor	r23, r23
 a20:	cb 01       	movw	r24, r22
 a22:	97 f9       	bld	r25, 7
 a24:	08 95       	ret

00000a26 <__mulsf3>:
 a26:	0e 94 26 05 	call	0xa4c	; 0xa4c <__mulsf3x>
 a2a:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__fp_round>
 a2e:	0e 94 cb 04 	call	0x996	; 0x996 <__fp_pscA>
 a32:	38 f0       	brcs	.+14     	; 0xa42 <__mulsf3+0x1c>
 a34:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fp_pscB>
 a38:	20 f0       	brcs	.+8      	; 0xa42 <__mulsf3+0x1c>
 a3a:	95 23       	and	r25, r21
 a3c:	11 f0       	breq	.+4      	; 0xa42 <__mulsf3+0x1c>
 a3e:	0c 94 c2 04 	jmp	0x984	; 0x984 <__fp_inf>
 a42:	0c 94 c8 04 	jmp	0x990	; 0x990 <__fp_nan>
 a46:	11 24       	eor	r1, r1
 a48:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__fp_szero>

00000a4c <__mulsf3x>:
 a4c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__fp_split3>
 a50:	70 f3       	brcs	.-36     	; 0xa2e <__mulsf3+0x8>

00000a52 <__mulsf3_pse>:
 a52:	95 9f       	mul	r25, r21
 a54:	c1 f3       	breq	.-16     	; 0xa46 <__mulsf3+0x20>
 a56:	95 0f       	add	r25, r21
 a58:	50 e0       	ldi	r21, 0x00	; 0
 a5a:	55 1f       	adc	r21, r21
 a5c:	62 9f       	mul	r22, r18
 a5e:	f0 01       	movw	r30, r0
 a60:	72 9f       	mul	r23, r18
 a62:	bb 27       	eor	r27, r27
 a64:	f0 0d       	add	r31, r0
 a66:	b1 1d       	adc	r27, r1
 a68:	63 9f       	mul	r22, r19
 a6a:	aa 27       	eor	r26, r26
 a6c:	f0 0d       	add	r31, r0
 a6e:	b1 1d       	adc	r27, r1
 a70:	aa 1f       	adc	r26, r26
 a72:	64 9f       	mul	r22, r20
 a74:	66 27       	eor	r22, r22
 a76:	b0 0d       	add	r27, r0
 a78:	a1 1d       	adc	r26, r1
 a7a:	66 1f       	adc	r22, r22
 a7c:	82 9f       	mul	r24, r18
 a7e:	22 27       	eor	r18, r18
 a80:	b0 0d       	add	r27, r0
 a82:	a1 1d       	adc	r26, r1
 a84:	62 1f       	adc	r22, r18
 a86:	73 9f       	mul	r23, r19
 a88:	b0 0d       	add	r27, r0
 a8a:	a1 1d       	adc	r26, r1
 a8c:	62 1f       	adc	r22, r18
 a8e:	83 9f       	mul	r24, r19
 a90:	a0 0d       	add	r26, r0
 a92:	61 1d       	adc	r22, r1
 a94:	22 1f       	adc	r18, r18
 a96:	74 9f       	mul	r23, r20
 a98:	33 27       	eor	r19, r19
 a9a:	a0 0d       	add	r26, r0
 a9c:	61 1d       	adc	r22, r1
 a9e:	23 1f       	adc	r18, r19
 aa0:	84 9f       	mul	r24, r20
 aa2:	60 0d       	add	r22, r0
 aa4:	21 1d       	adc	r18, r1
 aa6:	82 2f       	mov	r24, r18
 aa8:	76 2f       	mov	r23, r22
 aaa:	6a 2f       	mov	r22, r26
 aac:	11 24       	eor	r1, r1
 aae:	9f 57       	subi	r25, 0x7F	; 127
 ab0:	50 40       	sbci	r21, 0x00	; 0
 ab2:	9a f0       	brmi	.+38     	; 0xada <__mulsf3_pse+0x88>
 ab4:	f1 f0       	breq	.+60     	; 0xaf2 <__mulsf3_pse+0xa0>
 ab6:	88 23       	and	r24, r24
 ab8:	4a f0       	brmi	.+18     	; 0xacc <__mulsf3_pse+0x7a>
 aba:	ee 0f       	add	r30, r30
 abc:	ff 1f       	adc	r31, r31
 abe:	bb 1f       	adc	r27, r27
 ac0:	66 1f       	adc	r22, r22
 ac2:	77 1f       	adc	r23, r23
 ac4:	88 1f       	adc	r24, r24
 ac6:	91 50       	subi	r25, 0x01	; 1
 ac8:	50 40       	sbci	r21, 0x00	; 0
 aca:	a9 f7       	brne	.-22     	; 0xab6 <__mulsf3_pse+0x64>
 acc:	9e 3f       	cpi	r25, 0xFE	; 254
 ace:	51 05       	cpc	r21, r1
 ad0:	80 f0       	brcs	.+32     	; 0xaf2 <__mulsf3_pse+0xa0>
 ad2:	0c 94 c2 04 	jmp	0x984	; 0x984 <__fp_inf>
 ad6:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__fp_szero>
 ada:	5f 3f       	cpi	r21, 0xFF	; 255
 adc:	e4 f3       	brlt	.-8      	; 0xad6 <__mulsf3_pse+0x84>
 ade:	98 3e       	cpi	r25, 0xE8	; 232
 ae0:	d4 f3       	brlt	.-12     	; 0xad6 <__mulsf3_pse+0x84>
 ae2:	86 95       	lsr	r24
 ae4:	77 95       	ror	r23
 ae6:	67 95       	ror	r22
 ae8:	b7 95       	ror	r27
 aea:	f7 95       	ror	r31
 aec:	e7 95       	ror	r30
 aee:	9f 5f       	subi	r25, 0xFF	; 255
 af0:	c1 f7       	brne	.-16     	; 0xae2 <__mulsf3_pse+0x90>
 af2:	fe 2b       	or	r31, r30
 af4:	88 0f       	add	r24, r24
 af6:	91 1d       	adc	r25, r1
 af8:	96 95       	lsr	r25
 afa:	87 95       	ror	r24
 afc:	97 f9       	bld	r25, 7
 afe:	08 95       	ret

00000b00 <_exit>:
 b00:	f8 94       	cli

00000b02 <__stop_program>:
 b02:	ff cf       	rjmp	.-2      	; 0xb02 <__stop_program>
